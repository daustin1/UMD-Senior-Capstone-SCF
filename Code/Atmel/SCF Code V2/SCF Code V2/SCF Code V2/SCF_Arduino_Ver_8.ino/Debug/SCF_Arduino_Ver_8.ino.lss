
SCF_Arduino_Ver_8.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  000019de  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  008002b0  008002b0  00001b22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ad78  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000282d  00000000  00000000  0000cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029b1  00000000  00000000  0000f579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce8  00000000  00000000  00011f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002cd4  00000000  00000000  00012c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048f7  00000000  00000000  000158e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0001a1df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	09 c1       	rjmp	.+530    	; 0x214 <__dtors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	2d c1       	rjmp	.+602    	; 0x274 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2b c1       	rjmp	.+598    	; 0x274 <__bad_interrupt>
      1e:	00 00       	nop
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c7       	rjmp	.+3718   	; 0xee4 <__vector_23>
      5e:	00 00       	nop
      60:	09 c1       	rjmp	.+530    	; 0x274 <__bad_interrupt>
      62:	00 00       	nop
      64:	a2 c5       	rjmp	.+2884   	; 0xbaa <__vector_25>
      66:	00 00       	nop
      68:	d6 c5       	rjmp	.+2988   	; 0xc16 <__vector_26>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c0       	rjmp	.+474    	; 0x274 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c0       	rjmp	.+470    	; 0x274 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e9 c0       	rjmp	.+466    	; 0x274 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c0       	rjmp	.+462    	; 0x274 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c0       	rjmp	.+458    	; 0x274 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c0       	rjmp	.+454    	; 0x274 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c0       	rjmp	.+446    	; 0x274 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c0       	rjmp	.+442    	; 0x274 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c0       	rjmp	.+438    	; 0x274 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c0       	rjmp	.+434    	; 0x274 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c0       	rjmp	.+430    	; 0x274 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c0       	rjmp	.+426    	; 0x274 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c0       	rjmp	.+422    	; 0x274 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c0       	rjmp	.+418    	; 0x274 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c0       	rjmp	.+414    	; 0x274 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c0       	rjmp	.+410    	; 0x274 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c0       	rjmp	.+406    	; 0x274 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c0       	rjmp	.+402    	; 0x274 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5d 08       	sbc	r5, r13
      e6:	60 08       	sbc	r6, r0
      e8:	4f 08       	sbc	r4, r15
      ea:	53 08       	sbc	r5, r3
      ec:	59 08       	sbc	r5, r9
      ee:	97 08       	sbc	r9, r7
      f0:	64 08       	sbc	r6, r4
      f2:	68 08       	sbc	r6, r8
      f4:	6e 08       	sbc	r6, r14
      f6:	72 08       	sbc	r7, r2
      f8:	76 08       	sbc	r7, r6
      fa:	7c 08       	sbc	r7, r12
      fc:	80 08       	sbc	r8, r0
      fe:	84 08       	sbc	r8, r4
     100:	97 08       	sbc	r9, r7
     102:	8a 08       	sbc	r8, r10
     104:	8e 08       	sbc	r8, r14
     106:	92 08       	sbc	r9, r2

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	68 04       	cpc	r6, r8
     210:	3d 06       	cpc	r3, r29

00000212 <__ctors_end>:
     212:	6e 04       	cpc	r6, r14

00000214 <__dtors_end>:
     214:	11 24       	eor	r1, r1
     216:	1f be       	out	0x3f, r1	; 63
     218:	cf ef       	ldi	r28, 0xFF	; 255
     21a:	d1 e2       	ldi	r29, 0x21	; 33
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0c bf       	out	0x3c, r16	; 60

00000224 <__do_copy_data>:
     224:	12 e0       	ldi	r17, 0x02	; 2
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b2 e0       	ldi	r27, 0x02	; 2
     22a:	ee ed       	ldi	r30, 0xDE	; 222
     22c:	f9 e1       	ldi	r31, 0x19	; 25
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	0b bf       	out	0x3b, r16	; 59
     232:	02 c0       	rjmp	.+4      	; 0x238 <__do_copy_data+0x14>
     234:	07 90       	elpm	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	a0 3b       	cpi	r26, 0xB0	; 176
     23a:	b1 07       	cpc	r27, r17
     23c:	d9 f7       	brne	.-10     	; 0x234 <__do_copy_data+0x10>

0000023e <__do_clear_bss>:
     23e:	23 e0       	ldi	r18, 0x03	; 3
     240:	a0 eb       	ldi	r26, 0xB0	; 176
     242:	b2 e0       	ldi	r27, 0x02	; 2
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	ac 3b       	cpi	r26, 0xBC	; 188
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>

0000024e <__do_global_ctors>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	c9 e0       	ldi	r28, 0x09	; 9
     252:	d1 e0       	ldi	r29, 0x01	; 1
     254:	00 e0       	ldi	r16, 0x00	; 0
     256:	06 c0       	rjmp	.+12     	; 0x264 <__do_global_ctors+0x16>
     258:	21 97       	sbiw	r28, 0x01	; 1
     25a:	01 09       	sbc	r16, r1
     25c:	80 2f       	mov	r24, r16
     25e:	fe 01       	movw	r30, r28
     260:	0e 94 95 0b 	call	0x172a	; 0x172a <__tablejump2__>
     264:	c7 30       	cpi	r28, 0x07	; 7
     266:	d1 07       	cpc	r29, r17
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	08 07       	cpc	r16, r24
     26c:	a9 f7       	brne	.-22     	; 0x258 <__do_global_ctors+0xa>
     26e:	33 d5       	rcall	.+2662   	; 0xcd6 <main>
     270:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__do_global_dtors>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <setup>:
 * Sets each pixel to the color specified in the function call, then turns on the pixel to that color
 */
void setAllLeds(uint8_t *r, uint8_t *g, uint8_t *b) {
  for (int i = 0; i < NUMPIXELS; i++)
    strip.setPixelColor(i, *b, *g, *r);
}
     276:	2f 92       	push	r2
     278:	3f 92       	push	r3
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	2c 97       	sbiw	r28, 0x0c	; 12
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	26 e0       	ldi	r18, 0x06	; 6
     2ac:	40 e8       	ldi	r20, 0x80	; 128
     2ae:	54 e8       	ldi	r21, 0x84	; 132
     2b0:	6e e1       	ldi	r22, 0x1E	; 30
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	80 e1       	ldi	r24, 0x10	; 16
     2b6:	93 e0       	ldi	r25, 0x03	; 3
     2b8:	15 d4       	rcall	.+2090   	; 0xae4 <_ZN14HardwareSerial5beginEmh>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	93 e0       	ldi	r25, 0x03	; 3
     2be:	0e 94 96 09 	call	0x132c	; 0x132c <_ZN16Adafruit_DotStar5beginEv>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	93 e0       	ldi	r25, 0x03	; 3
     2c6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN16Adafruit_DotStar4showEv>
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	30 d7       	rcall	.+3680   	; 0x1130 <pinMode>
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	2d d7       	rcall	.+3674   	; 0x1130 <pinMode>
     2d6:	8a e0       	ldi	r24, 0x0A	; 10
     2d8:	e7 e0       	ldi	r30, 0x07	; 7
     2da:	f2 e0       	ldi	r31, 0x02	; 2
     2dc:	de 01       	movw	r26, r28
     2de:	11 96       	adiw	r26, 0x01	; 1
     2e0:	01 90       	ld	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	8a 95       	dec	r24
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <setup+0x6a>
     2e8:	88 ed       	ldi	r24, 0xD8	; 216
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	9c 87       	std	Y+12, r25	; 0x0c
     2ee:	8b 87       	std	Y+11, r24	; 0x0b
     2f0:	fe 01       	movw	r30, r28
     2f2:	31 96       	adiw	r30, 0x01	; 1
     2f4:	4f 01       	movw	r8, r30
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	22 24       	eor	r2, r2
     2fc:	2a 94       	dec	r2
     2fe:	93 e0       	ldi	r25, 0x03	; 3
     300:	39 2e       	mov	r3, r25
     302:	85 e6       	ldi	r24, 0x65	; 101
     304:	a8 2e       	mov	r10, r24
     306:	b1 2c       	mov	r11, r1
     308:	c1 2c       	mov	r12, r1
     30a:	d1 2c       	mov	r13, r1
     30c:	76 01       	movw	r14, r12
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	af 1a       	sub	r10, r31
     312:	b1 08       	sbc	r11, r1
     314:	91 f1       	breq	.+100    	; 0x37a <setup+0x104>
     316:	f4 01       	movw	r30, r8
     318:	80 81       	ld	r24, Z
     31a:	90 d6       	rcall	.+3360   	; 0x103c <analogRead>
     31c:	21 01       	movw	r4, r2
     31e:	48 1a       	sub	r4, r24
     320:	59 0a       	sbc	r5, r25
     322:	05 2c       	mov	r0, r5
     324:	00 0c       	add	r0, r0
     326:	66 08       	sbc	r6, r6
     328:	77 08       	sbc	r7, r7
     32a:	61 e1       	ldi	r22, 0x11	; 17
     32c:	72 e0       	ldi	r23, 0x02	; 2
     32e:	80 e1       	ldi	r24, 0x10	; 16
     330:	93 e0       	ldi	r25, 0x03	; 3
     332:	1a d5       	rcall	.+2612   	; 0xd68 <_ZN5Print5printEPKc>
     334:	2a e0       	ldi	r18, 0x0A	; 10
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	b3 01       	movw	r22, r6
     33a:	a2 01       	movw	r20, r4
     33c:	80 e1       	ldi	r24, 0x10	; 16
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	76 d5       	rcall	.+2796   	; 0xe2e <_ZN5Print7printlnEmi>
     342:	6a e1       	ldi	r22, 0x1A	; 26
     344:	72 e0       	ldi	r23, 0x02	; 2
     346:	80 e1       	ldi	r24, 0x10	; 16
     348:	93 e0       	ldi	r25, 0x03	; 3
     34a:	0e d5       	rcall	.+2588   	; 0xd68 <_ZN5Print5printEPKc>
     34c:	4a e0       	ldi	r20, 0x0A	; 10
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	b8 01       	movw	r22, r16
     352:	80 e1       	ldi	r24, 0x10	; 16
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	c0 d5       	rcall	.+2944   	; 0xed8 <_ZN5Print5printEii>
     358:	c4 0c       	add	r12, r4
     35a:	d5 1c       	adc	r13, r5
     35c:	e6 1c       	adc	r14, r6
     35e:	f7 1c       	adc	r15, r7
     360:	60 e2       	ldi	r22, 0x20	; 32
     362:	72 e0       	ldi	r23, 0x02	; 2
     364:	80 e1       	ldi	r24, 0x10	; 16
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	ff d4       	rcall	.+2558   	; 0xd68 <_ZN5Print5printEPKc>
     36a:	2a e0       	ldi	r18, 0x0A	; 10
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	b7 01       	movw	r22, r14
     370:	a6 01       	movw	r20, r12
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	4a d5       	rcall	.+2708   	; 0xe0c <_ZN5Print5printEmi>
     378:	ca cf       	rjmp	.-108    	; 0x30e <setup+0x98>
     37a:	67 e2       	ldi	r22, 0x27	; 39
     37c:	72 e0       	ldi	r23, 0x02	; 2
     37e:	80 e1       	ldi	r24, 0x10	; 16
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	f2 d4       	rcall	.+2532   	; 0xd68 <_ZN5Print5printEPKc>
     384:	4a e0       	ldi	r20, 0x0A	; 10
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	64 e6       	ldi	r22, 0x64	; 100
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e1       	ldi	r24, 0x10	; 16
     38e:	93 e0       	ldi	r25, 0x03	; 3
     390:	a3 d5       	rcall	.+2886   	; 0xed8 <_ZN5Print5printEii>
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	24 e6       	ldi	r18, 0x64	; 100
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__udivmodsi4>
     3a2:	69 01       	movw	r12, r18
     3a4:	7a 01       	movw	r14, r20
     3a6:	61 e3       	ldi	r22, 0x31	; 49
     3a8:	72 e0       	ldi	r23, 0x02	; 2
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	dc d4       	rcall	.+2488   	; 0xd68 <_ZN5Print5printEPKc>
     3b0:	2a e0       	ldi	r18, 0x0A	; 10
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	b7 01       	movw	r22, r14
     3b6:	a6 01       	movw	r20, r12
     3b8:	80 e1       	ldi	r24, 0x10	; 16
     3ba:	93 e0       	ldi	r25, 0x03	; 3
     3bc:	38 d5       	rcall	.+2672   	; 0xe2e <_ZN5Print7printlnEmi>
     3be:	eb 85       	ldd	r30, Y+11	; 0x0b
     3c0:	fc 85       	ldd	r31, Y+12	; 0x0c
     3c2:	c1 92       	st	Z+, r12
     3c4:	d1 92       	st	Z+, r13
     3c6:	e1 92       	st	Z+, r14
     3c8:	f1 92       	st	Z+, r15
     3ca:	fc 87       	std	Y+12, r31	; 0x0c
     3cc:	eb 87       	std	Y+11, r30	; 0x0b
     3ce:	0f 5f       	subi	r16, 0xFF	; 255
     3d0:	1f 4f       	sbci	r17, 0xFF	; 255
     3d2:	ff ef       	ldi	r31, 0xFF	; 255
     3d4:	8f 1a       	sub	r8, r31
     3d6:	9f 0a       	sbc	r9, r31
     3d8:	09 30       	cpi	r16, 0x09	; 9
     3da:	11 05       	cpc	r17, r1
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <setup+0x16a>
     3de:	91 cf       	rjmp	.-222    	; 0x302 <setup+0x8c>
     3e0:	2c 96       	adiw	r28, 0x0c	; 12
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	bf 90       	pop	r11
     3fe:	af 90       	pop	r10
     400:	9f 90       	pop	r9
     402:	8f 90       	pop	r8
     404:	7f 90       	pop	r7
     406:	6f 90       	pop	r6
     408:	5f 90       	pop	r5
     40a:	4f 90       	pop	r4
     40c:	3f 90       	pop	r3
     40e:	2f 90       	pop	r2
     410:	08 95       	ret

00000412 <_Z13setLedPortionPhS_S_i>:

/*
 * Sets portion of LEDS based on provided section ie. n = 0, is the first 11 LEDS
 */
void setLedPortion(uint8_t *r, uint8_t *g, uint8_t *b, int n) {
     412:	8f 92       	push	r8
     414:	9f 92       	push	r9
     416:	af 92       	push	r10
     418:	bf 92       	push	r11
     41a:	cf 92       	push	r12
     41c:	df 92       	push	r13
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	5c 01       	movw	r10, r24
     42a:	6b 01       	movw	r12, r22
     42c:	7a 01       	movw	r14, r20
  //Each sensor has about 11 LEDS
  for (int i = n * 11; i < 11 + (11 * n);  i++)
     42e:	8b e0       	ldi	r24, 0x0B	; 11
     430:	82 9f       	mul	r24, r18
     432:	e0 01       	movw	r28, r0
     434:	83 9f       	mul	r24, r19
     436:	d0 0d       	add	r29, r0
     438:	11 24       	eor	r1, r1
     43a:	4e 01       	movw	r8, r28
     43c:	8b e0       	ldi	r24, 0x0B	; 11
     43e:	88 0e       	add	r8, r24
     440:	91 1c       	adc	r9, r1
     442:	c8 15       	cp	r28, r8
     444:	d9 05       	cpc	r29, r9
     446:	6c f4       	brge	.+26     	; 0x462 <_Z13setLedPortionPhS_S_i+0x50>
  {
    strip.setPixelColor(i, *b, *g, *r);
     448:	f5 01       	movw	r30, r10
     44a:	00 81       	ld	r16, Z
     44c:	f6 01       	movw	r30, r12
     44e:	20 81       	ld	r18, Z
     450:	f7 01       	movw	r30, r14
     452:	40 81       	ld	r20, Z
     454:	be 01       	movw	r22, r28
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN16Adafruit_DotStar13setPixelColorEjhhh>
/*
 * Sets portion of LEDS based on provided section ie. n = 0, is the first 11 LEDS
 */
void setLedPortion(uint8_t *r, uint8_t *g, uint8_t *b, int n) {
  //Each sensor has about 11 LEDS
  for (int i = n * 11; i < 11 + (11 * n);  i++)
     45e:	21 96       	adiw	r28, 0x01	; 1
     460:	f0 cf       	rjmp	.-32     	; 0x442 <_Z13setLedPortionPhS_S_i+0x30>
  {
    strip.setPixelColor(i, *b, *g, *r);
  }
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	cf 90       	pop	r12
     470:	bf 90       	pop	r11
     472:	af 90       	pop	r10
     474:	9f 90       	pop	r9
     476:	8f 90       	pop	r8
     478:	08 95       	ret

0000047a <_Z8colormapjPhS_S_>:

/*
 * colormap function to map the spectrum based on the provided temp input
 */
void colormap(uint16_t i, uint8_t *r, uint8_t *g, uint8_t *b)
{
     47a:	6f 92       	push	r6
     47c:	7f 92       	push	r7
     47e:	8f 92       	push	r8
     480:	9f 92       	push	r9
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	fc 01       	movw	r30, r24
     498:	3b 01       	movw	r6, r22
     49a:	ea 01       	movw	r28, r20
     49c:	49 01       	movw	r8, r18
     49e:	bc 01       	movw	r22, r24
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t v;
  if (i < 300)
     4a4:	ec 32       	cpi	r30, 0x2C	; 44
     4a6:	f1 40       	sbci	r31, 0x01	; 1
     4a8:	c8 f4       	brcc	.+50     	; 0x4dc <_Z8colormapjPhS_S_+0x62>
  {
    v = map(i, 0, 300, 0, 255);
     4aa:	1f 92       	push	r1
     4ac:	1f 92       	push	r1
     4ae:	1f 92       	push	r1
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	2f 93       	push	r18
     4b4:	a1 2c       	mov	r10, r1
     4b6:	b1 2c       	mov	r11, r1
     4b8:	65 01       	movw	r12, r10
     4ba:	1c e2       	ldi	r17, 0x2C	; 44
     4bc:	e1 2e       	mov	r14, r17
     4be:	ff 24       	eor	r15, r15
     4c0:	f3 94       	inc	r15
     4c2:	00 e0       	ldi	r16, 0x00	; 0
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	a9 01       	movw	r20, r18
     4cc:	9b d6       	rcall	.+3382   	; 0x1204 <_Z3maplllll>
    //b,g,r
    //strip.setPixelColor(0,255-v,v,0);
    *r = 0;
     4ce:	f3 01       	movw	r30, r6
     4d0:	10 82       	st	Z, r1
    *b = 255 - v;
     4d2:	86 2f       	mov	r24, r22
     4d4:	80 95       	com	r24
     4d6:	f4 01       	movw	r30, r8
     4d8:	80 83       	st	Z, r24
     4da:	18 c0       	rjmp	.+48     	; 0x50c <_Z8colormapjPhS_S_+0x92>
  }
  
  else //>301
  {
    //      //g-r
    v = map(i, 301, 400, 0, 255);
     4dc:	1f 92       	push	r1
     4de:	1f 92       	push	r1
     4e0:	1f 92       	push	r1
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	2f 93       	push	r18
     4e6:	a1 2c       	mov	r10, r1
     4e8:	b1 2c       	mov	r11, r1
     4ea:	65 01       	movw	r12, r10
     4ec:	10 e9       	ldi	r17, 0x90	; 144
     4ee:	e1 2e       	mov	r14, r17
     4f0:	ff 24       	eor	r15, r15
     4f2:	f3 94       	inc	r15
     4f4:	00 e0       	ldi	r16, 0x00	; 0
     4f6:	10 e0       	ldi	r17, 0x00	; 0
     4f8:	2d e2       	ldi	r18, 0x2D	; 45
     4fa:	31 e0       	ldi	r19, 0x01	; 1
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	81 d6       	rcall	.+3330   	; 0x1204 <_Z3maplllll>
    // b,g,r
    *r = v;
     502:	f3 01       	movw	r30, r6
     504:	60 83       	st	Z, r22
    *b = 0;
     506:	f4 01       	movw	r30, r8
     508:	10 82       	st	Z, r1
    *g = 255 - v;
     50a:	60 95       	com	r22
     50c:	68 83       	st	Y, r22
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
  }
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	bf 90       	pop	r11
     528:	af 90       	pop	r10
     52a:	9f 90       	pop	r9
     52c:	8f 90       	pop	r8
     52e:	7f 90       	pop	r7
     530:	6f 90       	pop	r6
     532:	08 95       	ret

00000534 <loop>:
    average = 0;
    sumAvg = 0;
  };
}

void loop() {
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	00 d0       	rcall	.+0      	; 0x542 <loop+0xe>
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
  uint8_t r, g, b; //setup of r,g,b variables

  //Store the ADC value of each array into 16 bit integer variables
  temp[0] = {analogRead(A4)};
     546:	8a e3       	ldi	r24, 0x3A	; 58
     548:	79 d5       	rcall	.+2802   	; 0x103c <analogRead>
     54a:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <__data_end+0x1>
     54e:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
  temp[1] = {analogRead(A3)};
     552:	89 e3       	ldi	r24, 0x39	; 57
     554:	73 d5       	rcall	.+2790   	; 0x103c <analogRead>
     556:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <__data_end+0x3>
  temp[2] = {analogRead(A2)};
     55a:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <__data_end+0x2>
     55e:	88 e3       	ldi	r24, 0x38	; 56
     560:	6d d5       	rcall	.+2778   	; 0x103c <analogRead>
     562:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <__data_end+0x5>
  temp[3] = {analogRead(A1)};
     566:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <__data_end+0x4>
     56a:	87 e3       	ldi	r24, 0x37	; 55
     56c:	67 d5       	rcall	.+2766   	; 0x103c <analogRead>
     56e:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <__data_end+0x7>
  temp[4] = {analogRead(A0)};
     572:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end+0x6>
     576:	86 e3       	ldi	r24, 0x36	; 54
     578:	61 d5       	rcall	.+2754   	; 0x103c <analogRead>
     57a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__data_end+0x9>
  temp[5] = {analogRead(A9)};
     57e:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end+0x8>
     582:	8f e3       	ldi	r24, 0x3F	; 63
     584:	5b d5       	rcall	.+2742   	; 0x103c <analogRead>
     586:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <__data_end+0xb>
  temp[6] = {analogRead(A8)};
     58a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <__data_end+0xa>
     58e:	8e e3       	ldi	r24, 0x3E	; 62
     590:	55 d5       	rcall	.+2730   	; 0x103c <analogRead>
     592:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <__data_end+0xd>
  temp[7] = {analogRead(A7)};
     596:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end+0xc>
     59a:	8d e3       	ldi	r24, 0x3D	; 61
     59c:	4f d5       	rcall	.+2718   	; 0x103c <analogRead>
     59e:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <__data_end+0xf>
  temp[8] = {analogRead(A6)};
     5a2:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <__data_end+0xe>
     5a6:	8c e3       	ldi	r24, 0x3C	; 60
     5a8:	49 d5       	rcall	.+2706   	; 0x103c <analogRead>
     5aa:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <__data_end+0x11>
     5ae:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__data_end+0x10>
     5b2:	e0 eb       	ldi	r30, 0xB0	; 176
     5b4:	f2 e0       	ldi	r31, 0x02	; 2
     5b6:	84 ec       	ldi	r24, 0xC4	; 196
     5b8:	e8 2e       	mov	r14, r24
     5ba:	82 e0       	ldi	r24, 0x02	; 2
  /*
   * Reading from OP Amp is inverted, so 1023-temp gives the actual reading
   */
  for (int a = 0; a < 9; a++) //Change a < 9 to a < 10 once array 9 is reinstalled
  {
    adc[a] = {1023 - temp[a]};
     5bc:	f8 2e       	mov	r15, r24
     5be:	d7 01       	movw	r26, r14
     5c0:	2f ef       	ldi	r18, 0xFF	; 255
     5c2:	33 e0       	ldi	r19, 0x03	; 3
     5c4:	81 91       	ld	r24, Z+
     5c6:	91 91       	ld	r25, Z+
     5c8:	a9 01       	movw	r20, r18
     5ca:	48 1b       	sub	r20, r24
  //UNUSED Currently uint16_t temp9 = analogRead(A5);

  /*
   * Reading from OP Amp is inverted, so 1023-temp gives the actual reading
   */
  for (int a = 0; a < 9; a++) //Change a < 9 to a < 10 once array 9 is reinstalled
     5cc:	59 0b       	sbc	r21, r25
     5ce:	4d 93       	st	X+, r20
     5d0:	5d 93       	st	X+, r21
     5d2:	52 e0       	ldi	r21, 0x02	; 2
    adc[a] = {1023 - temp[a]};
  }
  //UNUSED Currently uint16_t avg9 = 1023-temp9;

  //Print the ADC value of each array to the serial monitor
  Serial.print("\ntemp0: ");
     5d4:	e2 3c       	cpi	r30, 0xC2	; 194
     5d6:	f5 07       	cpc	r31, r21
     5d8:	a9 f7       	brne	.-22     	; 0x5c4 <loop+0x90>
     5da:	6e e3       	ldi	r22, 0x3E	; 62
     5dc:	72 e0       	ldi	r23, 0x02	; 2
  Serial.print(adc[0]);
     5de:	80 e1       	ldi	r24, 0x10	; 16
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	c2 d3       	rcall	.+1924   	; 0xd68 <_ZN5Print5printEPKc>
     5e4:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <adc>
     5e8:	70 91 c5 02 	lds	r23, 0x02C5	; 0x8002c5 <adc+0x1>
     5ec:	4a e0       	ldi	r20, 0x0A	; 10
     5ee:	50 e0       	ldi	r21, 0x00	; 0
  Serial.print("\ttemp1: ");
     5f0:	80 e1       	ldi	r24, 0x10	; 16
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	17 d4       	rcall	.+2094   	; 0xe24 <_ZN5Print5printEji>
     5f6:	67 e4       	ldi	r22, 0x47	; 71
     5f8:	72 e0       	ldi	r23, 0x02	; 2
  Serial.print(adc[1]);
     5fa:	80 e1       	ldi	r24, 0x10	; 16
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	b4 d3       	rcall	.+1896   	; 0xd68 <_ZN5Print5printEPKc>
     600:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <adc+0x2>
     604:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <adc+0x3>
     608:	4a e0       	ldi	r20, 0x0A	; 10
  Serial.print("\ttemp2: ");
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	80 e1       	ldi	r24, 0x10	; 16
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	09 d4       	rcall	.+2066   	; 0xe24 <_ZN5Print5printEji>
  Serial.print(adc[2]);
     612:	60 e5       	ldi	r22, 0x50	; 80
     614:	72 e0       	ldi	r23, 0x02	; 2
     616:	80 e1       	ldi	r24, 0x10	; 16
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	a6 d3       	rcall	.+1868   	; 0xd68 <_ZN5Print5printEPKc>
     61c:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <adc+0x4>
     620:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <adc+0x5>
  Serial.print("\ttemp3: ");
     624:	4a e0       	ldi	r20, 0x0A	; 10
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	80 e1       	ldi	r24, 0x10	; 16
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	fb d3       	rcall	.+2038   	; 0xe24 <_ZN5Print5printEji>
  Serial.print(adc[3]);
     62e:	69 e5       	ldi	r22, 0x59	; 89
     630:	72 e0       	ldi	r23, 0x02	; 2
     632:	80 e1       	ldi	r24, 0x10	; 16
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	98 d3       	rcall	.+1840   	; 0xd68 <_ZN5Print5printEPKc>
     638:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <adc+0x6>
     63c:	70 91 cb 02 	lds	r23, 0x02CB	; 0x8002cb <adc+0x7>
  Serial.print("\ttemp4: ");
     640:	4a e0       	ldi	r20, 0x0A	; 10
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	80 e1       	ldi	r24, 0x10	; 16
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	ed d3       	rcall	.+2010   	; 0xe24 <_ZN5Print5printEji>
  Serial.print(adc[4]);
     64a:	62 e6       	ldi	r22, 0x62	; 98
     64c:	72 e0       	ldi	r23, 0x02	; 2
     64e:	80 e1       	ldi	r24, 0x10	; 16
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	8a d3       	rcall	.+1812   	; 0xd68 <_ZN5Print5printEPKc>
     654:	60 91 cc 02 	lds	r22, 0x02CC	; 0x8002cc <adc+0x8>
     658:	70 91 cd 02 	lds	r23, 0x02CD	; 0x8002cd <adc+0x9>
  Serial.print("\ttemp5: ");
     65c:	4a e0       	ldi	r20, 0x0A	; 10
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	80 e1       	ldi	r24, 0x10	; 16
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	df d3       	rcall	.+1982   	; 0xe24 <_ZN5Print5printEji>
  Serial.print(adc[5]);
     666:	6b e6       	ldi	r22, 0x6B	; 107
     668:	72 e0       	ldi	r23, 0x02	; 2
     66a:	80 e1       	ldi	r24, 0x10	; 16
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	7c d3       	rcall	.+1784   	; 0xd68 <_ZN5Print5printEPKc>
     670:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <adc+0xa>
     674:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <adc+0xb>
  Serial.print("\ttemp6: ");
     678:	4a e0       	ldi	r20, 0x0A	; 10
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	80 e1       	ldi	r24, 0x10	; 16
     67e:	93 e0       	ldi	r25, 0x03	; 3
  Serial.print(adc[6]);
     680:	d1 d3       	rcall	.+1954   	; 0xe24 <_ZN5Print5printEji>
     682:	64 e7       	ldi	r22, 0x74	; 116
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	80 e1       	ldi	r24, 0x10	; 16
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	6e d3       	rcall	.+1756   	; 0xd68 <_ZN5Print5printEPKc>
     68c:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <adc+0xc>
  Serial.print("\ttemp7: ");
     690:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <adc+0xd>
     694:	4a e0       	ldi	r20, 0x0A	; 10
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	80 e1       	ldi	r24, 0x10	; 16
  Serial.print(adc[7]);
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	c3 d3       	rcall	.+1926   	; 0xe24 <_ZN5Print5printEji>
     69e:	6d e7       	ldi	r22, 0x7D	; 125
     6a0:	72 e0       	ldi	r23, 0x02	; 2
     6a2:	80 e1       	ldi	r24, 0x10	; 16
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	60 d3       	rcall	.+1728   	; 0xd68 <_ZN5Print5printEPKc>
     6a8:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <adc+0xe>
     6ac:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <adc+0xf>
  Serial.print("\ttemp8: ");
     6b0:	4a e0       	ldi	r20, 0x0A	; 10
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	93 e0       	ldi	r25, 0x03	; 3
     6b8:	b5 d3       	rcall	.+1898   	; 0xe24 <_ZN5Print5printEji>
  Serial.print(adc[8]);
     6ba:	66 e8       	ldi	r22, 0x86	; 134
     6bc:	72 e0       	ldi	r23, 0x02	; 2
     6be:	80 e1       	ldi	r24, 0x10	; 16
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	52 d3       	rcall	.+1700   	; 0xd68 <_ZN5Print5printEPKc>
     6c4:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <adc+0x10>
     6c8:	70 91 d5 02 	lds	r23, 0x02D5	; 0x8002d5 <adc+0x11>
     6cc:	4a e0       	ldi	r20, 0x0A	; 10
  // Serial.print(adc9);

  /*
   * If 5 deg F deltaT detected, (approx 9 ADC + initial Avg) output a TTL
   */
  if (adc[0] >= Avgtemps[0] + 9 || adc[1] >= Avgtemps[1] + 9 || adc[2] >= Avgtemps[2] + 9 || adc[3] >= Avgtemps[3] + 9 || adc[4] >= Avgtemps[4] + 9 ||
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	a7 d3       	rcall	.+1870   	; 0xe24 <_ZN5Print5printEji>
     6d6:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <adc>
     6da:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <adc+0x1>
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <Avgtemps>
     6e6:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <Avgtemps+0x1>
     6ea:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <Avgtemps+0x2>
     6ee:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <Avgtemps+0x3>
     6f2:	09 96       	adiw	r24, 0x09	; 9
     6f4:	a1 1d       	adc	r26, r1
     6f6:	b1 1d       	adc	r27, r1
     6f8:	48 17       	cp	r20, r24
     6fa:	59 07       	cpc	r21, r25
     6fc:	6a 07       	cpc	r22, r26
     6fe:	7b 07       	cpc	r23, r27
     700:	08 f0       	brcs	.+2      	; 0x704 <loop+0x1d0>
     702:	b5 c0       	rjmp	.+362    	; 0x86e <loop+0x33a>
     704:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <adc+0x2>
     708:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <adc+0x3>
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <Avgtemps+0x4>
     714:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <Avgtemps+0x5>
     718:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <Avgtemps+0x6>
     71c:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <Avgtemps+0x7>
     720:	09 96       	adiw	r24, 0x09	; 9
     722:	a1 1d       	adc	r26, r1
     724:	b1 1d       	adc	r27, r1
     726:	48 17       	cp	r20, r24
     728:	59 07       	cpc	r21, r25
     72a:	6a 07       	cpc	r22, r26
     72c:	7b 07       	cpc	r23, r27
     72e:	08 f0       	brcs	.+2      	; 0x732 <loop+0x1fe>
     730:	9e c0       	rjmp	.+316    	; 0x86e <loop+0x33a>
     732:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <adc+0x4>
     736:	50 91 c9 02 	lds	r21, 0x02C9	; 0x8002c9 <adc+0x5>
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <Avgtemps+0x8>
     742:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <Avgtemps+0x9>
     746:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <Avgtemps+0xa>
     74a:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <Avgtemps+0xb>
     74e:	09 96       	adiw	r24, 0x09	; 9
     750:	a1 1d       	adc	r26, r1
     752:	b1 1d       	adc	r27, r1
     754:	48 17       	cp	r20, r24
     756:	59 07       	cpc	r21, r25
     758:	6a 07       	cpc	r22, r26
     75a:	7b 07       	cpc	r23, r27
     75c:	08 f0       	brcs	.+2      	; 0x760 <loop+0x22c>
     75e:	87 c0       	rjmp	.+270    	; 0x86e <loop+0x33a>
     760:	40 91 ca 02 	lds	r20, 0x02CA	; 0x8002ca <adc+0x6>
     764:	50 91 cb 02 	lds	r21, 0x02CB	; 0x8002cb <adc+0x7>
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <Avgtemps+0xc>
     770:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <Avgtemps+0xd>
     774:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <Avgtemps+0xe>
     778:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <Avgtemps+0xf>
     77c:	09 96       	adiw	r24, 0x09	; 9
     77e:	a1 1d       	adc	r26, r1
     780:	b1 1d       	adc	r27, r1
     782:	48 17       	cp	r20, r24
     784:	59 07       	cpc	r21, r25
     786:	6a 07       	cpc	r22, r26
     788:	7b 07       	cpc	r23, r27
     78a:	08 f0       	brcs	.+2      	; 0x78e <loop+0x25a>
     78c:	70 c0       	rjmp	.+224    	; 0x86e <loop+0x33a>
     78e:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <adc+0x8>
     792:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <adc+0x9>
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <Avgtemps+0x10>
     79e:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <Avgtemps+0x11>
     7a2:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <Avgtemps+0x12>
     7a6:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <Avgtemps+0x13>
     7aa:	09 96       	adiw	r24, 0x09	; 9
     7ac:	a1 1d       	adc	r26, r1
     7ae:	b1 1d       	adc	r27, r1
     7b0:	48 17       	cp	r20, r24
     7b2:	59 07       	cpc	r21, r25
     7b4:	6a 07       	cpc	r22, r26
     7b6:	7b 07       	cpc	r23, r27
     7b8:	08 f0       	brcs	.+2      	; 0x7bc <loop+0x288>
     7ba:	59 c0       	rjmp	.+178    	; 0x86e <loop+0x33a>
     7bc:	40 91 ce 02 	lds	r20, 0x02CE	; 0x8002ce <adc+0xa>
     7c0:	50 91 cf 02 	lds	r21, 0x02CF	; 0x8002cf <adc+0xb>
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <Avgtemps+0x14>
     7cc:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <Avgtemps+0x15>
     7d0:	a0 91 ee 02 	lds	r26, 0x02EE	; 0x8002ee <Avgtemps+0x16>
     7d4:	b0 91 ef 02 	lds	r27, 0x02EF	; 0x8002ef <Avgtemps+0x17>
     7d8:	09 96       	adiw	r24, 0x09	; 9
     7da:	a1 1d       	adc	r26, r1
     7dc:	b1 1d       	adc	r27, r1
     7de:	48 17       	cp	r20, r24
     7e0:	59 07       	cpc	r21, r25
      adc[5] >= Avgtemps[5] + 9 || adc[6] >= Avgtemps[6] + 9 || adc[7] >= Avgtemps[7] + 9 || adc[8] >= Avgtemps[8] + 9 )
     7e2:	6a 07       	cpc	r22, r26
     7e4:	7b 07       	cpc	r23, r27
     7e6:	08 f0       	brcs	.+2      	; 0x7ea <loop+0x2b6>
     7e8:	42 c0       	rjmp	.+132    	; 0x86e <loop+0x33a>
     7ea:	40 91 d0 02 	lds	r20, 0x02D0	; 0x8002d0 <adc+0xc>
     7ee:	50 91 d1 02 	lds	r21, 0x02D1	; 0x8002d1 <adc+0xd>
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <Avgtemps+0x18>
     7fa:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <Avgtemps+0x19>
     7fe:	a0 91 f2 02 	lds	r26, 0x02F2	; 0x8002f2 <Avgtemps+0x1a>
     802:	b0 91 f3 02 	lds	r27, 0x02F3	; 0x8002f3 <Avgtemps+0x1b>
     806:	09 96       	adiw	r24, 0x09	; 9
     808:	a1 1d       	adc	r26, r1
     80a:	b1 1d       	adc	r27, r1
     80c:	48 17       	cp	r20, r24
     80e:	59 07       	cpc	r21, r25
     810:	6a 07       	cpc	r22, r26
     812:	7b 07       	cpc	r23, r27
     814:	60 f5       	brcc	.+88     	; 0x86e <loop+0x33a>
     816:	40 91 d2 02 	lds	r20, 0x02D2	; 0x8002d2 <adc+0xe>
     81a:	50 91 d3 02 	lds	r21, 0x02D3	; 0x8002d3 <adc+0xf>
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <Avgtemps+0x1c>
     826:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <Avgtemps+0x1d>
     82a:	a0 91 f6 02 	lds	r26, 0x02F6	; 0x8002f6 <Avgtemps+0x1e>
     82e:	b0 91 f7 02 	lds	r27, 0x02F7	; 0x8002f7 <Avgtemps+0x1f>
     832:	09 96       	adiw	r24, 0x09	; 9
     834:	a1 1d       	adc	r26, r1
     836:	b1 1d       	adc	r27, r1
     838:	48 17       	cp	r20, r24
     83a:	59 07       	cpc	r21, r25
     83c:	6a 07       	cpc	r22, r26
     83e:	7b 07       	cpc	r23, r27
     840:	b0 f4       	brcc	.+44     	; 0x86e <loop+0x33a>
     842:	40 91 d4 02 	lds	r20, 0x02D4	; 0x8002d4 <adc+0x10>
     846:	50 91 d5 02 	lds	r21, 0x02D5	; 0x8002d5 <adc+0x11>
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <Avgtemps+0x20>
     852:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <Avgtemps+0x21>
     856:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <Avgtemps+0x22>
     85a:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <Avgtemps+0x23>
     85e:	09 96       	adiw	r24, 0x09	; 9
     860:	a1 1d       	adc	r26, r1
  {
    digitalWrite(5, HIGH);
     862:	b1 1d       	adc	r27, r1
     864:	48 17       	cp	r20, r24
  }
  else
  {
    digitalWrite(5, LOW);
     866:	59 07       	cpc	r21, r25
     868:	6a 07       	cpc	r22, r26
     86a:	7b 07       	cpc	r23, r27
  temp[3] = {analogRead(A1)};
  temp[4] = {analogRead(A0)};
  temp[5] = {analogRead(A9)};
  temp[6] = {analogRead(A8)};
  temp[7] = {analogRead(A7)};
  temp[8] = {analogRead(A6)};
     86c:	10 f0       	brcs	.+4      	; 0x872 <loop+0x33e>
     86e:	61 e0       	ldi	r22, 0x01	; 1
   * Send the colormap function the specific avg, and the r,g,b variables addressed
   */
  int adv = 1; //Variable used to start the LED position at 1
  for (int m = 0; m < 9; m++) //Will change to 10 if array was added back
  {
    colormap(adc[m], &r, &g, &b);
     870:	01 c0       	rjmp	.+2      	; 0x874 <loop+0x340>
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	98 d4       	rcall	.+2352   	; 0x11a8 <digitalWrite>
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	9e 01       	movw	r18, r28
     87e:	2f 5f       	subi	r18, 0xFF	; 255
     880:	3f 4f       	sbci	r19, 0xFF	; 255
     882:	ae 01       	movw	r20, r28
     884:	4e 5f       	subi	r20, 0xFE	; 254
     886:	5f 4f       	sbci	r21, 0xFF	; 255
     888:	be 01       	movw	r22, r28
     88a:	6d 5f       	subi	r22, 0xFD	; 253
    setLedPortion(&r, &g, &b, m + adv);
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	f7 01       	movw	r30, r14
     890:	81 91       	ld	r24, Z+
     892:	91 91       	ld	r25, Z+
     894:	7f 01       	movw	r14, r30
     896:	f1 dd       	rcall	.-1054   	; 0x47a <_Z8colormapjPhS_S_>
     898:	0f 5f       	subi	r16, 0xFF	; 255
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	98 01       	movw	r18, r16
     89e:	ae 01       	movw	r20, r28
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	be 01       	movw	r22, r28
  //Color Mapping
  /*
   * Send the colormap function the specific avg, and the r,g,b variables addressed
   */
  int adv = 1; //Variable used to start the LED position at 1
  for (int m = 0; m < 9; m++) //Will change to 10 if array was added back
     8a6:	6e 5f       	subi	r22, 0xFE	; 254
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
  {
    colormap(adc[m], &r, &g, &b);
    setLedPortion(&r, &g, &b, m + adv);
  }
  strip.show();
     8ac:	03 96       	adiw	r24, 0x03	; 3
     8ae:	b1 dd       	rcall	.-1182   	; 0x412 <_Z13setLedPortionPhS_S_i>
     8b0:	09 30       	cpi	r16, 0x09	; 9
     8b2:	11 05       	cpc	r17, r1
}
     8b4:	19 f7       	brne	.-58     	; 0x87c <loop+0x348>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	7a d5       	rcall	.+2804   	; 0x13b0 <_ZN16Adafruit_DotStar4showEv>
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	08 95       	ret

000008d0 <_GLOBAL__sub_I_strip>:
void colormap(uint16_t i, uint8_t *r, uint8_t *g, uint8_t *b);

#define NUMPIXELS 144 // Number of LEDs in strip

//Using LEDS with SPI, Pins 51,52 are used (MOSI, SCLK)
Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS, DOTSTAR_RGB);
     8d0:	44 e2       	ldi	r20, 0x24	; 36
     8d2:	60 e9       	ldi	r22, 0x90	; 144
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	57 c6       	rjmp	.+3246   	; 0x158a <_ZN16Adafruit_DotStarC1Ejh>

000008dc <_GLOBAL__sub_D_strip>:
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	36 c5       	rjmp	.+2668   	; 0x134e <_ZN16Adafruit_DotStarD1Ev>

000008e2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     8e2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     8e4:	91 8d       	ldd	r25, Z+25	; 0x19
     8e6:	22 8d       	ldd	r18, Z+26	; 0x1a
     8e8:	89 2f       	mov	r24, r25
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	80 5c       	subi	r24, 0xC0	; 192
     8ee:	9f 4f       	sbci	r25, 0xFF	; 255
     8f0:	82 1b       	sub	r24, r18
     8f2:	91 09       	sbc	r25, r1
}
     8f4:	8f 73       	andi	r24, 0x3F	; 63
     8f6:	99 27       	eor	r25, r25
     8f8:	08 95       	ret

000008fa <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     8fa:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     8fc:	91 8d       	ldd	r25, Z+25	; 0x19
     8fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     900:	98 17       	cp	r25, r24
     902:	31 f0       	breq	.+12     	; 0x910 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     904:	82 8d       	ldd	r24, Z+26	; 0x1a
     906:	e8 0f       	add	r30, r24
     908:	f1 1d       	adc	r31, r1
     90a:	85 8d       	ldd	r24, Z+29	; 0x1d
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     914:	08 95       	ret

00000916 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     916:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     918:	91 8d       	ldd	r25, Z+25	; 0x19
     91a:	82 8d       	ldd	r24, Z+26	; 0x1a
     91c:	98 17       	cp	r25, r24
     91e:	61 f0       	breq	.+24     	; 0x938 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     920:	82 8d       	ldd	r24, Z+26	; 0x1a
     922:	df 01       	movw	r26, r30
     924:	a8 0f       	add	r26, r24
     926:	b1 1d       	adc	r27, r1
     928:	5d 96       	adiw	r26, 0x1d	; 29
     92a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     92c:	92 8d       	ldd	r25, Z+26	; 0x1a
     92e:	9f 5f       	subi	r25, 0xFF	; 255
     930:	9f 73       	andi	r25, 0x3F	; 63
     932:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     93c:	08 95       	ret

0000093e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     93e:	fc 01       	movw	r30, r24
     940:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     942:	44 8d       	ldd	r20, Z+28	; 0x1c
     944:	25 2f       	mov	r18, r21
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	84 2f       	mov	r24, r20
     94a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     94c:	82 1b       	sub	r24, r18
     94e:	93 0b       	sbc	r25, r19
     950:	54 17       	cp	r21, r20
     952:	10 f0       	brcs	.+4      	; 0x958 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     954:	cf 96       	adiw	r24, 0x3f	; 63
     956:	08 95       	ret
  return tail - head - 1;
     958:	01 97       	sbiw	r24, 0x01	; 1
}
     95a:	08 95       	ret

0000095c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     95c:	84 e3       	ldi	r24, 0x34	; 52
     95e:	96 e0       	ldi	r25, 0x06	; 6
     960:	89 2b       	or	r24, r25
     962:	39 f0       	breq	.+14     	; 0x972 <_Z14serialEventRunv+0x16>
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	89 2b       	or	r24, r25
     96a:	19 f0       	breq	.+6      	; 0x972 <_Z14serialEventRunv+0x16>
     96c:	7d d1       	rcall	.+762    	; 0xc68 <_Z17Serial0_availablev>
     96e:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     970:	25 c0       	rjmp	.+74     	; 0x9bc <_Z14serialEventRunv+0x60>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	89 2b       	or	r24, r25
     978:	41 f0       	breq	.+16     	; 0x98a <_Z14serialEventRunv+0x2e>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	89 2b       	or	r24, r25
     980:	21 f0       	breq	.+8      	; 0x98a <_Z14serialEventRunv+0x2e>
     982:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     986:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     988:	1c c0       	rjmp	.+56     	; 0x9c2 <_Z14serialEventRunv+0x66>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	89 2b       	or	r24, r25
     990:	41 f0       	breq	.+16     	; 0x9a2 <_Z14serialEventRunv+0x46>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	89 2b       	or	r24, r25
     998:	21 f0       	breq	.+8      	; 0x9a2 <_Z14serialEventRunv+0x46>
     99a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     99e:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     9a0:	13 c0       	rjmp	.+38     	; 0x9c8 <_Z14serialEventRunv+0x6c>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	89 2b       	or	r24, r25
     9a8:	a1 f0       	breq	.+40     	; 0x9d2 <_Z14serialEventRunv+0x76>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	89 2b       	or	r24, r25
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <_Z14serialEventRunv+0x76>
     9b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     9b6:	81 11       	cpse	r24, r1
     9b8:	0a c0       	rjmp	.+20     	; 0x9ce <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     9ba:	08 95       	ret
     9bc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     9c0:	d8 cf       	rjmp	.-80     	; 0x972 <_Z14serialEventRunv+0x16>
     9c2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     9c6:	e1 cf       	rjmp	.-62     	; 0x98a <_Z14serialEventRunv+0x2e>
     9c8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     9cc:	ea cf       	rjmp	.-44     	; 0x9a2 <_Z14serialEventRunv+0x46>
     9ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     9d2:	08 95       	ret

000009d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     9d4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     9d6:	84 8d       	ldd	r24, Z+28	; 0x1c
     9d8:	df 01       	movw	r26, r30
     9da:	a8 0f       	add	r26, r24
     9dc:	b1 1d       	adc	r27, r1
     9de:	a3 5a       	subi	r26, 0xA3	; 163
     9e0:	bf 4f       	sbci	r27, 0xFF	; 255
     9e2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     9e4:	84 8d       	ldd	r24, Z+28	; 0x1c
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	8f 73       	andi	r24, 0x3F	; 63
     9ec:	99 27       	eor	r25, r25
     9ee:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     9f0:	a6 89       	ldd	r26, Z+22	; 0x16
     9f2:	b7 89       	ldd	r27, Z+23	; 0x17
     9f4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     9f6:	a0 89       	ldd	r26, Z+16	; 0x10
     9f8:	b1 89       	ldd	r27, Z+17	; 0x11
     9fa:	8c 91       	ld	r24, X
     9fc:	80 64       	ori	r24, 0x40	; 64
     9fe:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     a00:	93 8d       	ldd	r25, Z+27	; 0x1b
     a02:	84 8d       	ldd	r24, Z+28	; 0x1c
     a04:	98 13       	cpse	r25, r24
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     a08:	02 88       	ldd	r0, Z+18	; 0x12
     a0a:	f3 89       	ldd	r31, Z+19	; 0x13
     a0c:	e0 2d       	mov	r30, r0
     a0e:	80 81       	ld	r24, Z
     a10:	8f 7d       	andi	r24, 0xDF	; 223
     a12:	80 83       	st	Z, r24
     a14:	08 95       	ret

00000a16 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ec 01       	movw	r28, r24
  _written = true;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     a28:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a2c:	98 13       	cpse	r25, r24
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <_ZN14HardwareSerial5writeEh+0x24>
     a30:	e8 89       	ldd	r30, Y+16	; 0x10
     a32:	f9 89       	ldd	r31, Y+17	; 0x11
     a34:	80 81       	ld	r24, Z
     a36:	85 fd       	sbrc	r24, 5
     a38:	23 c0       	rjmp	.+70     	; 0xa80 <_ZN14HardwareSerial5writeEh+0x6a>
     a3a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a3c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     a3e:	10 e0       	ldi	r17, 0x00	; 0
     a40:	0f 5f       	subi	r16, 0xFF	; 255
     a42:	1f 4f       	sbci	r17, 0xFF	; 255
     a44:	0f 73       	andi	r16, 0x3F	; 63
     a46:	11 27       	eor	r17, r17
     a48:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a4c:	e8 12       	cpse	r14, r24
     a4e:	0b c0       	rjmp	.+22     	; 0xa66 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	07 fc       	sbrc	r0, 7
     a54:	fa cf       	rjmp	.-12     	; 0xa4a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a56:	e8 89       	ldd	r30, Y+16	; 0x10
     a58:	f9 89       	ldd	r31, Y+17	; 0x11
     a5a:	80 81       	ld	r24, Z
     a5c:	85 ff       	sbrs	r24, 5
     a5e:	f5 cf       	rjmp	.-22     	; 0xa4a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a60:	ce 01       	movw	r24, r28
     a62:	b8 df       	rcall	.-144    	; 0x9d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a64:	f2 cf       	rjmp	.-28     	; 0xa4a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a68:	fe 01       	movw	r30, r28
     a6a:	e8 0f       	add	r30, r24
     a6c:	f1 1d       	adc	r31, r1
     a6e:	e3 5a       	subi	r30, 0xA3	; 163
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     a74:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     a76:	ea 89       	ldd	r30, Y+18	; 0x12
     a78:	fb 89       	ldd	r31, Y+19	; 0x13
     a7a:	80 81       	ld	r24, Z
     a7c:	80 62       	ori	r24, 0x20	; 32
     a7e:	07 c0       	rjmp	.+14     	; 0xa8e <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     a80:	ee 89       	ldd	r30, Y+22	; 0x16
     a82:	ff 89       	ldd	r31, Y+23	; 0x17
     a84:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     a86:	e8 89       	ldd	r30, Y+16	; 0x10
     a88:	f9 89       	ldd	r31, Y+17	; 0x11
     a8a:	80 81       	ld	r24, Z
     a8c:	80 64       	ori	r24, 0x40	; 64
     a8e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	08 95       	ret

00000aa2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     aa8:	88 8d       	ldd	r24, Y+24	; 0x18
     aaa:	88 23       	and	r24, r24
     aac:	c1 f0       	breq	.+48     	; 0xade <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     aae:	ea 89       	ldd	r30, Y+18	; 0x12
     ab0:	fb 89       	ldd	r31, Y+19	; 0x13
     ab2:	80 81       	ld	r24, Z
     ab4:	85 fd       	sbrc	r24, 5
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <_ZN14HardwareSerial5flushEv+0x20>
     ab8:	a8 89       	ldd	r26, Y+16	; 0x10
     aba:	b9 89       	ldd	r27, Y+17	; 0x11
     abc:	8c 91       	ld	r24, X
     abe:	86 fd       	sbrc	r24, 6
     ac0:	0e c0       	rjmp	.+28     	; 0xade <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	07 fc       	sbrc	r0, 7
     ac6:	f5 cf       	rjmp	.-22     	; 0xab2 <_ZN14HardwareSerial5flushEv+0x10>
     ac8:	80 81       	ld	r24, Z
     aca:	85 ff       	sbrs	r24, 5
     acc:	f2 cf       	rjmp	.-28     	; 0xab2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     ace:	a8 89       	ldd	r26, Y+16	; 0x10
     ad0:	b9 89       	ldd	r27, Y+17	; 0x11
     ad2:	8c 91       	ld	r24, X
     ad4:	85 ff       	sbrs	r24, 5
     ad6:	ed cf       	rjmp	.-38     	; 0xab2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ad8:	ce 01       	movw	r24, r28
     ada:	7c df       	rcall	.-264    	; 0x9d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     adc:	e8 cf       	rjmp	.-48     	; 0xaae <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ec 01       	movw	r28, r24
     af4:	6a 01       	movw	r12, r20
     af6:	7b 01       	movw	r14, r22
     af8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     afa:	e8 89       	ldd	r30, Y+16	; 0x10
     afc:	f9 89       	ldd	r31, Y+17	; 0x11
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b02:	41 15       	cp	r20, r1
     b04:	51 4e       	sbci	r21, 0xE1	; 225
     b06:	61 05       	cpc	r22, r1
     b08:	71 05       	cpc	r23, r1
     b0a:	a9 f0       	breq	.+42     	; 0xb36 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	79 e0       	ldi	r23, 0x09	; 9
     b10:	8d e3       	ldi	r24, 0x3D	; 61
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	a7 01       	movw	r20, r14
     b16:	96 01       	movw	r18, r12
     b18:	ca d5       	rcall	.+2964   	; 0x16ae <__udivmodsi4>
     b1a:	da 01       	movw	r26, r20
     b1c:	c9 01       	movw	r24, r18
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	a1 09       	sbc	r26, r1
     b22:	b1 09       	sbc	r27, r1
     b24:	b6 95       	lsr	r27
     b26:	a7 95       	ror	r26
     b28:	97 95       	ror	r25
     b2a:	87 95       	ror	r24
     b2c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b2e:	21 15       	cp	r18, r1
     b30:	80 e1       	ldi	r24, 0x10	; 16
     b32:	38 07       	cpc	r19, r24
     b34:	a0 f0       	brcs	.+40     	; 0xb5e <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     b36:	e8 89       	ldd	r30, Y+16	; 0x10
     b38:	f9 89       	ldd	r31, Y+17	; 0x11
     b3a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b3c:	60 e8       	ldi	r22, 0x80	; 128
     b3e:	74 e8       	ldi	r23, 0x84	; 132
     b40:	8e e1       	ldi	r24, 0x1E	; 30
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	a7 01       	movw	r20, r14
     b46:	96 01       	movw	r18, r12
     b48:	b2 d5       	rcall	.+2916   	; 0x16ae <__udivmodsi4>
     b4a:	da 01       	movw	r26, r20
     b4c:	c9 01       	movw	r24, r18
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	a1 09       	sbc	r26, r1
     b52:	b1 09       	sbc	r27, r1
     b54:	b6 95       	lsr	r27
     b56:	a7 95       	ror	r26
     b58:	97 95       	ror	r25
     b5a:	87 95       	ror	r24
     b5c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b5e:	ec 85       	ldd	r30, Y+12	; 0x0c
     b60:	fd 85       	ldd	r31, Y+13	; 0x0d
     b62:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b64:	ee 85       	ldd	r30, Y+14	; 0x0e
     b66:	ff 85       	ldd	r31, Y+15	; 0x0f
     b68:	20 83       	st	Z, r18

  _written = false;
     b6a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b6c:	ec 89       	ldd	r30, Y+20	; 0x14
     b6e:	fd 89       	ldd	r31, Y+21	; 0x15
     b70:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b72:	ea 89       	ldd	r30, Y+18	; 0x12
     b74:	fb 89       	ldd	r31, Y+19	; 0x13
     b76:	80 81       	ld	r24, Z
     b78:	80 61       	ori	r24, 0x10	; 16
     b7a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b7c:	ea 89       	ldd	r30, Y+18	; 0x12
     b7e:	fb 89       	ldd	r31, Y+19	; 0x13
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b86:	ea 89       	ldd	r30, Y+18	; 0x12
     b88:	fb 89       	ldd	r31, Y+19	; 0x13
     b8a:	80 81       	ld	r24, Z
     b8c:	80 68       	ori	r24, 0x80	; 128
     b8e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b90:	ea 89       	ldd	r30, Y+18	; 0x12
     b92:	fb 89       	ldd	r31, Y+19	; 0x13
     b94:	80 81       	ld	r24, Z
     b96:	8f 7d       	andi	r24, 0xDF	; 223
     b98:	80 83       	st	Z, r24
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	08 95       	ret

00000baa <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	2f 93       	push	r18
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     bc2:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <Serial+0x10>
     bc6:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <Serial+0x11>
     bca:	80 81       	ld	r24, Z
     bcc:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <Serial+0x16>
     bd0:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <Serial+0x17>
     bd4:	82 fd       	sbrc	r24, 2
     bd6:	12 c0       	rjmp	.+36     	; 0xbfc <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     bd8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     bda:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <Serial+0x19>
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     be2:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <Serial+0x1a>
     be6:	82 17       	cp	r24, r18
     be8:	51 f0       	breq	.+20     	; 0xbfe <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     bea:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <Serial+0x19>
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	e0 5f       	subi	r30, 0xF0	; 240
     bf2:	fc 4f       	sbci	r31, 0xFC	; 252
     bf4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     bf6:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <Serial+0x19>
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bfc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	9f 91       	pop	r25
     c04:	8f 91       	pop	r24
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0b be       	out	0x3b, r0	; 59
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     c16:	1f 92       	push	r1
     c18:	0f 92       	push	r0
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	0f 92       	push	r0
     c1e:	11 24       	eor	r1, r1
     c20:	0b b6       	in	r0, 0x3b	; 59
     c22:	0f 92       	push	r0
     c24:	2f 93       	push	r18
     c26:	3f 93       	push	r19
     c28:	4f 93       	push	r20
     c2a:	5f 93       	push	r21
     c2c:	6f 93       	push	r22
     c2e:	7f 93       	push	r23
     c30:	8f 93       	push	r24
     c32:	9f 93       	push	r25
     c34:	af 93       	push	r26
     c36:	bf 93       	push	r27
     c38:	ef 93       	push	r30
     c3a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c3c:	80 e1       	ldi	r24, 0x10	; 16
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	c9 de       	rcall	.-622    	; 0x9d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0b be       	out	0x3b, r0	; 59
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	0f 90       	pop	r0
     c64:	1f 90       	pop	r1
     c66:	18 95       	reti

00000c68 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c68:	80 e1       	ldi	r24, 0x10	; 16
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	3a de       	rcall	.-908    	; 0x8e2 <_ZN14HardwareSerial9availableEv>
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	89 2b       	or	r24, r25
     c72:	09 f4       	brne	.+2      	; 0xc76 <_Z17Serial0_availablev+0xe>
     c74:	20 e0       	ldi	r18, 0x00	; 0
}
     c76:	82 2f       	mov	r24, r18
     c78:	08 95       	ret

00000c7a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c7a:	e0 e1       	ldi	r30, 0x10	; 16
     c7c:	f3 e0       	ldi	r31, 0x03	; 3
     c7e:	13 82       	std	Z+3, r1	; 0x03
     c80:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c82:	88 ee       	ldi	r24, 0xE8	; 232
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	84 83       	std	Z+4, r24	; 0x04
     c8c:	95 83       	std	Z+5, r25	; 0x05
     c8e:	a6 83       	std	Z+6, r26	; 0x06
     c90:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c92:	83 e9       	ldi	r24, 0x93	; 147
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	85 ec       	ldi	r24, 0xC5	; 197
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	95 87       	std	Z+13, r25	; 0x0d
     ca0:	84 87       	std	Z+12, r24	; 0x0c
     ca2:	84 ec       	ldi	r24, 0xC4	; 196
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	97 87       	std	Z+15, r25	; 0x0f
     ca8:	86 87       	std	Z+14, r24	; 0x0e
     caa:	80 ec       	ldi	r24, 0xC0	; 192
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	91 8b       	std	Z+17, r25	; 0x11
     cb0:	80 8b       	std	Z+16, r24	; 0x10
     cb2:	81 ec       	ldi	r24, 0xC1	; 193
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	93 8b       	std	Z+19, r25	; 0x13
     cb8:	82 8b       	std	Z+18, r24	; 0x12
     cba:	82 ec       	ldi	r24, 0xC2	; 194
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	95 8b       	std	Z+21, r25	; 0x15
     cc0:	84 8b       	std	Z+20, r24	; 0x14
     cc2:	86 ec       	ldi	r24, 0xC6	; 198
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	97 8b       	std	Z+23, r25	; 0x17
     cc8:	86 8b       	std	Z+22, r24	; 0x16
     cca:	11 8e       	std	Z+25, r1	; 0x19
     ccc:	12 8e       	std	Z+26, r1	; 0x1a
     cce:	13 8e       	std	Z+27, r1	; 0x1b
     cd0:	14 8e       	std	Z+28, r1	; 0x1c
     cd2:	08 95       	ret

00000cd4 <initVariant>:
     cd4:	08 95       	ret

00000cd6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     cd6:	50 d1       	rcall	.+672    	; 0xf78 <init>
     cd8:	fd df       	rcall	.-6      	; 0xcd4 <initVariant>
     cda:	cd da       	rcall	.-2662   	; 0x276 <setup>
     cdc:	ce ea       	ldi	r28, 0xAE	; 174
     cde:	d4 e0       	ldi	r29, 0x04	; 4
     ce0:	29 dc       	rcall	.-1966   	; 0x534 <loop>
     ce2:	20 97       	sbiw	r28, 0x00	; 0
     ce4:	e9 f3       	breq	.-6      	; 0xce0 <main+0xa>
     ce6:	3a de       	rcall	.-908    	; 0x95c <_Z14serialEventRunv>
     ce8:	fb cf       	rjmp	.-10     	; 0xce0 <main+0xa>

00000cea <_ZN5Print5writeEPKhj>:
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	6c 01       	movw	r12, r24
     cfc:	7a 01       	movw	r14, r20
     cfe:	8b 01       	movw	r16, r22
     d00:	c0 e0       	ldi	r28, 0x00	; 0
     d02:	d0 e0       	ldi	r29, 0x00	; 0
     d04:	ce 15       	cp	r28, r14
     d06:	df 05       	cpc	r29, r15
     d08:	81 f0       	breq	.+32     	; 0xd2a <_ZN5Print5writeEPKhj+0x40>
     d0a:	d8 01       	movw	r26, r16
     d0c:	6d 91       	ld	r22, X+
     d0e:	8d 01       	movw	r16, r26
     d10:	d6 01       	movw	r26, r12
     d12:	ed 91       	ld	r30, X+
     d14:	fc 91       	ld	r31, X
     d16:	01 90       	ld	r0, Z+
     d18:	f0 81       	ld	r31, Z
     d1a:	e0 2d       	mov	r30, r0
     d1c:	c6 01       	movw	r24, r12
     d1e:	19 95       	eicall
     d20:	89 2b       	or	r24, r25
     d22:	11 f0       	breq	.+4      	; 0xd28 <_ZN5Print5writeEPKhj+0x3e>
     d24:	21 96       	adiw	r28, 0x01	; 1
     d26:	ee cf       	rjmp	.-36     	; 0xd04 <_ZN5Print5writeEPKhj+0x1a>
     d28:	7e 01       	movw	r14, r28
     d2a:	c7 01       	movw	r24, r14
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	08 95       	ret

00000d3e <_ZN5Print5writeEPKc>:
     d3e:	61 15       	cp	r22, r1
     d40:	71 05       	cpc	r23, r1
     d42:	79 f0       	breq	.+30     	; 0xd62 <_ZN5Print5writeEPKc+0x24>
     d44:	fb 01       	movw	r30, r22
     d46:	01 90       	ld	r0, Z+
     d48:	00 20       	and	r0, r0
     d4a:	e9 f7       	brne	.-6      	; 0xd46 <_ZN5Print5writeEPKc+0x8>
     d4c:	31 97       	sbiw	r30, 0x01	; 1
     d4e:	af 01       	movw	r20, r30
     d50:	46 1b       	sub	r20, r22
     d52:	57 0b       	sbc	r21, r23
     d54:	dc 01       	movw	r26, r24
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	02 80       	ldd	r0, Z+2	; 0x02
     d5c:	f3 81       	ldd	r31, Z+3	; 0x03
     d5e:	e0 2d       	mov	r30, r0
     d60:	19 94       	eijmp
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	08 95       	ret

00000d68 <_ZN5Print5printEPKc>:
     d68:	ea cf       	rjmp	.-44     	; 0xd3e <_ZN5Print5writeEPKc>

00000d6a <_ZN5Print5printEc>:
     d6a:	dc 01       	movw	r26, r24
     d6c:	ed 91       	ld	r30, X+
     d6e:	fc 91       	ld	r31, X
     d70:	01 90       	ld	r0, Z+
     d72:	f0 81       	ld	r31, Z
     d74:	e0 2d       	mov	r30, r0
     d76:	19 94       	eijmp

00000d78 <_ZN5Print7printlnEv>:
     d78:	61 ea       	ldi	r22, 0xA1	; 161
     d7a:	72 e0       	ldi	r23, 0x02	; 2
     d7c:	e0 cf       	rjmp	.-64     	; 0xd3e <_ZN5Print5writeEPKc>

00000d7e <_ZN5Print11printNumberEmh>:
     d7e:	8f 92       	push	r8
     d80:	9f 92       	push	r9
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	a1 97       	sbiw	r28, 0x21	; 33
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	7c 01       	movw	r14, r24
     da4:	fa 01       	movw	r30, r20
     da6:	cb 01       	movw	r24, r22
     da8:	19 a2       	std	Y+33, r1	; 0x21
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	08 f4       	brcc	.+2      	; 0xdb0 <_ZN5Print11printNumberEmh+0x32>
     dae:	2a e0       	ldi	r18, 0x0A	; 10
     db0:	8e 01       	movw	r16, r28
     db2:	0f 5d       	subi	r16, 0xDF	; 223
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	82 2e       	mov	r8, r18
     db8:	91 2c       	mov	r9, r1
     dba:	a1 2c       	mov	r10, r1
     dbc:	b1 2c       	mov	r11, r1
     dbe:	bf 01       	movw	r22, r30
     dc0:	a5 01       	movw	r20, r10
     dc2:	94 01       	movw	r18, r8
     dc4:	74 d4       	rcall	.+2280   	; 0x16ae <__udivmodsi4>
     dc6:	f9 01       	movw	r30, r18
     dc8:	ca 01       	movw	r24, r20
     dca:	01 50       	subi	r16, 0x01	; 1
     dcc:	11 09       	sbc	r17, r1
     dce:	6a 30       	cpi	r22, 0x0A	; 10
     dd0:	10 f4       	brcc	.+4      	; 0xdd6 <_ZN5Print11printNumberEmh+0x58>
     dd2:	60 5d       	subi	r22, 0xD0	; 208
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <_ZN5Print11printNumberEmh+0x5a>
     dd6:	69 5c       	subi	r22, 0xC9	; 201
     dd8:	d8 01       	movw	r26, r16
     dda:	6c 93       	st	X, r22
     ddc:	23 2b       	or	r18, r19
     dde:	24 2b       	or	r18, r20
     de0:	25 2b       	or	r18, r21
     de2:	69 f7       	brne	.-38     	; 0xdbe <_ZN5Print11printNumberEmh+0x40>
     de4:	b8 01       	movw	r22, r16
     de6:	c7 01       	movw	r24, r14
     de8:	aa df       	rcall	.-172    	; 0xd3e <_ZN5Print5writeEPKc>
     dea:	a1 96       	adiw	r28, 0x21	; 33
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	08 95       	ret

00000e0c <_ZN5Print5printEmi>:
     e0c:	21 15       	cp	r18, r1
     e0e:	31 05       	cpc	r19, r1
     e10:	41 f4       	brne	.+16     	; 0xe22 <_ZN5Print5printEmi+0x16>
     e12:	dc 01       	movw	r26, r24
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	01 90       	ld	r0, Z+
     e1a:	f0 81       	ld	r31, Z
     e1c:	e0 2d       	mov	r30, r0
     e1e:	64 2f       	mov	r22, r20
     e20:	19 94       	eijmp
     e22:	ad cf       	rjmp	.-166    	; 0xd7e <_ZN5Print11printNumberEmh>

00000e24 <_ZN5Print5printEji>:
     e24:	9a 01       	movw	r18, r20
     e26:	ab 01       	movw	r20, r22
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	ef cf       	rjmp	.-34     	; 0xe0c <_ZN5Print5printEmi>

00000e2e <_ZN5Print7printlnEmi>:
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ec 01       	movw	r28, r24
     e38:	e9 df       	rcall	.-46     	; 0xe0c <_ZN5Print5printEmi>
     e3a:	8c 01       	movw	r16, r24
     e3c:	ce 01       	movw	r24, r28
     e3e:	9c df       	rcall	.-200    	; 0xd78 <_ZN5Print7printlnEv>
     e40:	80 0f       	add	r24, r16
     e42:	91 1f       	adc	r25, r17
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <_ZN5Print5printEli>:
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	21 15       	cp	r18, r1
     e60:	31 05       	cpc	r19, r1
     e62:	81 f4       	brne	.+32     	; 0xe84 <_ZN5Print5printEli+0x36>
     e64:	dc 01       	movw	r26, r24
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	01 90       	ld	r0, Z+
     e6c:	f0 81       	ld	r31, Z
     e6e:	e0 2d       	mov	r30, r0
     e70:	64 2f       	mov	r22, r20
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	19 94       	eijmp
     e84:	2a 30       	cpi	r18, 0x0A	; 10
     e86:	31 05       	cpc	r19, r1
     e88:	f1 f4       	brne	.+60     	; 0xec6 <_ZN5Print5printEli+0x78>
     e8a:	77 ff       	sbrs	r23, 7
     e8c:	1b c0       	rjmp	.+54     	; 0xec4 <_ZN5Print5printEli+0x76>
     e8e:	6a 01       	movw	r12, r20
     e90:	7b 01       	movw	r14, r22
     e92:	ec 01       	movw	r28, r24
     e94:	6d e2       	ldi	r22, 0x2D	; 45
     e96:	69 df       	rcall	.-302    	; 0xd6a <_ZN5Print5printEc>
     e98:	8c 01       	movw	r16, r24
     e9a:	44 27       	eor	r20, r20
     e9c:	55 27       	eor	r21, r21
     e9e:	ba 01       	movw	r22, r20
     ea0:	4c 19       	sub	r20, r12
     ea2:	5d 09       	sbc	r21, r13
     ea4:	6e 09       	sbc	r22, r14
     ea6:	7f 09       	sbc	r23, r15
     ea8:	2a e0       	ldi	r18, 0x0A	; 10
     eaa:	ce 01       	movw	r24, r28
     eac:	68 df       	rcall	.-304    	; 0xd7e <_ZN5Print11printNumberEmh>
     eae:	80 0f       	add	r24, r16
     eb0:	91 1f       	adc	r25, r17
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	08 95       	ret
     ec4:	2a e0       	ldi	r18, 0x0A	; 10
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	53 cf       	rjmp	.-346    	; 0xd7e <_ZN5Print11printNumberEmh>

00000ed8 <_ZN5Print5printEii>:
     ed8:	9a 01       	movw	r18, r20
     eda:	ab 01       	movw	r20, r22
     edc:	77 0f       	add	r23, r23
     ede:	66 0b       	sbc	r22, r22
     ee0:	77 0b       	sbc	r23, r23
     ee2:	b5 cf       	rjmp	.-150    	; 0xe4e <_ZN5Print5printEli>

00000ee4 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	2f 93       	push	r18
     ef0:	3f 93       	push	r19
     ef2:	8f 93       	push	r24
     ef4:	9f 93       	push	r25
     ef6:	af 93       	push	r26
     ef8:	bf 93       	push	r27
     efa:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <timer0_millis>
     efe:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <timer0_millis+0x1>
     f02:	a0 91 b0 03 	lds	r26, 0x03B0	; 0x8003b0 <timer0_millis+0x2>
     f06:	b0 91 b1 03 	lds	r27, 0x03B1	; 0x8003b1 <timer0_millis+0x3>
     f0a:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <timer0_fract>
     f0e:	23 e0       	ldi	r18, 0x03	; 3
     f10:	23 0f       	add	r18, r19
     f12:	2d 37       	cpi	r18, 0x7D	; 125
     f14:	20 f4       	brcc	.+8      	; 0xf1e <__vector_23+0x3a>
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	a1 1d       	adc	r26, r1
     f1a:	b1 1d       	adc	r27, r1
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <__vector_23+0x44>
     f1e:	26 e8       	ldi	r18, 0x86	; 134
     f20:	23 0f       	add	r18, r19
     f22:	02 96       	adiw	r24, 0x02	; 2
     f24:	a1 1d       	adc	r26, r1
     f26:	b1 1d       	adc	r27, r1
     f28:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <timer0_fract>
     f2c:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <timer0_millis>
     f30:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <timer0_millis+0x1>
     f34:	a0 93 b0 03 	sts	0x03B0, r26	; 0x8003b0 <timer0_millis+0x2>
     f38:	b0 93 b1 03 	sts	0x03B1, r27	; 0x8003b1 <timer0_millis+0x3>
     f3c:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <timer0_overflow_count>
     f40:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <timer0_overflow_count+0x1>
     f44:	a0 91 b4 03 	lds	r26, 0x03B4	; 0x8003b4 <timer0_overflow_count+0x2>
     f48:	b0 91 b5 03 	lds	r27, 0x03B5	; 0x8003b5 <timer0_overflow_count+0x3>
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	a1 1d       	adc	r26, r1
     f50:	b1 1d       	adc	r27, r1
     f52:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <timer0_overflow_count>
     f56:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <timer0_overflow_count+0x1>
     f5a:	a0 93 b4 03 	sts	0x03B4, r26	; 0x8003b4 <timer0_overflow_count+0x2>
     f5e:	b0 93 b5 03 	sts	0x03B5, r27	; 0x8003b5 <timer0_overflow_count+0x3>
     f62:	bf 91       	pop	r27
     f64:	af 91       	pop	r26
     f66:	9f 91       	pop	r25
     f68:	8f 91       	pop	r24
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f78:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f7a:	84 b5       	in	r24, 0x24	; 36
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f80:	84 b5       	in	r24, 0x24	; 36
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f86:	85 b5       	in	r24, 0x25	; 37
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f8c:	85 b5       	in	r24, 0x25	; 37
     f8e:	81 60       	ori	r24, 0x01	; 1
     f90:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f92:	ee e6       	ldi	r30, 0x6E	; 110
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	81 60       	ori	r24, 0x01	; 1
     f9a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f9c:	e1 e8       	ldi	r30, 0x81	; 129
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     fa2:	80 81       	ld	r24, Z
     fa4:	82 60       	ori	r24, 0x02	; 2
     fa6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     fa8:	80 81       	ld	r24, Z
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     fae:	e0 e8       	ldi	r30, 0x80	; 128
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     fb8:	e1 eb       	ldi	r30, 0xB1	; 177
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	84 60       	ori	r24, 0x04	; 4
     fc0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     fc2:	e0 eb       	ldi	r30, 0xB0	; 176
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	81 60       	ori	r24, 0x01	; 1
     fca:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     fcc:	e1 e9       	ldi	r30, 0x91	; 145
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     fd6:	80 81       	ld	r24, Z
     fd8:	81 60       	ori	r24, 0x01	; 1
     fda:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     fdc:	e0 e9       	ldi	r30, 0x90	; 144
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     fe6:	e1 ea       	ldi	r30, 0xA1	; 161
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     ff6:	e0 ea       	ldi	r30, 0xA0	; 160
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	81 60       	ori	r24, 0x01	; 1
     ffe:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1000:	e1 e2       	ldi	r30, 0x21	; 33
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	80 81       	ld	r24, Z
    1006:	82 60       	ori	r24, 0x02	; 2
    1008:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    100a:	80 81       	ld	r24, Z
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1010:	e0 e2       	ldi	r30, 0x20	; 32
    1012:	f1 e0       	ldi	r31, 0x01	; 1
    1014:	80 81       	ld	r24, Z
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    101a:	ea e7       	ldi	r30, 0x7A	; 122
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	84 60       	ori	r24, 0x04	; 4
    1022:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1024:	80 81       	ld	r24, Z
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    102a:	80 81       	ld	r24, Z
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1030:	80 81       	ld	r24, Z
    1032:	80 68       	ori	r24, 0x80	; 128
    1034:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1036:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    103a:	08 95       	ret

0000103c <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    103c:	86 33       	cpi	r24, 0x36	; 54
    103e:	08 f0       	brcs	.+2      	; 0x1042 <analogRead+0x6>
    1040:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    1042:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1046:	28 2f       	mov	r18, r24
    1048:	28 70       	andi	r18, 0x08	; 8
    104a:	97 7f       	andi	r25, 0xF7	; 247
    104c:	92 2b       	or	r25, r18
    104e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1052:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <analog_reference>
    1056:	90 e4       	ldi	r25, 0x40	; 64
    1058:	29 9f       	mul	r18, r25
    105a:	90 01       	movw	r18, r0
    105c:	11 24       	eor	r1, r1
    105e:	87 70       	andi	r24, 0x07	; 7
    1060:	82 2b       	or	r24, r18
    1062:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1066:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    106a:	80 64       	ori	r24, 0x40	; 64
    106c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1070:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1074:	86 fd       	sbrc	r24, 6
    1076:	fc cf       	rjmp	.-8      	; 0x1070 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1078:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    107c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1080:	90 e0       	ldi	r25, 0x00	; 0
}
    1082:	92 2b       	or	r25, r18
    1084:	08 95       	ret

00001086 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	fc 01       	movw	r30, r24
    108a:	31 97       	sbiw	r30, 0x01	; 1
    108c:	e2 31       	cpi	r30, 0x12	; 18
    108e:	f1 05       	cpc	r31, r1
    1090:	08 f0       	brcs	.+2      	; 0x1094 <turnOffPWM+0xe>
    1092:	4d c0       	rjmp	.+154    	; 0x112e <turnOffPWM+0xa8>
    1094:	88 27       	eor	r24, r24
    1096:	ee 58       	subi	r30, 0x8E	; 142
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	8f 4f       	sbci	r24, 0xFF	; 255
    109c:	46 c3       	rjmp	.+1676   	; 0x172a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    109e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10a2:	8f 77       	andi	r24, 0x7F	; 127
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10aa:	8f 7d       	andi	r24, 0xDF	; 223
    10ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10b0:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    10b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10b6:	87 7f       	andi	r24, 0xF7	; 247
    10b8:	f9 cf       	rjmp	.-14     	; 0x10ac <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10ba:	84 b5       	in	r24, 0x24	; 36
    10bc:	8f 77       	andi	r24, 0x7F	; 127
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    10c0:	84 b5       	in	r24, 0x24	; 36
    10c2:	8f 7d       	andi	r24, 0xDF	; 223
    10c4:	84 bd       	out	0x24, r24	; 36
    10c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    10cc:	8f 77       	andi	r24, 0x7F	; 127
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    10d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    10d4:	8f 7d       	andi	r24, 0xDF	; 223
    10d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    10da:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    10dc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10e0:	8f 77       	andi	r24, 0x7F	; 127
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    10e4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10e8:	8f 7d       	andi	r24, 0xDF	; 223
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    10ec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10f0:	87 7f       	andi	r24, 0xF7	; 247
    10f2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10f6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    10f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10fc:	8f 77       	andi	r24, 0x7F	; 127
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1100:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1104:	8f 7d       	andi	r24, 0xDF	; 223
    1106:	03 c0       	rjmp	.+6      	; 0x110e <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1108:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    110c:	87 7f       	andi	r24, 0xF7	; 247
    110e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1112:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1114:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	07 c0       	rjmp	.+14     	; 0x112a <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    111c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1120:	8f 7d       	andi	r24, 0xDF	; 223
    1122:	03 c0       	rjmp	.+6      	; 0x112a <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1124:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1128:	87 7f       	andi	r24, 0xF7	; 247
    112a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    112e:	08 95       	ret

00001130 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	fc 01       	movw	r30, r24
    1138:	e2 5b       	subi	r30, 0xB2	; 178
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    113e:	fc 01       	movw	r30, r24
    1140:	ec 56       	subi	r30, 0x6C	; 108
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1146:	88 23       	and	r24, r24
    1148:	61 f1       	breq	.+88     	; 0x11a2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	fc 01       	movw	r30, r24
    1152:	ec 50       	subi	r30, 0x0C	; 12
    1154:	fe 4f       	sbci	r31, 0xFE	; 254
    1156:	c5 91       	lpm	r28, Z+
    1158:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    115a:	fc 01       	movw	r30, r24
    115c:	e6 52       	subi	r30, 0x26	; 38
    115e:	fe 4f       	sbci	r31, 0xFE	; 254
    1160:	a5 91       	lpm	r26, Z+
    1162:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1164:	61 11       	cpse	r22, r1
    1166:	09 c0       	rjmp	.+18     	; 0x117a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1168:	9f b7       	in	r25, 0x3f	; 63
                cli();
    116a:	f8 94       	cli
		*reg &= ~bit;
    116c:	88 81       	ld	r24, Y
    116e:	20 95       	com	r18
    1170:	82 23       	and	r24, r18
    1172:	88 83       	st	Y, r24
		*out &= ~bit;
    1174:	ec 91       	ld	r30, X
    1176:	2e 23       	and	r18, r30
    1178:	0b c0       	rjmp	.+22     	; 0x1190 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    117a:	62 30       	cpi	r22, 0x02	; 2
    117c:	61 f4       	brne	.+24     	; 0x1196 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    117e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1180:	f8 94       	cli
		*reg &= ~bit;
    1182:	88 81       	ld	r24, Y
    1184:	32 2f       	mov	r19, r18
    1186:	30 95       	com	r19
    1188:	83 23       	and	r24, r19
    118a:	88 83       	st	Y, r24
		*out |= bit;
    118c:	ec 91       	ld	r30, X
    118e:	2e 2b       	or	r18, r30
    1190:	2c 93       	st	X, r18
		SREG = oldSREG;
    1192:	9f bf       	out	0x3f, r25	; 63
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1196:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1198:	f8 94       	cli
		*reg |= bit;
    119a:	e8 81       	ld	r30, Y
    119c:	2e 2b       	or	r18, r30
    119e:	28 83       	st	Y, r18
		SREG = oldSREG;
    11a0:	8f bf       	out	0x3f, r24	; 63
	}
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	f9 01       	movw	r30, r18
    11b4:	e8 5f       	subi	r30, 0xF8	; 248
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11ba:	f9 01       	movw	r30, r18
    11bc:	e2 5b       	subi	r30, 0xB2	; 178
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11c2:	f9 01       	movw	r30, r18
    11c4:	ec 56       	subi	r30, 0x6C	; 108
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11ca:	cc 23       	and	r28, r28
    11cc:	b9 f0       	breq	.+46     	; 0x11fc <digitalWrite+0x54>
    11ce:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11d0:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    11d2:	59 df       	rcall	.-334    	; 0x1086 <turnOffPWM>
    11d4:	ec 2f       	mov	r30, r28
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	e6 52       	subi	r30, 0x26	; 38
    11de:	fe 4f       	sbci	r31, 0xFE	; 254
    11e0:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    11e2:	b4 91       	lpm	r27, Z
	cli();
    11e4:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    11e6:	f8 94       	cli
    11e8:	11 11       	cpse	r17, r1
		*out &= ~bit;
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <digitalWrite+0x4c>
    11ec:	8c 91       	ld	r24, X
    11ee:	d0 95       	com	r29
    11f0:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <digitalWrite+0x50>
    11f4:	ec 91       	ld	r30, X
    11f6:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    11f8:	dc 93       	st	X, r29
}
    11fa:	9f bf       	out	0x3f, r25	; 63
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	08 95       	ret

00001204 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1204:	4f 92       	push	r4
    1206:	5f 92       	push	r5
    1208:	6f 92       	push	r6
    120a:	7f 92       	push	r7
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	29 01       	movw	r4, r18
    1226:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	24 19       	sub	r18, r4
    122e:	35 09       	sbc	r19, r5
    1230:	46 09       	sbc	r20, r6
    1232:	57 09       	sbc	r21, r7
    1234:	8a 89       	ldd	r24, Y+18	; 0x12
    1236:	9b 89       	ldd	r25, Y+19	; 0x13
    1238:	ac 89       	ldd	r26, Y+20	; 0x14
    123a:	bd 89       	ldd	r27, Y+21	; 0x15
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	6a 19       	sub	r22, r10
    1242:	7b 09       	sbc	r23, r11
    1244:	8c 09       	sbc	r24, r12
    1246:	9d 09       	sbc	r25, r13
    1248:	23 d2       	rcall	.+1094   	; 0x1690 <__mulsi3>
    124a:	a8 01       	movw	r20, r16
    124c:	97 01       	movw	r18, r14
    124e:	24 19       	sub	r18, r4
    1250:	35 09       	sbc	r19, r5
    1252:	46 09       	sbc	r20, r6
    1254:	57 09       	sbc	r21, r7
    1256:	4d d2       	rcall	.+1178   	; 0x16f2 <__divmodsi4>
    1258:	ca 01       	movw	r24, r20
    125a:	b9 01       	movw	r22, r18
    125c:	6a 0d       	add	r22, r10
    125e:	7b 1d       	adc	r23, r11
    1260:	8c 1d       	adc	r24, r12
    1262:	9d 1d       	adc	r25, r13
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	bf 90       	pop	r11
    1276:	af 90       	pop	r10
    1278:	7f 90       	pop	r7
    127a:	6f 90       	pop	r6
    127c:	5f 90       	pop	r5
    127e:	4f 90       	pop	r4
    1280:	08 95       	ret

00001282 <_ZN8SPIClass8transferEh>:
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t data, uint8_t clock,
  uint8_t o) :
 dataPin(data), clockPin(clock), brightness(0), pixels(NULL),
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
{
  updateLength(n);
    1282:	8e bd       	out	0x2e, r24	; 46
    1284:	00 00       	nop
    1286:	0d b4       	in	r0, 0x2d	; 45
    1288:	07 fe       	sbrs	r0, 7
    128a:	fd cf       	rjmp	.-6      	; 0x1286 <_ZN8SPIClass8transferEh+0x4>
    128c:	8e b5       	in	r24, 0x2e	; 46
    128e:	08 95       	ret

00001290 <_ZN16Adafruit_DotStar11hw_spi_initEv>:
    1290:	b9 d1       	rcall	.+882    	; 0x1604 <_ZN8SPIClass5beginEv>
    1292:	8c b5       	in	r24, 0x2c	; 44
    1294:	8c 7f       	andi	r24, 0xFC	; 252
    1296:	8c bd       	out	0x2c, r24	; 44
    1298:	8d b5       	in	r24, 0x2d	; 45
    129a:	81 60       	ori	r24, 0x01	; 1
    129c:	8d bd       	out	0x2d, r24	; 45
    129e:	8c b5       	in	r24, 0x2c	; 44
    12a0:	8f 7d       	andi	r24, 0xDF	; 223
    12a2:	8c bd       	out	0x2c, r24	; 44
    12a4:	8c b5       	in	r24, 0x2c	; 44
    12a6:	83 7f       	andi	r24, 0xF3	; 243
    12a8:	8c bd       	out	0x2c, r24	; 44
    12aa:	08 95       	ret

000012ac <_ZN16Adafruit_DotStar11sw_spi_initEv>:
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	ec 01       	movw	r28, r24
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	3c df       	rcall	.-392    	; 0x1130 <pinMode>
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	39 df       	rcall	.-398    	; 0x1130 <pinMode>
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fc 01       	movw	r30, r24
    12c4:	ec 56       	subi	r30, 0x6C	; 108
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	e4 91       	lpm	r30, Z
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	e6 52       	subi	r30, 0x26	; 38
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	a5 91       	lpm	r26, Z+
    12d6:	b4 91       	lpm	r27, Z
    12d8:	bd 87       	std	Y+13, r27	; 0x0d
    12da:	ac 87       	std	Y+12, r26	; 0x0c
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	f9 01       	movw	r30, r18
    12e2:	ec 56       	subi	r30, 0x6C	; 108
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	e4 91       	lpm	r30, Z
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	e6 52       	subi	r30, 0x26	; 38
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	45 91       	lpm	r20, Z+
    12f4:	54 91       	lpm	r21, Z
    12f6:	5f 87       	std	Y+15, r21	; 0x0f
    12f8:	4e 87       	std	Y+14, r20	; 0x0e
    12fa:	fc 01       	movw	r30, r24
    12fc:	e2 5b       	subi	r30, 0xB2	; 178
    12fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1300:	84 91       	lpm	r24, Z
    1302:	8a 87       	std	Y+10, r24	; 0x0a
    1304:	f9 01       	movw	r30, r18
    1306:	e2 5b       	subi	r30, 0xB2	; 178
    1308:	fe 4f       	sbci	r31, 0xFE	; 254
    130a:	e4 91       	lpm	r30, Z
    130c:	eb 87       	std	Y+11, r30	; 0x0b
    130e:	9c 91       	ld	r25, X
    1310:	e8 2f       	mov	r30, r24
    1312:	e0 95       	com	r30
    1314:	e9 23       	and	r30, r25
    1316:	ec 93       	st	X, r30
    1318:	ee 85       	ldd	r30, Y+14	; 0x0e
    131a:	ff 85       	ldd	r31, Y+15	; 0x0f
    131c:	90 81       	ld	r25, Z
    131e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1320:	80 95       	com	r24
    1322:	89 23       	and	r24, r25
    1324:	80 83       	st	Z, r24
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <_ZN16Adafruit_DotStar5beginEv>:
    132c:	fc 01       	movw	r30, r24
    132e:	22 81       	ldd	r18, Z+2	; 0x02
    1330:	2f 3f       	cpi	r18, 0xFF	; 255
    1332:	09 f4       	brne	.+2      	; 0x1336 <_ZN16Adafruit_DotStar5beginEv+0xa>
    1334:	ad cf       	rjmp	.-166    	; 0x1290 <_ZN16Adafruit_DotStar11hw_spi_initEv>
    1336:	ba cf       	rjmp	.-140    	; 0x12ac <_ZN16Adafruit_DotStar11sw_spi_initEv>

00001338 <_ZN16Adafruit_DotStar10sw_spi_endEv>:
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ec 01       	movw	r28, r24
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	f6 de       	rcall	.-532    	; 0x1130 <pinMode>
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	f1 ce       	rjmp	.-542    	; 0x1130 <pinMode>

0000134e <_ZN16Adafruit_DotStarD1Ev>:
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	ec 01       	movw	r28, r24
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	09 f0       	breq	.+2      	; 0x135e <_ZN16Adafruit_DotStarD1Ev+0x10>
    135c:	9f d2       	rcall	.+1342   	; 0x189c <free>
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	19 f4       	brne	.+6      	; 0x136a <_ZN16Adafruit_DotStarD1Ev+0x1c>
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	7f c1       	rjmp	.+766    	; 0x1668 <_ZN8SPIClass3endEv>
    136a:	ce 01       	movw	r24, r28
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	e3 cf       	rjmp	.-58     	; 0x1338 <_ZN16Adafruit_DotStar10sw_spi_endEv>

00001372 <_ZN16Adafruit_DotStar10sw_spi_outEh>:
    1372:	fc 01       	movw	r30, r24
    1374:	29 e0       	ldi	r18, 0x09	; 9
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	d1 f0       	breq	.+52     	; 0x13ae <_ZN16Adafruit_DotStar10sw_spi_outEh+0x3c>
    137a:	a4 85       	ldd	r26, Z+12	; 0x0c
    137c:	b5 85       	ldd	r27, Z+13	; 0x0d
    137e:	82 85       	ldd	r24, Z+10	; 0x0a
    1380:	9c 91       	ld	r25, X
    1382:	67 ff       	sbrs	r22, 7
    1384:	02 c0       	rjmp	.+4      	; 0x138a <_ZN16Adafruit_DotStar10sw_spi_outEh+0x18>
    1386:	89 2b       	or	r24, r25
    1388:	02 c0       	rjmp	.+4      	; 0x138e <_ZN16Adafruit_DotStar10sw_spi_outEh+0x1c>
    138a:	80 95       	com	r24
    138c:	89 23       	and	r24, r25
    138e:	8c 93       	st	X, r24
    1390:	a6 85       	ldd	r26, Z+14	; 0x0e
    1392:	b7 85       	ldd	r27, Z+15	; 0x0f
    1394:	9c 91       	ld	r25, X
    1396:	83 85       	ldd	r24, Z+11	; 0x0b
    1398:	89 2b       	or	r24, r25
    139a:	8c 93       	st	X, r24
    139c:	a6 85       	ldd	r26, Z+14	; 0x0e
    139e:	b7 85       	ldd	r27, Z+15	; 0x0f
    13a0:	9c 91       	ld	r25, X
    13a2:	83 85       	ldd	r24, Z+11	; 0x0b
    13a4:	80 95       	com	r24
    13a6:	89 23       	and	r24, r25
    13a8:	8c 93       	st	X, r24
    13aa:	66 0f       	add	r22, r22
    13ac:	e4 cf       	rjmp	.-56     	; 0x1376 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x4>
    13ae:	08 95       	ret

000013b0 <_ZN16Adafruit_DotStar4showEv>:
    13b0:	bf 92       	push	r11
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	fc 01       	movw	r30, r24
    13c4:	05 81       	ldd	r16, Z+5	; 0x05
    13c6:	16 81       	ldd	r17, Z+6	; 0x06
    13c8:	01 15       	cp	r16, r1
    13ca:	11 05       	cpc	r17, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <_ZN16Adafruit_DotStar4showEv+0x20>
    13ce:	8c c0       	rjmp	.+280    	; 0x14e8 <_ZN16Adafruit_DotStar4showEv+0x138>
    13d0:	ec 01       	movw	r28, r24
    13d2:	e0 80       	ld	r14, Z
    13d4:	f1 80       	ldd	r15, Z+1	; 0x01
    13d6:	b4 80       	ldd	r11, Z+4	; 0x04
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <_ZN16Adafruit_DotStar4showEv+0x30>
    13de:	3c c0       	rjmp	.+120    	; 0x1458 <_ZN16Adafruit_DotStar4showEv+0xa8>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	4f df       	rcall	.-354    	; 0x1282 <_ZN8SPIClass8transferEh>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	4d df       	rcall	.-358    	; 0x1282 <_ZN8SPIClass8transferEh>
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	4b df       	rcall	.-362    	; 0x1282 <_ZN8SPIClass8transferEh>
    13ec:	1e bc       	out	0x2e, r1	; 46
    13ee:	4f ef       	ldi	r20, 0xFF	; 255
    13f0:	0d b4       	in	r0, 0x2d	; 45
    13f2:	07 fe       	sbrs	r0, 7
    13f4:	fd cf       	rjmp	.-6      	; 0x13f0 <_ZN16Adafruit_DotStar4showEv+0x40>
    13f6:	4e bd       	out	0x2e, r20	; 46
    13f8:	f8 01       	movw	r30, r16
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	99 23       	and	r25, r25
    1400:	31 f0       	breq	.+12     	; 0x140e <_ZN16Adafruit_DotStar4showEv+0x5e>
    1402:	20 81       	ld	r18, Z
    1404:	b2 9e       	mul	r11, r18
    1406:	90 01       	movw	r18, r0
    1408:	11 24       	eor	r1, r1
    140a:	93 2f       	mov	r25, r19
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <_ZN16Adafruit_DotStar4showEv+0x60>
    140e:	90 81       	ld	r25, Z
    1410:	0d b4       	in	r0, 0x2d	; 45
    1412:	07 fe       	sbrs	r0, 7
    1414:	fd cf       	rjmp	.-6      	; 0x1410 <_ZN16Adafruit_DotStar4showEv+0x60>
    1416:	9e bd       	out	0x2e, r25	; 46
    1418:	81 50       	subi	r24, 0x01	; 1
    141a:	31 96       	adiw	r30, 0x01	; 1
    141c:	81 11       	cpse	r24, r1
    141e:	ee cf       	rjmp	.-36     	; 0x13fc <_ZN16Adafruit_DotStar4showEv+0x4c>
    1420:	0d 5f       	subi	r16, 0xFD	; 253
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	f1 e0       	ldi	r31, 0x01	; 1
    1426:	ef 1a       	sub	r14, r31
    1428:	f1 08       	sbc	r15, r1
    142a:	11 f7       	brne	.-60     	; 0x13f0 <_ZN16Adafruit_DotStar4showEv+0x40>
    142c:	0d b4       	in	r0, 0x2d	; 45
    142e:	07 fe       	sbrs	r0, 7
    1430:	fd cf       	rjmp	.-6      	; 0x142c <_ZN16Adafruit_DotStar4showEv+0x7c>
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	21 2f       	mov	r18, r17
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	88 81       	ld	r24, Y
    143a:	99 81       	ldd	r25, Y+1	; 0x01
    143c:	0f 96       	adiw	r24, 0x0f	; 15
    143e:	64 e0       	ldi	r22, 0x04	; 4
    1440:	96 95       	lsr	r25
    1442:	87 95       	ror	r24
    1444:	6a 95       	dec	r22
    1446:	e1 f7       	brne	.-8      	; 0x1440 <_ZN16Adafruit_DotStar4showEv+0x90>
    1448:	28 17       	cp	r18, r24
    144a:	39 07       	cpc	r19, r25
    144c:	08 f0       	brcs	.+2      	; 0x1450 <_ZN16Adafruit_DotStar4showEv+0xa0>
    144e:	4c c0       	rjmp	.+152    	; 0x14e8 <_ZN16Adafruit_DotStar4showEv+0x138>
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	17 df       	rcall	.-466    	; 0x1282 <_ZN8SPIClass8transferEh>
    1454:	1f 5f       	subi	r17, 0xFF	; 255
    1456:	ee cf       	rjmp	.-36     	; 0x1434 <_ZN16Adafruit_DotStar4showEv+0x84>
    1458:	54 e0       	ldi	r21, 0x04	; 4
    145a:	d5 2e       	mov	r13, r21
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	ce 01       	movw	r24, r28
    1460:	88 df       	rcall	.-240    	; 0x1372 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    1462:	da 94       	dec	r13
    1464:	d1 10       	cpse	r13, r1
    1466:	fa cf       	rjmp	.-12     	; 0x145c <_ZN16Adafruit_DotStar4showEv+0xac>
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	88 23       	and	r24, r24
    146c:	21 f1       	breq	.+72     	; 0x14b6 <_ZN16Adafruit_DotStar4showEv+0x106>
    146e:	6f ef       	ldi	r22, 0xFF	; 255
    1470:	ce 01       	movw	r24, r28
    1472:	7f df       	rcall	.-258    	; 0x1372 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    1474:	68 01       	movw	r12, r16
    1476:	0d 5f       	subi	r16, 0xFD	; 253
    1478:	1f 4f       	sbci	r17, 0xFF	; 255
    147a:	f6 01       	movw	r30, r12
    147c:	81 91       	ld	r24, Z+
    147e:	6f 01       	movw	r12, r30
    1480:	b8 9e       	mul	r11, r24
    1482:	c0 01       	movw	r24, r0
    1484:	11 24       	eor	r1, r1
    1486:	69 2f       	mov	r22, r25
    1488:	ce 01       	movw	r24, r28
    148a:	73 df       	rcall	.-282    	; 0x1372 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    148c:	c0 16       	cp	r12, r16
    148e:	d1 06       	cpc	r13, r17
    1490:	a1 f7       	brne	.-24     	; 0x147a <_ZN16Adafruit_DotStar4showEv+0xca>
    1492:	f1 e0       	ldi	r31, 0x01	; 1
    1494:	ef 1a       	sub	r14, r31
    1496:	f1 08       	sbc	r15, r1
    1498:	51 f7       	brne	.-44     	; 0x146e <_ZN16Adafruit_DotStar4showEv+0xbe>
    149a:	10 e0       	ldi	r17, 0x00	; 0
    149c:	13 c0       	rjmp	.+38     	; 0x14c4 <_ZN16Adafruit_DotStar4showEv+0x114>
    149e:	f6 01       	movw	r30, r12
    14a0:	61 91       	ld	r22, Z+
    14a2:	6f 01       	movw	r12, r30
    14a4:	ce 01       	movw	r24, r28
    14a6:	65 df       	rcall	.-310    	; 0x1372 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    14a8:	c0 16       	cp	r12, r16
    14aa:	d1 06       	cpc	r13, r17
    14ac:	c1 f7       	brne	.-16     	; 0x149e <_ZN16Adafruit_DotStar4showEv+0xee>
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	ef 1a       	sub	r14, r31
    14b2:	f1 08       	sbc	r15, r1
    14b4:	91 f3       	breq	.-28     	; 0x149a <_ZN16Adafruit_DotStar4showEv+0xea>
    14b6:	6f ef       	ldi	r22, 0xFF	; 255
    14b8:	ce 01       	movw	r24, r28
    14ba:	5b df       	rcall	.-330    	; 0x1372 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    14bc:	68 01       	movw	r12, r16
    14be:	0d 5f       	subi	r16, 0xFD	; 253
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	ed cf       	rjmp	.-38     	; 0x149e <_ZN16Adafruit_DotStar4showEv+0xee>
    14c4:	21 2f       	mov	r18, r17
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	88 81       	ld	r24, Y
    14ca:	99 81       	ldd	r25, Y+1	; 0x01
    14cc:	0f 96       	adiw	r24, 0x0f	; 15
    14ce:	44 e0       	ldi	r20, 0x04	; 4
    14d0:	96 95       	lsr	r25
    14d2:	87 95       	ror	r24
    14d4:	4a 95       	dec	r20
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <_ZN16Adafruit_DotStar4showEv+0x120>
    14d8:	28 17       	cp	r18, r24
    14da:	39 07       	cpc	r19, r25
    14dc:	28 f4       	brcc	.+10     	; 0x14e8 <_ZN16Adafruit_DotStar4showEv+0x138>
    14de:	6f ef       	ldi	r22, 0xFF	; 255
    14e0:	ce 01       	movw	r24, r28
    14e2:	47 df       	rcall	.-370    	; 0x1372 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    14e4:	1f 5f       	subi	r17, 0xFF	; 255
    14e6:	ee cf       	rjmp	.-36     	; 0x14c4 <_ZN16Adafruit_DotStar4showEv+0x114>
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	bf 90       	pop	r11
    14fa:	08 95       	ret

000014fc <_ZN16Adafruit_DotStar5clearEv>:
    14fc:	fc 01       	movw	r30, r24
    14fe:	97 81       	ldd	r25, Z+7	; 0x07
    1500:	80 85       	ldd	r24, Z+8	; 0x08
    1502:	20 81       	ld	r18, Z
    1504:	31 81       	ldd	r19, Z+1	; 0x01
    1506:	a9 01       	movw	r20, r18
    1508:	98 13       	cpse	r25, r24
    150a:	07 c0       	rjmp	.+14     	; 0x151a <_ZN16Adafruit_DotStar5clearEv+0x1e>
    150c:	4d 5f       	subi	r20, 0xFD	; 253
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	56 95       	lsr	r21
    1512:	47 95       	ror	r20
    1514:	56 95       	lsr	r21
    1516:	47 95       	ror	r20
    1518:	02 c0       	rjmp	.+4      	; 0x151e <_ZN16Adafruit_DotStar5clearEv+0x22>
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	42 0f       	add	r20, r18
    1520:	53 1f       	adc	r21, r19
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	85 81       	ldd	r24, Z+5	; 0x05
    1528:	96 81       	ldd	r25, Z+6	; 0x06
    152a:	41 c2       	rjmp	.+1154   	; 0x19ae <memset>

0000152c <_ZN16Adafruit_DotStar12updateLengthEj>:
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	ec 01       	movw	r28, r24
    1536:	8b 01       	movw	r16, r22
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	09 f0       	breq	.+2      	; 0x1542 <_ZN16Adafruit_DotStar12updateLengthEj+0x16>
    1540:	ad d1       	rcall	.+858    	; 0x189c <free>
    1542:	9f 81       	ldd	r25, Y+7	; 0x07
    1544:	88 85       	ldd	r24, Y+8	; 0x08
    1546:	98 13       	cpse	r25, r24
    1548:	07 c0       	rjmp	.+14     	; 0x1558 <_ZN16Adafruit_DotStar12updateLengthEj+0x2c>
    154a:	c8 01       	movw	r24, r16
    154c:	03 96       	adiw	r24, 0x03	; 3
    154e:	96 95       	lsr	r25
    1550:	87 95       	ror	r24
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	03 c0       	rjmp	.+6      	; 0x155e <_ZN16Adafruit_DotStar12updateLengthEj+0x32>
    1558:	c8 01       	movw	r24, r16
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	80 0f       	add	r24, r16
    1560:	91 1f       	adc	r25, r17
    1562:	04 d1       	rcall	.+520    	; 0x176c <malloc>
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	89 2b       	or	r24, r25
    156a:	41 f0       	breq	.+16     	; 0x157c <_ZN16Adafruit_DotStar12updateLengthEj+0x50>
    156c:	19 83       	std	Y+1, r17	; 0x01
    156e:	08 83       	st	Y, r16
    1570:	ce 01       	movw	r24, r28
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	c0 cf       	rjmp	.-128    	; 0x14fc <_ZN16Adafruit_DotStar5clearEv>
    157c:	19 82       	std	Y+1, r1	; 0x01
    157e:	18 82       	st	Y, r1
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <_ZN16Adafruit_DotStarC1Ejh>:
    158a:	fc 01       	movw	r30, r24
    158c:	71 83       	std	Z+1, r23	; 0x01
    158e:	60 83       	st	Z, r22
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	82 83       	std	Z+2, r24	; 0x02
    1594:	14 82       	std	Z+4, r1	; 0x04
    1596:	16 82       	std	Z+6, r1	; 0x06
    1598:	15 82       	std	Z+5, r1	; 0x05
    159a:	84 2f       	mov	r24, r20
    159c:	83 70       	andi	r24, 0x03	; 3
    159e:	87 83       	std	Z+7, r24	; 0x07
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	ca 01       	movw	r24, r20
    15a4:	95 95       	asr	r25
    15a6:	87 95       	ror	r24
    15a8:	95 95       	asr	r25
    15aa:	87 95       	ror	r24
    15ac:	83 70       	andi	r24, 0x03	; 3
    15ae:	80 87       	std	Z+8, r24	; 0x08
    15b0:	34 e0       	ldi	r19, 0x04	; 4
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	3a 95       	dec	r19
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <_ZN16Adafruit_DotStarC1Ejh+0x28>
    15ba:	43 70       	andi	r20, 0x03	; 3
    15bc:	41 87       	std	Z+9, r20	; 0x09
    15be:	cf 01       	movw	r24, r30
    15c0:	b5 cf       	rjmp	.-150    	; 0x152c <_ZN16Adafruit_DotStar12updateLengthEj>

000015c2 <_ZN16Adafruit_DotStar13setPixelColorEjhhh>:
    numLEDs * 3);                   // COLOR: 3 bytes/pixel
}

// Set pixel color, separate R,G,B values (0-255 ea.)
void Adafruit_DotStar::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    15c2:	0f 93       	push	r16
    15c4:	fc 01       	movw	r30, r24
  if(n < numLEDs) {
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	68 17       	cp	r22, r24
    15cc:	79 07       	cpc	r23, r25
    15ce:	c0 f4       	brcc	.+48     	; 0x1600 <_ZN16Adafruit_DotStar13setPixelColorEjhhh+0x3e>
    uint8_t *p = &pixels[n * 3];
    15d0:	cb 01       	movw	r24, r22
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	68 0f       	add	r22, r24
    15d8:	79 1f       	adc	r23, r25
    15da:	85 81       	ldd	r24, Z+5	; 0x05
    15dc:	96 81       	ldd	r25, Z+6	; 0x06
    15de:	68 0f       	add	r22, r24
    15e0:	79 1f       	adc	r23, r25
    p[rOffset] = r;
    15e2:	87 81       	ldd	r24, Z+7	; 0x07
    15e4:	db 01       	movw	r26, r22
    15e6:	a8 0f       	add	r26, r24
    15e8:	b1 1d       	adc	r27, r1
    15ea:	4c 93       	st	X, r20
    p[gOffset] = g;
    15ec:	80 85       	ldd	r24, Z+8	; 0x08
    15ee:	db 01       	movw	r26, r22
    15f0:	a8 0f       	add	r26, r24
    15f2:	b1 1d       	adc	r27, r1
    15f4:	2c 93       	st	X, r18
    p[bOffset] = b;
    15f6:	81 85       	ldd	r24, Z+9	; 0x09
    15f8:	fb 01       	movw	r30, r22
    15fa:	e8 0f       	add	r30, r24
    15fc:	f1 1d       	adc	r31, r1
    15fe:	00 83       	st	Z, r16
  }
}
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1604:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1606:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1608:	f8 94       	cli
  if (!initialized) {
    160a:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <_ZN8SPIClass11initializedE>
    160e:	81 11       	cpse	r24, r1
    1610:	23 c0       	rjmp	.+70     	; 0x1658 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1612:	e9 ec       	ldi	r30, 0xC9	; 201
    1614:	f1 e0       	ldi	r31, 0x01	; 1
    1616:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1618:	e3 e8       	ldi	r30, 0x83	; 131
    161a:	f1 e0       	ldi	r31, 0x01	; 1
    161c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    161e:	e8 2f       	mov	r30, r24
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	ec 50       	subi	r30, 0x0C	; 12
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
    162a:	a5 91       	lpm	r26, Z+
    162c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    162e:	ec 91       	ld	r30, X
    1630:	e9 23       	and	r30, r25
    1632:	19 f4       	brne	.+6      	; 0x163a <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	85 e3       	ldi	r24, 0x35	; 53
    1638:	b7 dd       	rcall	.-1170   	; 0x11a8 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	85 e3       	ldi	r24, 0x35	; 53
    163e:	78 dd       	rcall	.-1296   	; 0x1130 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1640:	8c b5       	in	r24, 0x2c	; 44
    1642:	80 61       	ori	r24, 0x10	; 16
    1644:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1646:	8c b5       	in	r24, 0x2c	; 44
    1648:	80 64       	ori	r24, 0x40	; 64
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    164a:	8c bd       	out	0x2c, r24	; 44
    164c:	61 e0       	ldi	r22, 0x01	; 1
    pinMode(MOSI, OUTPUT);
    164e:	84 e3       	ldi	r24, 0x34	; 52
    1650:	6f dd       	rcall	.-1314   	; 0x1130 <pinMode>
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	83 e3       	ldi	r24, 0x33	; 51
  }
  initialized++; // reference count
    1656:	6c dd       	rcall	.-1320   	; 0x1130 <pinMode>
    1658:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <_ZN8SPIClass11initializedE>
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <_ZN8SPIClass11initializedE>
  SREG = sreg;
}
    1662:	cf bf       	out	0x3f, r28	; 63
    1664:	cf 91       	pop	r28
  }
}

// SPI STUFF ---------------------------------------------------------------

void Adafruit_DotStar::hw_spi_init(void) { // Initialize hardware SPI
    1666:	08 95       	ret

00001668 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    1668:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    166a:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    166c:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <_ZN8SPIClass11initializedE>
    1670:	88 23       	and	r24, r24
    1672:	19 f0       	breq	.+6      	; 0x167a <_ZN8SPIClass3endEv+0x12>
    initialized--;
    1674:	81 50       	subi	r24, 0x01	; 1
    1676:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    167a:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <_ZN8SPIClass11initializedE>
    167e:	81 11       	cpse	r24, r1
    1680:	05 c0       	rjmp	.+10     	; 0x168c <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    1682:	8c b5       	in	r24, 0x2c	; 44
    1684:	8f 7b       	andi	r24, 0xBF	; 191
    1686:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    1688:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    168c:	9f bf       	out	0x3f, r25	; 63
    168e:	08 95       	ret

00001690 <__mulsi3>:
    1690:	db 01       	movw	r26, r22
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	51 d0       	rcall	.+162    	; 0x173a <__muluhisi3>
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	a2 9f       	mul	r26, r18
    169e:	80 0d       	add	r24, r0
    16a0:	91 1d       	adc	r25, r1
    16a2:	a3 9f       	mul	r26, r19
    16a4:	90 0d       	add	r25, r0
    16a6:	b2 9f       	mul	r27, r18
    16a8:	90 0d       	add	r25, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	08 95       	ret

000016ae <__udivmodsi4>:
    16ae:	a1 e2       	ldi	r26, 0x21	; 33
    16b0:	1a 2e       	mov	r1, r26
    16b2:	aa 1b       	sub	r26, r26
    16b4:	bb 1b       	sub	r27, r27
    16b6:	fd 01       	movw	r30, r26
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4 <__udivmodsi4_ep>

000016ba <__udivmodsi4_loop>:
    16ba:	aa 1f       	adc	r26, r26
    16bc:	bb 1f       	adc	r27, r27
    16be:	ee 1f       	adc	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	a2 17       	cp	r26, r18
    16c4:	b3 07       	cpc	r27, r19
    16c6:	e4 07       	cpc	r30, r20
    16c8:	f5 07       	cpc	r31, r21
    16ca:	20 f0       	brcs	.+8      	; 0x16d4 <__udivmodsi4_ep>
    16cc:	a2 1b       	sub	r26, r18
    16ce:	b3 0b       	sbc	r27, r19
    16d0:	e4 0b       	sbc	r30, r20
    16d2:	f5 0b       	sbc	r31, r21

000016d4 <__udivmodsi4_ep>:
    16d4:	66 1f       	adc	r22, r22
    16d6:	77 1f       	adc	r23, r23
    16d8:	88 1f       	adc	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	1a 94       	dec	r1
    16de:	69 f7       	brne	.-38     	; 0x16ba <__udivmodsi4_loop>
    16e0:	60 95       	com	r22
    16e2:	70 95       	com	r23
    16e4:	80 95       	com	r24
    16e6:	90 95       	com	r25
    16e8:	9b 01       	movw	r18, r22
    16ea:	ac 01       	movw	r20, r24
    16ec:	bd 01       	movw	r22, r26
    16ee:	cf 01       	movw	r24, r30
    16f0:	08 95       	ret

000016f2 <__divmodsi4>:
    16f2:	05 2e       	mov	r0, r21
    16f4:	97 fb       	bst	r25, 7
    16f6:	16 f4       	brtc	.+4      	; 0x16fc <__divmodsi4+0xa>
    16f8:	00 94       	com	r0
    16fa:	0f d0       	rcall	.+30     	; 0x171a <__negsi2>
    16fc:	57 fd       	sbrc	r21, 7
    16fe:	05 d0       	rcall	.+10     	; 0x170a <__divmodsi4_neg2>
    1700:	d6 df       	rcall	.-84     	; 0x16ae <__udivmodsi4>
    1702:	07 fc       	sbrc	r0, 7
    1704:	02 d0       	rcall	.+4      	; 0x170a <__divmodsi4_neg2>
    1706:	46 f4       	brtc	.+16     	; 0x1718 <__divmodsi4_exit>
    1708:	08 c0       	rjmp	.+16     	; 0x171a <__negsi2>

0000170a <__divmodsi4_neg2>:
    170a:	50 95       	com	r21
    170c:	40 95       	com	r20
    170e:	30 95       	com	r19
    1710:	21 95       	neg	r18
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	4f 4f       	sbci	r20, 0xFF	; 255
    1716:	5f 4f       	sbci	r21, 0xFF	; 255

00001718 <__divmodsi4_exit>:
    1718:	08 95       	ret

0000171a <__negsi2>:
    171a:	90 95       	com	r25
    171c:	80 95       	com	r24
    171e:	70 95       	com	r23
    1720:	61 95       	neg	r22
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	08 95       	ret

0000172a <__tablejump2__>:
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	88 1f       	adc	r24, r24
    1730:	8b bf       	out	0x3b, r24	; 59
    1732:	07 90       	elpm	r0, Z+
    1734:	f6 91       	elpm	r31, Z
    1736:	e0 2d       	mov	r30, r0
    1738:	19 94       	eijmp

0000173a <__muluhisi3>:
    173a:	09 d0       	rcall	.+18     	; 0x174e <__umulhisi3>
    173c:	a5 9f       	mul	r26, r21
    173e:	90 0d       	add	r25, r0
    1740:	b4 9f       	mul	r27, r20
    1742:	90 0d       	add	r25, r0
    1744:	a4 9f       	mul	r26, r20
    1746:	80 0d       	add	r24, r0
    1748:	91 1d       	adc	r25, r1
    174a:	11 24       	eor	r1, r1
    174c:	08 95       	ret

0000174e <__umulhisi3>:
    174e:	a2 9f       	mul	r26, r18
    1750:	b0 01       	movw	r22, r0
    1752:	b3 9f       	mul	r27, r19
    1754:	c0 01       	movw	r24, r0
    1756:	a3 9f       	mul	r26, r19
    1758:	70 0d       	add	r23, r0
    175a:	81 1d       	adc	r24, r1
    175c:	11 24       	eor	r1, r1
    175e:	91 1d       	adc	r25, r1
    1760:	b2 9f       	mul	r27, r18
    1762:	70 0d       	add	r23, r0
    1764:	81 1d       	adc	r24, r1
    1766:	11 24       	eor	r1, r1
    1768:	91 1d       	adc	r25, r1
    176a:	08 95       	ret

0000176c <malloc>:
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 05       	cpc	r25, r1
    1778:	10 f4       	brcc	.+4      	; 0x177e <malloc+0x12>
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <__flp>
    1782:	f0 91 bb 03 	lds	r31, 0x03BB	; 0x8003bb <__flp+0x1>
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	a0 e0       	ldi	r26, 0x00	; 0
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	30 97       	sbiw	r30, 0x00	; 0
    1790:	19 f1       	breq	.+70     	; 0x17d8 <malloc+0x6c>
    1792:	40 81       	ld	r20, Z
    1794:	51 81       	ldd	r21, Z+1	; 0x01
    1796:	02 81       	ldd	r16, Z+2	; 0x02
    1798:	13 81       	ldd	r17, Z+3	; 0x03
    179a:	48 17       	cp	r20, r24
    179c:	59 07       	cpc	r21, r25
    179e:	c8 f0       	brcs	.+50     	; 0x17d2 <malloc+0x66>
    17a0:	84 17       	cp	r24, r20
    17a2:	95 07       	cpc	r25, r21
    17a4:	69 f4       	brne	.+26     	; 0x17c0 <malloc+0x54>
    17a6:	10 97       	sbiw	r26, 0x00	; 0
    17a8:	31 f0       	breq	.+12     	; 0x17b6 <malloc+0x4a>
    17aa:	12 96       	adiw	r26, 0x02	; 2
    17ac:	0c 93       	st	X, r16
    17ae:	12 97       	sbiw	r26, 0x02	; 2
    17b0:	13 96       	adiw	r26, 0x03	; 3
    17b2:	1c 93       	st	X, r17
    17b4:	27 c0       	rjmp	.+78     	; 0x1804 <malloc+0x98>
    17b6:	00 93 ba 03 	sts	0x03BA, r16	; 0x8003ba <__flp>
    17ba:	10 93 bb 03 	sts	0x03BB, r17	; 0x8003bb <__flp+0x1>
    17be:	22 c0       	rjmp	.+68     	; 0x1804 <malloc+0x98>
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	19 f0       	breq	.+6      	; 0x17cc <malloc+0x60>
    17c6:	42 17       	cp	r20, r18
    17c8:	53 07       	cpc	r21, r19
    17ca:	18 f4       	brcc	.+6      	; 0x17d2 <malloc+0x66>
    17cc:	9a 01       	movw	r18, r20
    17ce:	bd 01       	movw	r22, r26
    17d0:	ef 01       	movw	r28, r30
    17d2:	df 01       	movw	r26, r30
    17d4:	f8 01       	movw	r30, r16
    17d6:	db cf       	rjmp	.-74     	; 0x178e <malloc+0x22>
    17d8:	21 15       	cp	r18, r1
    17da:	31 05       	cpc	r19, r1
    17dc:	f9 f0       	breq	.+62     	; 0x181c <malloc+0xb0>
    17de:	28 1b       	sub	r18, r24
    17e0:	39 0b       	sbc	r19, r25
    17e2:	24 30       	cpi	r18, 0x04	; 4
    17e4:	31 05       	cpc	r19, r1
    17e6:	80 f4       	brcc	.+32     	; 0x1808 <malloc+0x9c>
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	61 15       	cp	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	21 f0       	breq	.+8      	; 0x17fa <malloc+0x8e>
    17f2:	fb 01       	movw	r30, r22
    17f4:	93 83       	std	Z+3, r25	; 0x03
    17f6:	82 83       	std	Z+2, r24	; 0x02
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <malloc+0x96>
    17fa:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <__flp+0x1>
    17fe:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__flp>
    1802:	fe 01       	movw	r30, r28
    1804:	32 96       	adiw	r30, 0x02	; 2
    1806:	44 c0       	rjmp	.+136    	; 0x1890 <malloc+0x124>
    1808:	fe 01       	movw	r30, r28
    180a:	e2 0f       	add	r30, r18
    180c:	f3 1f       	adc	r31, r19
    180e:	81 93       	st	Z+, r24
    1810:	91 93       	st	Z+, r25
    1812:	22 50       	subi	r18, 0x02	; 2
    1814:	31 09       	sbc	r19, r1
    1816:	39 83       	std	Y+1, r19	; 0x01
    1818:	28 83       	st	Y, r18
    181a:	3a c0       	rjmp	.+116    	; 0x1890 <malloc+0x124>
    181c:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <__brkval>
    1820:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <__brkval+0x1>
    1824:	23 2b       	or	r18, r19
    1826:	41 f4       	brne	.+16     	; 0x1838 <malloc+0xcc>
    1828:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    182c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1830:	30 93 b9 03 	sts	0x03B9, r19	; 0x8003b9 <__brkval+0x1>
    1834:	20 93 b8 03 	sts	0x03B8, r18	; 0x8003b8 <__brkval>
    1838:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    183c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	41 f4       	brne	.+16     	; 0x1856 <malloc+0xea>
    1846:	2d b7       	in	r18, 0x3d	; 61
    1848:	3e b7       	in	r19, 0x3e	; 62
    184a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    184e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1852:	24 1b       	sub	r18, r20
    1854:	35 0b       	sbc	r19, r21
    1856:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <__brkval>
    185a:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <__brkval+0x1>
    185e:	e2 17       	cp	r30, r18
    1860:	f3 07       	cpc	r31, r19
    1862:	a0 f4       	brcc	.+40     	; 0x188c <malloc+0x120>
    1864:	2e 1b       	sub	r18, r30
    1866:	3f 0b       	sbc	r19, r31
    1868:	28 17       	cp	r18, r24
    186a:	39 07       	cpc	r19, r25
    186c:	78 f0       	brcs	.+30     	; 0x188c <malloc+0x120>
    186e:	ac 01       	movw	r20, r24
    1870:	4e 5f       	subi	r20, 0xFE	; 254
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	24 17       	cp	r18, r20
    1876:	35 07       	cpc	r19, r21
    1878:	48 f0       	brcs	.+18     	; 0x188c <malloc+0x120>
    187a:	4e 0f       	add	r20, r30
    187c:	5f 1f       	adc	r21, r31
    187e:	50 93 b9 03 	sts	0x03B9, r21	; 0x8003b9 <__brkval+0x1>
    1882:	40 93 b8 03 	sts	0x03B8, r20	; 0x8003b8 <__brkval>
    1886:	81 93       	st	Z+, r24
    1888:	91 93       	st	Z+, r25
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <malloc+0x124>
    188c:	e0 e0       	ldi	r30, 0x00	; 0
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	cf 01       	movw	r24, r30
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <free>:
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <free+0xa>
    18a4:	81 c0       	rjmp	.+258    	; 0x19a8 <free+0x10c>
    18a6:	fc 01       	movw	r30, r24
    18a8:	32 97       	sbiw	r30, 0x02	; 2
    18aa:	13 82       	std	Z+3, r1	; 0x03
    18ac:	12 82       	std	Z+2, r1	; 0x02
    18ae:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <__flp>
    18b2:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <__flp+0x1>
    18b6:	10 97       	sbiw	r26, 0x00	; 0
    18b8:	81 f4       	brne	.+32     	; 0x18da <free+0x3e>
    18ba:	20 81       	ld	r18, Z
    18bc:	31 81       	ldd	r19, Z+1	; 0x01
    18be:	82 0f       	add	r24, r18
    18c0:	93 1f       	adc	r25, r19
    18c2:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <__brkval>
    18c6:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <__brkval+0x1>
    18ca:	28 17       	cp	r18, r24
    18cc:	39 07       	cpc	r19, r25
    18ce:	51 f5       	brne	.+84     	; 0x1924 <free+0x88>
    18d0:	f0 93 b9 03 	sts	0x03B9, r31	; 0x8003b9 <__brkval+0x1>
    18d4:	e0 93 b8 03 	sts	0x03B8, r30	; 0x8003b8 <__brkval>
    18d8:	67 c0       	rjmp	.+206    	; 0x19a8 <free+0x10c>
    18da:	ed 01       	movw	r28, r26
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	ce 17       	cp	r28, r30
    18e2:	df 07       	cpc	r29, r31
    18e4:	40 f4       	brcc	.+16     	; 0x18f6 <free+0x5a>
    18e6:	4a 81       	ldd	r20, Y+2	; 0x02
    18e8:	5b 81       	ldd	r21, Y+3	; 0x03
    18ea:	9e 01       	movw	r18, r28
    18ec:	41 15       	cp	r20, r1
    18ee:	51 05       	cpc	r21, r1
    18f0:	f1 f0       	breq	.+60     	; 0x192e <free+0x92>
    18f2:	ea 01       	movw	r28, r20
    18f4:	f5 cf       	rjmp	.-22     	; 0x18e0 <free+0x44>
    18f6:	d3 83       	std	Z+3, r29	; 0x03
    18f8:	c2 83       	std	Z+2, r28	; 0x02
    18fa:	40 81       	ld	r20, Z
    18fc:	51 81       	ldd	r21, Z+1	; 0x01
    18fe:	84 0f       	add	r24, r20
    1900:	95 1f       	adc	r25, r21
    1902:	c8 17       	cp	r28, r24
    1904:	d9 07       	cpc	r29, r25
    1906:	59 f4       	brne	.+22     	; 0x191e <free+0x82>
    1908:	88 81       	ld	r24, Y
    190a:	99 81       	ldd	r25, Y+1	; 0x01
    190c:	84 0f       	add	r24, r20
    190e:	95 1f       	adc	r25, r21
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	93 83       	std	Z+3, r25	; 0x03
    191c:	82 83       	std	Z+2, r24	; 0x02
    191e:	21 15       	cp	r18, r1
    1920:	31 05       	cpc	r19, r1
    1922:	29 f4       	brne	.+10     	; 0x192e <free+0x92>
    1924:	f0 93 bb 03 	sts	0x03BB, r31	; 0x8003bb <__flp+0x1>
    1928:	e0 93 ba 03 	sts	0x03BA, r30	; 0x8003ba <__flp>
    192c:	3d c0       	rjmp	.+122    	; 0x19a8 <free+0x10c>
    192e:	e9 01       	movw	r28, r18
    1930:	fb 83       	std	Y+3, r31	; 0x03
    1932:	ea 83       	std	Y+2, r30	; 0x02
    1934:	49 91       	ld	r20, Y+
    1936:	59 91       	ld	r21, Y+
    1938:	c4 0f       	add	r28, r20
    193a:	d5 1f       	adc	r29, r21
    193c:	ec 17       	cp	r30, r28
    193e:	fd 07       	cpc	r31, r29
    1940:	61 f4       	brne	.+24     	; 0x195a <free+0xbe>
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	84 0f       	add	r24, r20
    1948:	95 1f       	adc	r25, r21
    194a:	02 96       	adiw	r24, 0x02	; 2
    194c:	e9 01       	movw	r28, r18
    194e:	99 83       	std	Y+1, r25	; 0x01
    1950:	88 83       	st	Y, r24
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	9b 83       	std	Y+3, r25	; 0x03
    1958:	8a 83       	std	Y+2, r24	; 0x02
    195a:	e0 e0       	ldi	r30, 0x00	; 0
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	12 96       	adiw	r26, 0x02	; 2
    1960:	8d 91       	ld	r24, X+
    1962:	9c 91       	ld	r25, X
    1964:	13 97       	sbiw	r26, 0x03	; 3
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	19 f0       	breq	.+6      	; 0x1970 <free+0xd4>
    196a:	fd 01       	movw	r30, r26
    196c:	dc 01       	movw	r26, r24
    196e:	f7 cf       	rjmp	.-18     	; 0x195e <free+0xc2>
    1970:	8d 91       	ld	r24, X+
    1972:	9c 91       	ld	r25, X
    1974:	11 97       	sbiw	r26, 0x01	; 1
    1976:	9d 01       	movw	r18, r26
    1978:	2e 5f       	subi	r18, 0xFE	; 254
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <__brkval>
    1984:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <__brkval+0x1>
    1988:	28 17       	cp	r18, r24
    198a:	39 07       	cpc	r19, r25
    198c:	69 f4       	brne	.+26     	; 0x19a8 <free+0x10c>
    198e:	30 97       	sbiw	r30, 0x00	; 0
    1990:	29 f4       	brne	.+10     	; 0x199c <free+0x100>
    1992:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <__flp+0x1>
    1996:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <__flp>
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <free+0x104>
    199c:	13 82       	std	Z+3, r1	; 0x03
    199e:	12 82       	std	Z+2, r1	; 0x02
    19a0:	b0 93 b9 03 	sts	0x03B9, r27	; 0x8003b9 <__brkval+0x1>
    19a4:	a0 93 b8 03 	sts	0x03B8, r26	; 0x8003b8 <__brkval>
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <memset>:
    19ae:	dc 01       	movw	r26, r24
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <memset+0x6>
    19b2:	6d 93       	st	X+, r22
    19b4:	41 50       	subi	r20, 0x01	; 1
    19b6:	50 40       	sbci	r21, 0x00	; 0
    19b8:	e0 f7       	brcc	.-8      	; 0x19b2 <memset+0x4>
    19ba:	08 95       	ret

000019bc <__do_global_dtors>:
    19bc:	11 e0       	ldi	r17, 0x01	; 1
    19be:	c9 e0       	ldi	r28, 0x09	; 9
    19c0:	d1 e0       	ldi	r29, 0x01	; 1
    19c2:	00 e0       	ldi	r16, 0x00	; 0
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <__do_global_dtors+0x14>
    19c6:	80 2f       	mov	r24, r16
    19c8:	fe 01       	movw	r30, r28
    19ca:	af de       	rcall	.-674    	; 0x172a <__tablejump2__>
    19cc:	21 96       	adiw	r28, 0x01	; 1
    19ce:	01 1d       	adc	r16, r1
    19d0:	ca 30       	cpi	r28, 0x0A	; 10
    19d2:	d1 07       	cpc	r29, r17
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	08 07       	cpc	r16, r24
    19d8:	b1 f7       	brne	.-20     	; 0x19c6 <__do_global_dtors+0xa>
    19da:	f8 94       	cli

000019dc <__stop_program>:
    19dc:	ff cf       	rjmp	.-2      	; 0x19dc <__stop_program>
