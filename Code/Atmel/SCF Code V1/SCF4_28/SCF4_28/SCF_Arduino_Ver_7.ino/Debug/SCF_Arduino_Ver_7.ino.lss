
SCF_Arduino_Ver_7.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800200  00001aaa  00001b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e4  008002a6  008002a6  00001be4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b25a  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002808  00000000  00000000  0000d2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a0d  00000000  00000000  0000faf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d20  00000000  00000000  00012504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d1e  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bbf  00000000  00000000  00015f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0001ab01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	09 c1       	rjmp	.+530    	; 0x214 <__dtors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	2d c1       	rjmp	.+602    	; 0x274 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2b c1       	rjmp	.+598    	; 0x274 <__bad_interrupt>
      1e:	00 00       	nop
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a9 c7       	rjmp	.+3922   	; 0xfb0 <__vector_23>
      5e:	00 00       	nop
      60:	09 c1       	rjmp	.+530    	; 0x274 <__bad_interrupt>
      62:	00 00       	nop
      64:	08 c6       	rjmp	.+3088   	; 0xc76 <__vector_25>
      66:	00 00       	nop
      68:	3c c6       	rjmp	.+3192   	; 0xce2 <__vector_26>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c0       	rjmp	.+474    	; 0x274 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c0       	rjmp	.+470    	; 0x274 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e9 c0       	rjmp	.+466    	; 0x274 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c0       	rjmp	.+462    	; 0x274 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c0       	rjmp	.+458    	; 0x274 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c0       	rjmp	.+454    	; 0x274 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c0       	rjmp	.+446    	; 0x274 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c0       	rjmp	.+442    	; 0x274 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c0       	rjmp	.+438    	; 0x274 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c0       	rjmp	.+434    	; 0x274 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c0       	rjmp	.+430    	; 0x274 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c0       	rjmp	.+426    	; 0x274 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c0       	rjmp	.+422    	; 0x274 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c0       	rjmp	.+418    	; 0x274 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c0       	rjmp	.+414    	; 0x274 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c0       	rjmp	.+410    	; 0x274 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c0       	rjmp	.+406    	; 0x274 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c0       	rjmp	.+402    	; 0x274 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c3 08       	sbc	r12, r3
      e6:	c6 08       	sbc	r12, r6
      e8:	b5 08       	sbc	r11, r5
      ea:	b9 08       	sbc	r11, r9
      ec:	bf 08       	sbc	r11, r15
      ee:	fd 08       	sbc	r15, r13
      f0:	ca 08       	sbc	r12, r10
      f2:	ce 08       	sbc	r12, r14
      f4:	d4 08       	sbc	r13, r4
      f6:	d8 08       	sbc	r13, r8
      f8:	dc 08       	sbc	r13, r12
      fa:	e2 08       	sbc	r14, r2
      fc:	e6 08       	sbc	r14, r6
      fe:	ea 08       	sbc	r14, r10
     100:	fd 08       	sbc	r15, r13
     102:	f0 08       	sbc	r15, r0
     104:	f4 08       	sbc	r15, r4
     106:	f8 08       	sbc	r15, r8

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	ce 04       	cpc	r12, r14
     210:	a3 06       	cpc	r10, r19

00000212 <__ctors_end>:
     212:	d4 04       	cpc	r13, r4

00000214 <__dtors_end>:
     214:	11 24       	eor	r1, r1
     216:	1f be       	out	0x3f, r1	; 63
     218:	cf ef       	ldi	r28, 0xFF	; 255
     21a:	d1 e2       	ldi	r29, 0x21	; 33
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0c bf       	out	0x3c, r16	; 60

00000224 <__do_copy_data>:
     224:	12 e0       	ldi	r17, 0x02	; 2
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b2 e0       	ldi	r27, 0x02	; 2
     22a:	ea ea       	ldi	r30, 0xAA	; 170
     22c:	fa e1       	ldi	r31, 0x1A	; 26
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	0b bf       	out	0x3b, r16	; 59
     232:	02 c0       	rjmp	.+4      	; 0x238 <__do_copy_data+0x14>
     234:	07 90       	elpm	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	a6 3a       	cpi	r26, 0xA6	; 166
     23a:	b1 07       	cpc	r27, r17
     23c:	d9 f7       	brne	.-10     	; 0x234 <__do_copy_data+0x10>

0000023e <__do_clear_bss>:
     23e:	23 e0       	ldi	r18, 0x03	; 3
     240:	a6 ea       	ldi	r26, 0xA6	; 166
     242:	b2 e0       	ldi	r27, 0x02	; 2
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	aa 38       	cpi	r26, 0x8A	; 138
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>

0000024e <__do_global_ctors>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	c9 e0       	ldi	r28, 0x09	; 9
     252:	d1 e0       	ldi	r29, 0x01	; 1
     254:	00 e0       	ldi	r16, 0x00	; 0
     256:	06 c0       	rjmp	.+12     	; 0x264 <__do_global_ctors+0x16>
     258:	21 97       	sbiw	r28, 0x01	; 1
     25a:	01 09       	sbc	r16, r1
     25c:	80 2f       	mov	r24, r16
     25e:	fe 01       	movw	r30, r28
     260:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__tablejump2__>
     264:	c7 30       	cpi	r28, 0x07	; 7
     266:	d1 07       	cpc	r29, r17
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	08 07       	cpc	r16, r24
     26c:	a9 f7       	brne	.-22     	; 0x258 <__do_global_ctors+0xa>
     26e:	99 d5       	rcall	.+2866   	; 0xda2 <main>
     270:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__do_global_dtors>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <setup>:

//Sets each pixel to the color specified in the function call, then turns on the pixel to that color
void setAllLeds(uint8_t *r, uint8_t *g, uint8_t *b) {
  for (int i = 0; i < NUMPIXELS; i++)
    strip.setPixelColor(i, *b, *g, *r);
}
     276:	2f 92       	push	r2
     278:	3f 92       	push	r3
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	26 e0       	ldi	r18, 0x06	; 6
     29c:	40 e8       	ldi	r20, 0x80	; 128
     29e:	54 e8       	ldi	r21, 0x84	; 132
     2a0:	6e e1       	ldi	r22, 0x1E	; 30
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	8e ed       	ldi	r24, 0xDE	; 222
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	83 d4       	rcall	.+2310   	; 0xbb0 <_ZN14HardwareSerial5beginEmh>
     2aa:	8e ec       	ldi	r24, 0xCE	; 206
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN16Adafruit_DotStar5beginEv>
     2b2:	8e ec       	ldi	r24, 0xCE	; 206
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	0e 94 3e 0a 	call	0x147c	; 0x147c <_ZN16Adafruit_DotStar4showEv>
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	84 e0       	ldi	r24, 0x04	; 4
     2be:	9e d7       	rcall	.+3900   	; 0x11fc <pinMode>
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	9b d7       	rcall	.+3894   	; 0x11fc <pinMode>
     2c6:	36 ea       	ldi	r19, 0xA6	; 166
     2c8:	23 2e       	mov	r2, r19
     2ca:	32 e0       	ldi	r19, 0x02	; 2
     2cc:	33 2e       	mov	r3, r19
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
     2d2:	44 e6       	ldi	r20, 0x64	; 100
     2d4:	44 2e       	mov	r4, r20
     2d6:	51 2c       	mov	r5, r1
     2d8:	61 2c       	mov	r6, r1
     2da:	71 2c       	mov	r7, r1
     2dc:	05 e6       	ldi	r16, 0x65	; 101
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	76 01       	movw	r14, r12
     2e6:	01 50       	subi	r16, 0x01	; 1
     2e8:	11 09       	sbc	r17, r1
     2ea:	a1 f1       	breq	.+104    	; 0x354 <setup+0xde>
     2ec:	86 e3       	ldi	r24, 0x36	; 54
     2ee:	0c d7       	rcall	.+3608   	; 0x1108 <analogRead>
     2f0:	88 24       	eor	r8, r8
     2f2:	8a 94       	dec	r8
     2f4:	23 e0       	ldi	r18, 0x03	; 3
     2f6:	92 2e       	mov	r9, r18
     2f8:	88 1a       	sub	r8, r24
     2fa:	99 0a       	sbc	r9, r25
     2fc:	09 2c       	mov	r0, r9
     2fe:	00 0c       	add	r0, r0
     300:	aa 08       	sbc	r10, r10
     302:	bb 08       	sbc	r11, r11
     304:	67 e0       	ldi	r22, 0x07	; 7
     306:	72 e0       	ldi	r23, 0x02	; 2
     308:	8e ed       	ldi	r24, 0xDE	; 222
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	93 d5       	rcall	.+2854   	; 0xe34 <_ZN5Print5printEPKc>
     30e:	2a e0       	ldi	r18, 0x0A	; 10
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	b5 01       	movw	r22, r10
     314:	a4 01       	movw	r20, r8
     316:	8e ed       	ldi	r24, 0xDE	; 222
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	ef d5       	rcall	.+3038   	; 0xefa <_ZN5Print7printlnEmi>
     31c:	60 e1       	ldi	r22, 0x10	; 16
     31e:	72 e0       	ldi	r23, 0x02	; 2
     320:	8e ed       	ldi	r24, 0xDE	; 222
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	87 d5       	rcall	.+2830   	; 0xe34 <_ZN5Print5printEPKc>
     326:	4a e0       	ldi	r20, 0x0A	; 10
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	be 01       	movw	r22, r28
     32c:	8e ed       	ldi	r24, 0xDE	; 222
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	39 d6       	rcall	.+3186   	; 0xfa4 <_ZN5Print5printEii>
     332:	c8 0c       	add	r12, r8
     334:	d9 1c       	adc	r13, r9
     336:	ea 1c       	adc	r14, r10
     338:	fb 1c       	adc	r15, r11
     33a:	66 e1       	ldi	r22, 0x16	; 22
     33c:	72 e0       	ldi	r23, 0x02	; 2
     33e:	8e ed       	ldi	r24, 0xDE	; 222
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	78 d5       	rcall	.+2800   	; 0xe34 <_ZN5Print5printEPKc>
     344:	2a e0       	ldi	r18, 0x0A	; 10
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	b7 01       	movw	r22, r14
     34a:	a6 01       	movw	r20, r12
     34c:	8e ed       	ldi	r24, 0xDE	; 222
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	c3 d5       	rcall	.+2950   	; 0xed8 <_ZN5Print5printEmi>
     352:	c9 cf       	rjmp	.-110    	; 0x2e6 <setup+0x70>
     354:	6d e1       	ldi	r22, 0x1D	; 29
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	8e ed       	ldi	r24, 0xDE	; 222
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	6b d5       	rcall	.+2774   	; 0xe34 <_ZN5Print5printEPKc>
     35e:	4a e0       	ldi	r20, 0x0A	; 10
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	64 e6       	ldi	r22, 0x64	; 100
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	8e ed       	ldi	r24, 0xDE	; 222
     368:	92 e0       	ldi	r25, 0x02	; 2
     36a:	1c d6       	rcall	.+3128   	; 0xfa4 <_ZN5Print5printEii>
     36c:	c7 01       	movw	r24, r14
     36e:	b6 01       	movw	r22, r12
     370:	a3 01       	movw	r20, r6
     372:	92 01       	movw	r18, r4
     374:	0e 94 bd 0b 	call	0x177a	; 0x177a <__udivmodsi4>
     378:	69 01       	movw	r12, r18
     37a:	7a 01       	movw	r14, r20
     37c:	67 e2       	ldi	r22, 0x27	; 39
     37e:	72 e0       	ldi	r23, 0x02	; 2
     380:	8e ed       	ldi	r24, 0xDE	; 222
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	57 d5       	rcall	.+2734   	; 0xe34 <_ZN5Print5printEPKc>
     386:	2a e0       	ldi	r18, 0x0A	; 10
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	b7 01       	movw	r22, r14
     38c:	a6 01       	movw	r20, r12
     38e:	8e ed       	ldi	r24, 0xDE	; 222
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	b3 d5       	rcall	.+2918   	; 0xefa <_ZN5Print7printlnEmi>
     394:	f1 01       	movw	r30, r2
     396:	c1 92       	st	Z+, r12
     398:	d1 92       	st	Z+, r13
     39a:	e1 92       	st	Z+, r14
     39c:	f1 92       	st	Z+, r15
     39e:	1f 01       	movw	r2, r30
     3a0:	21 96       	adiw	r28, 0x01	; 1
     3a2:	ca 30       	cpi	r28, 0x0A	; 10
     3a4:	d1 05       	cpc	r29, r1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <setup+0x134>
     3a8:	99 cf       	rjmp	.-206    	; 0x2dc <setup+0x66>
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	9f 90       	pop	r9
     3c0:	8f 90       	pop	r8
     3c2:	7f 90       	pop	r7
     3c4:	6f 90       	pop	r6
     3c6:	5f 90       	pop	r5
     3c8:	4f 90       	pop	r4
     3ca:	3f 90       	pop	r3
     3cc:	2f 90       	pop	r2
     3ce:	08 95       	ret

000003d0 <_Z13setLedPortionPhS_S_i>:

//Sets portion of LEDS based on provided section ie. n = 0, is the first 11 LEDS
void setLedPortion(uint8_t *r, uint8_t *g, uint8_t *b, int n) {
     3d0:	8f 92       	push	r8
     3d2:	9f 92       	push	r9
     3d4:	af 92       	push	r10
     3d6:	bf 92       	push	r11
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	5c 01       	movw	r10, r24
     3e8:	6b 01       	movw	r12, r22
     3ea:	7a 01       	movw	r14, r20
  //Each sensor has about 11 LEDS
  for (int i = n * 11; i < 11 + (11 * n);  i++)
     3ec:	8b e0       	ldi	r24, 0x0B	; 11
     3ee:	82 9f       	mul	r24, r18
     3f0:	e0 01       	movw	r28, r0
     3f2:	83 9f       	mul	r24, r19
     3f4:	d0 0d       	add	r29, r0
     3f6:	11 24       	eor	r1, r1
     3f8:	4e 01       	movw	r8, r28
     3fa:	8b e0       	ldi	r24, 0x0B	; 11
     3fc:	88 0e       	add	r8, r24
     3fe:	91 1c       	adc	r9, r1
     400:	c8 15       	cp	r28, r8
     402:	d9 05       	cpc	r29, r9
     404:	6c f4       	brge	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
  {
    strip.setPixelColor(i, *b, *g, *r);
     406:	f5 01       	movw	r30, r10
     408:	00 81       	ld	r16, Z
     40a:	f6 01       	movw	r30, r12
     40c:	20 81       	ld	r18, Z
     40e:	f7 01       	movw	r30, r14
     410:	40 81       	ld	r20, Z
     412:	be 01       	movw	r22, r28
     414:	8e ec       	ldi	r24, 0xCE	; 206
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0e 94 47 0b 	call	0x168e	; 0x168e <_ZN16Adafruit_DotStar13setPixelColorEjhhh>
}

//Sets portion of LEDS based on provided section ie. n = 0, is the first 11 LEDS
void setLedPortion(uint8_t *r, uint8_t *g, uint8_t *b, int n) {
  //Each sensor has about 11 LEDS
  for (int i = n * 11; i < 11 + (11 * n);  i++)
     41c:	21 96       	adiw	r28, 0x01	; 1
     41e:	f0 cf       	rjmp	.-32     	; 0x400 <__LOCK_REGION_LENGTH__>
  {
    strip.setPixelColor(i, *b, *g, *r);
  }
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	bf 90       	pop	r11
     430:	af 90       	pop	r10
     432:	9f 90       	pop	r9
     434:	8f 90       	pop	r8
     436:	08 95       	ret

00000438 <_Z8colormapjPhS_S_>:

//colormap function to map the spectrum based on the provided temp input
void colormap(uint16_t i, uint8_t *r, uint8_t *g, uint8_t *b)
{
     438:	6f 92       	push	r6
     43a:	7f 92       	push	r7
     43c:	8f 92       	push	r8
     43e:	9f 92       	push	r9
     440:	af 92       	push	r10
     442:	bf 92       	push	r11
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	fc 01       	movw	r30, r24
     456:	3b 01       	movw	r6, r22
     458:	ea 01       	movw	r28, r20
     45a:	49 01       	movw	r8, r18
     45c:	bc 01       	movw	r22, r24
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t v;
  if (i < 300)
     462:	ec 32       	cpi	r30, 0x2C	; 44
     464:	f1 40       	sbci	r31, 0x01	; 1
     466:	c8 f4       	brcc	.+50     	; 0x49a <_Z8colormapjPhS_S_+0x62>
  {
    v = map(i, 0, 300, 0, 255);
     468:	1f 92       	push	r1
     46a:	1f 92       	push	r1
     46c:	1f 92       	push	r1
     46e:	2f ef       	ldi	r18, 0xFF	; 255
     470:	2f 93       	push	r18
     472:	a1 2c       	mov	r10, r1
     474:	b1 2c       	mov	r11, r1
     476:	65 01       	movw	r12, r10
     478:	1c e2       	ldi	r17, 0x2C	; 44
     47a:	e1 2e       	mov	r14, r17
     47c:	ff 24       	eor	r15, r15
     47e:	f3 94       	inc	r15
     480:	00 e0       	ldi	r16, 0x00	; 0
     482:	10 e0       	ldi	r17, 0x00	; 0
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	a9 01       	movw	r20, r18
     48a:	22 d7       	rcall	.+3652   	; 0x12d0 <_Z3maplllll>
    //b,g,r
    //strip.setPixelColor(0,255-v,v,0);
    *r = 0;
     48c:	f3 01       	movw	r30, r6
     48e:	10 82       	st	Z, r1
    *b = 255 - v;
     490:	86 2f       	mov	r24, r22
     492:	80 95       	com	r24
     494:	f4 01       	movw	r30, r8
     496:	80 83       	st	Z, r24
     498:	18 c0       	rjmp	.+48     	; 0x4ca <_Z8colormapjPhS_S_+0x92>

  }
  else //>301
  {
    //      //g-r
    v = map(i, 301, 400, 0, 255);
     49a:	1f 92       	push	r1
     49c:	1f 92       	push	r1
     49e:	1f 92       	push	r1
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	2f 93       	push	r18
     4a4:	a1 2c       	mov	r10, r1
     4a6:	b1 2c       	mov	r11, r1
     4a8:	65 01       	movw	r12, r10
     4aa:	10 e9       	ldi	r17, 0x90	; 144
     4ac:	e1 2e       	mov	r14, r17
     4ae:	ff 24       	eor	r15, r15
     4b0:	f3 94       	inc	r15
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	2d e2       	ldi	r18, 0x2D	; 45
     4b8:	31 e0       	ldi	r19, 0x01	; 1
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	08 d7       	rcall	.+3600   	; 0x12d0 <_Z3maplllll>
    // b,g,r
    *r = v;
     4c0:	f3 01       	movw	r30, r6
     4c2:	60 83       	st	Z, r22
    *b = 0;
     4c4:	f4 01       	movw	r30, r8
     4c6:	10 82       	st	Z, r1
    *g = 255 - v;
     4c8:	60 95       	com	r22
     4ca:	68 83       	st	Y, r22
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
  }
}  
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	7f 90       	pop	r7
     4ee:	6f 90       	pop	r6
     4f0:	08 95       	ret

000004f2 <loop>:
    temps[i] = average;
    average = 0;
    sumAvg = 0;
  }
}
void loop() {
     4f2:	2f 92       	push	r2
     4f4:	3f 92       	push	r3
     4f6:	4f 92       	push	r4
     4f8:	5f 92       	push	r5
     4fa:	6f 92       	push	r6
     4fc:	7f 92       	push	r7
     4fe:	8f 92       	push	r8
     500:	9f 92       	push	r9
     502:	af 92       	push	r10
     504:	bf 92       	push	r11
     506:	cf 92       	push	r12
     508:	df 92       	push	r13
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	00 d0       	rcall	.+0      	; 0x518 <loop+0x26>
     518:	1f 92       	push	r1
     51a:	1f 92       	push	r1
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
  //0-200 blue->green
  //201-3ff green-> red
  uint8_t r, g, b; //setup of r,g,b variables
  //Store the ADC value of each array into a 16 bit integer variable
  uint16_t temp0 = analogRead(A4);
     520:	8a e3       	ldi	r24, 0x3A	; 58
     522:	f2 d5       	rcall	.+3044   	; 0x1108 <analogRead>
  uint16_t temp1 = analogRead(A3);
     524:	4c 01       	movw	r8, r24
     526:	89 e3       	ldi	r24, 0x39	; 57
  uint16_t temp2 = analogRead(A2);
     528:	ef d5       	rcall	.+3038   	; 0x1108 <analogRead>
     52a:	5c 01       	movw	r10, r24
     52c:	88 e3       	ldi	r24, 0x38	; 56
  uint16_t temp3 = analogRead(A1);
     52e:	ec d5       	rcall	.+3032   	; 0x1108 <analogRead>
     530:	6c 01       	movw	r12, r24
  uint16_t temp4 = analogRead(A0);
     532:	87 e3       	ldi	r24, 0x37	; 55
     534:	e9 d5       	rcall	.+3026   	; 0x1108 <analogRead>
  uint16_t temp5 = analogRead(A9);
     536:	7c 01       	movw	r14, r24
     538:	86 e3       	ldi	r24, 0x36	; 54
     53a:	e6 d5       	rcall	.+3020   	; 0x1108 <analogRead>
  uint16_t temp6 = analogRead(A8);
     53c:	8c 01       	movw	r16, r24
     53e:	8f e3       	ldi	r24, 0x3F	; 63
     540:	e3 d5       	rcall	.+3014   	; 0x1108 <analogRead>
  uint16_t temp7 = analogRead(A7);
     542:	3c 01       	movw	r6, r24
     544:	8e e3       	ldi	r24, 0x3E	; 62
     546:	e0 d5       	rcall	.+3008   	; 0x1108 <analogRead>
     548:	2c 01       	movw	r4, r24
  uint16_t temp8 = analogRead(A6);
     54a:	8d e3       	ldi	r24, 0x3D	; 61
     54c:	dd d5       	rcall	.+3002   	; 0x1108 <analogRead>
     54e:	1c 01       	movw	r2, r24
  //UNUSED Currently uint16_t temp9 = analogRead(A5);

  //Reading from OP Amp is inverted, so 1023-temp gives the actual reading
  uint16_t adc0 = (1023 - temp0);
     550:	8c e3       	ldi	r24, 0x3C	; 60
     552:	da d5       	rcall	.+2996   	; 0x1108 <analogRead>
     554:	2f ef       	ldi	r18, 0xFF	; 255
     556:	33 e0       	ldi	r19, 0x03	; 3
     558:	a9 01       	movw	r20, r18
     55a:	48 19       	sub	r20, r8
  uint16_t adc1 = 1023 - temp1;
     55c:	59 09       	sbc	r21, r9
     55e:	4a 01       	movw	r8, r20
     560:	a9 01       	movw	r20, r18
     562:	4a 19       	sub	r20, r10
  uint16_t adc2 = 1023 - temp2;
     564:	5b 09       	sbc	r21, r11
     566:	5a 01       	movw	r10, r20
     568:	a9 01       	movw	r20, r18
     56a:	4c 19       	sub	r20, r12
  uint16_t adc3 = 1023 - temp3;
     56c:	5d 09       	sbc	r21, r13
     56e:	6a 01       	movw	r12, r20
     570:	a9 01       	movw	r20, r18
     572:	4e 19       	sub	r20, r14
  uint16_t adc4 = 1023 - temp4;
     574:	5f 09       	sbc	r21, r15
     576:	7a 01       	movw	r14, r20
     578:	a9 01       	movw	r20, r18
     57a:	40 1b       	sub	r20, r16
  uint16_t adc5 = 1023 - temp5;
     57c:	51 0b       	sbc	r21, r17
     57e:	8a 01       	movw	r16, r20
     580:	a9 01       	movw	r20, r18
     582:	46 19       	sub	r20, r6
  uint16_t adc6 = 1023 - temp6;
     584:	57 09       	sbc	r21, r7
     586:	3a 01       	movw	r6, r20
     588:	a9 01       	movw	r20, r18
     58a:	44 19       	sub	r20, r4
  uint16_t adc7 = 1023 - temp7;
     58c:	55 09       	sbc	r21, r5
     58e:	2a 01       	movw	r4, r20
     590:	a9 01       	movw	r20, r18
  uint16_t adc8 = 1023 - temp8;
     592:	42 19       	sub	r20, r2
     594:	53 09       	sbc	r21, r3
     596:	1a 01       	movw	r2, r20
     598:	a9 01       	movw	r20, r18
  //UNUSED Currently uint16_t avg9 = 1023-temp9;

  //Print the ADC value of each array to the serial monitor
  Serial.print("\ntemp0: ");
     59a:	48 1b       	sub	r20, r24
     59c:	59 0b       	sbc	r21, r25
     59e:	5d 83       	std	Y+5, r21	; 0x05
     5a0:	4c 83       	std	Y+4, r20	; 0x04
  Serial.print(adc0);
     5a2:	64 e3       	ldi	r22, 0x34	; 52
     5a4:	72 e0       	ldi	r23, 0x02	; 2
     5a6:	8e ed       	ldi	r24, 0xDE	; 222
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	44 d4       	rcall	.+2184   	; 0xe34 <_ZN5Print5printEPKc>
  Serial.print("\ttemp1: ");
     5ac:	4a e0       	ldi	r20, 0x0A	; 10
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	b4 01       	movw	r22, r8
     5b2:	8e ed       	ldi	r24, 0xDE	; 222
     5b4:	92 e0       	ldi	r25, 0x02	; 2
  Serial.print(adc1);
     5b6:	9c d4       	rcall	.+2360   	; 0xef0 <_ZN5Print5printEji>
     5b8:	6d e3       	ldi	r22, 0x3D	; 61
     5ba:	72 e0       	ldi	r23, 0x02	; 2
     5bc:	8e ed       	ldi	r24, 0xDE	; 222
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	39 d4       	rcall	.+2162   	; 0xe34 <_ZN5Print5printEPKc>
  Serial.print("\ttemp2: ");
     5c2:	4a e0       	ldi	r20, 0x0A	; 10
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	b5 01       	movw	r22, r10
     5c8:	8e ed       	ldi	r24, 0xDE	; 222
     5ca:	92 e0       	ldi	r25, 0x02	; 2
  Serial.print(adc2);
     5cc:	91 d4       	rcall	.+2338   	; 0xef0 <_ZN5Print5printEji>
     5ce:	66 e4       	ldi	r22, 0x46	; 70
     5d0:	72 e0       	ldi	r23, 0x02	; 2
     5d2:	8e ed       	ldi	r24, 0xDE	; 222
     5d4:	92 e0       	ldi	r25, 0x02	; 2
  Serial.print("\ttemp3: ");
     5d6:	2e d4       	rcall	.+2140   	; 0xe34 <_ZN5Print5printEPKc>
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	b6 01       	movw	r22, r12
  Serial.print(adc3);
     5de:	8e ed       	ldi	r24, 0xDE	; 222
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	86 d4       	rcall	.+2316   	; 0xef0 <_ZN5Print5printEji>
     5e4:	6f e4       	ldi	r22, 0x4F	; 79
     5e6:	72 e0       	ldi	r23, 0x02	; 2
  Serial.print("\ttemp4: ");
     5e8:	8e ed       	ldi	r24, 0xDE	; 222
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	23 d4       	rcall	.+2118   	; 0xe34 <_ZN5Print5printEPKc>
     5ee:	4a e0       	ldi	r20, 0x0A	; 10
     5f0:	50 e0       	ldi	r21, 0x00	; 0
  Serial.print(adc4);
     5f2:	b7 01       	movw	r22, r14
     5f4:	8e ed       	ldi	r24, 0xDE	; 222
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	7b d4       	rcall	.+2294   	; 0xef0 <_ZN5Print5printEji>
     5fa:	68 e5       	ldi	r22, 0x58	; 88
     5fc:	72 e0       	ldi	r23, 0x02	; 2
  Serial.print("\ttemp5: ");
     5fe:	8e ed       	ldi	r24, 0xDE	; 222
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	18 d4       	rcall	.+2096   	; 0xe34 <_ZN5Print5printEPKc>
     604:	4a e0       	ldi	r20, 0x0A	; 10
     606:	50 e0       	ldi	r21, 0x00	; 0
  Serial.print(adc5);
     608:	b8 01       	movw	r22, r16
     60a:	8e ed       	ldi	r24, 0xDE	; 222
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	70 d4       	rcall	.+2272   	; 0xef0 <_ZN5Print5printEji>
     610:	61 e6       	ldi	r22, 0x61	; 97
  Serial.print("\ttemp6: ");
     612:	72 e0       	ldi	r23, 0x02	; 2
     614:	8e ed       	ldi	r24, 0xDE	; 222
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0d d4       	rcall	.+2074   	; 0xe34 <_ZN5Print5printEPKc>
  Serial.print(adc6);
     61a:	4a e0       	ldi	r20, 0x0A	; 10
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	b3 01       	movw	r22, r6
     620:	8e ed       	ldi	r24, 0xDE	; 222
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	65 d4       	rcall	.+2250   	; 0xef0 <_ZN5Print5printEji>
  Serial.print("\ttemp7: ");
     626:	6a e6       	ldi	r22, 0x6A	; 106
     628:	72 e0       	ldi	r23, 0x02	; 2
     62a:	8e ed       	ldi	r24, 0xDE	; 222
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	02 d4       	rcall	.+2052   	; 0xe34 <_ZN5Print5printEPKc>
     630:	4a e0       	ldi	r20, 0x0A	; 10
  Serial.print(adc7);
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	b2 01       	movw	r22, r4
     636:	8e ed       	ldi	r24, 0xDE	; 222
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	5a d4       	rcall	.+2228   	; 0xef0 <_ZN5Print5printEji>
     63c:	63 e7       	ldi	r22, 0x73	; 115
     63e:	72 e0       	ldi	r23, 0x02	; 2
  Serial.print("\ttemp8: ");
     640:	8e ed       	ldi	r24, 0xDE	; 222
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	f7 d3       	rcall	.+2030   	; 0xe34 <_ZN5Print5printEPKc>
     646:	4a e0       	ldi	r20, 0x0A	; 10
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	b1 01       	movw	r22, r2
  Serial.print(adc8);
     64c:	8e ed       	ldi	r24, 0xDE	; 222
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	4f d4       	rcall	.+2206   	; 0xef0 <_ZN5Print5printEji>
     652:	6c e7       	ldi	r22, 0x7C	; 124
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	8e ed       	ldi	r24, 0xDE	; 222
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	ec d3       	rcall	.+2008   	; 0xe34 <_ZN5Print5printEPKc>
  //     setAllLeds(255,0,0);
  //     strip.show();
  //    }

//test for ttl output 
if (adc0 >= temps[0]+9 || adc1 >= temps[1]+9 || adc2 >= temps[2]+9 || adc3 >= temps[3]+9 || adc4 >= temps[4]+9 || 
     65c:	4a e0       	ldi	r20, 0x0A	; 10
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	6c 81       	ldd	r22, Y+4	; 0x04
     662:	7d 81       	ldd	r23, Y+5	; 0x05
     664:	8e ed       	ldi	r24, 0xDE	; 222
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	43 d4       	rcall	.+2182   	; 0xef0 <_ZN5Print5printEji>
     66a:	a4 01       	movw	r20, r8
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__data_end>
     674:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <__data_end+0x1>
     678:	a0 91 a8 02 	lds	r26, 0x02A8	; 0x8002a8 <__data_end+0x2>
     67c:	b0 91 a9 02 	lds	r27, 0x02A9	; 0x8002a9 <__data_end+0x3>
     680:	09 96       	adiw	r24, 0x09	; 9
     682:	a1 1d       	adc	r26, r1
     684:	b1 1d       	adc	r27, r1
     686:	48 17       	cp	r20, r24
     688:	59 07       	cpc	r21, r25
     68a:	6a 07       	cpc	r22, r26
     68c:	7b 07       	cpc	r23, r27
     68e:	08 f0       	brcs	.+2      	; 0x692 <loop+0x1a0>
     690:	9e c0       	rjmp	.+316    	; 0x7ce <loop+0x2dc>
     692:	a5 01       	movw	r20, r10
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end+0x4>
     69c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x5>
     6a0:	a0 91 ac 02 	lds	r26, 0x02AC	; 0x8002ac <__data_end+0x6>
     6a4:	b0 91 ad 02 	lds	r27, 0x02AD	; 0x8002ad <__data_end+0x7>
     6a8:	09 96       	adiw	r24, 0x09	; 9
     6aa:	a1 1d       	adc	r26, r1
     6ac:	b1 1d       	adc	r27, r1
     6ae:	48 17       	cp	r20, r24
     6b0:	59 07       	cpc	r21, r25
     6b2:	6a 07       	cpc	r22, r26
     6b4:	7b 07       	cpc	r23, r27
     6b6:	08 f0       	brcs	.+2      	; 0x6ba <loop+0x1c8>
     6b8:	8a c0       	rjmp	.+276    	; 0x7ce <loop+0x2dc>
     6ba:	a6 01       	movw	r20, r12
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <__data_end+0x8>
     6c4:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <__data_end+0x9>
     6c8:	a0 91 b0 02 	lds	r26, 0x02B0	; 0x8002b0 <__data_end+0xa>
     6cc:	b0 91 b1 02 	lds	r27, 0x02B1	; 0x8002b1 <__data_end+0xb>
     6d0:	09 96       	adiw	r24, 0x09	; 9
     6d2:	a1 1d       	adc	r26, r1
     6d4:	b1 1d       	adc	r27, r1
     6d6:	48 17       	cp	r20, r24
     6d8:	59 07       	cpc	r21, r25
     6da:	6a 07       	cpc	r22, r26
     6dc:	7b 07       	cpc	r23, r27
     6de:	08 f0       	brcs	.+2      	; 0x6e2 <loop+0x1f0>
     6e0:	76 c0       	rjmp	.+236    	; 0x7ce <loop+0x2dc>
     6e2:	a7 01       	movw	r20, r14
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end+0xc>
     6ec:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <__data_end+0xd>
     6f0:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <__data_end+0xe>
     6f4:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <__data_end+0xf>
     6f8:	09 96       	adiw	r24, 0x09	; 9
     6fa:	a1 1d       	adc	r26, r1
     6fc:	b1 1d       	adc	r27, r1
     6fe:	48 17       	cp	r20, r24
     700:	59 07       	cpc	r21, r25
     702:	6a 07       	cpc	r22, r26
     704:	7b 07       	cpc	r23, r27
     706:	08 f0       	brcs	.+2      	; 0x70a <loop+0x218>
     708:	62 c0       	rjmp	.+196    	; 0x7ce <loop+0x2dc>
     70a:	a8 01       	movw	r20, r16
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end+0x10>
     714:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__data_end+0x11>
     718:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <__data_end+0x12>
     71c:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <__data_end+0x13>
     720:	09 96       	adiw	r24, 0x09	; 9
     722:	a1 1d       	adc	r26, r1
     724:	b1 1d       	adc	r27, r1
     726:	48 17       	cp	r20, r24
     728:	59 07       	cpc	r21, r25
     72a:	6a 07       	cpc	r22, r26
     72c:	7b 07       	cpc	r23, r27
     72e:	08 f0       	brcs	.+2      	; 0x732 <loop+0x240>
     730:	4e c0       	rjmp	.+156    	; 0x7ce <loop+0x2dc>
     732:	a3 01       	movw	r20, r6
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <__data_end+0x14>
     73c:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <__data_end+0x15>
     740:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <__data_end+0x16>
     744:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <__data_end+0x17>
     748:	09 96       	adiw	r24, 0x09	; 9
adc5 >= temps[5]+9 || adc6 >= temps[6]+9 || adc7 >= temps[7]+9 || adc8 >= temps[8]+9 )
     74a:	a1 1d       	adc	r26, r1
     74c:	b1 1d       	adc	r27, r1
     74e:	48 17       	cp	r20, r24
     750:	59 07       	cpc	r21, r25
     752:	6a 07       	cpc	r22, r26
     754:	7b 07       	cpc	r23, r27
     756:	d8 f5       	brcc	.+118    	; 0x7ce <loop+0x2dc>
     758:	a2 01       	movw	r20, r4
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end+0x18>
     762:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__data_end+0x19>
     766:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <__data_end+0x1a>
     76a:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <__data_end+0x1b>
     76e:	09 96       	adiw	r24, 0x09	; 9
     770:	a1 1d       	adc	r26, r1
     772:	b1 1d       	adc	r27, r1
     774:	48 17       	cp	r20, r24
     776:	59 07       	cpc	r21, r25
     778:	6a 07       	cpc	r22, r26
     77a:	7b 07       	cpc	r23, r27
     77c:	40 f5       	brcc	.+80     	; 0x7ce <loop+0x2dc>
     77e:	a1 01       	movw	r20, r2
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end+0x1c>
     788:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__data_end+0x1d>
     78c:	a0 91 c4 02 	lds	r26, 0x02C4	; 0x8002c4 <__data_end+0x1e>
     790:	b0 91 c5 02 	lds	r27, 0x02C5	; 0x8002c5 <__data_end+0x1f>
     794:	09 96       	adiw	r24, 0x09	; 9
     796:	a1 1d       	adc	r26, r1
     798:	b1 1d       	adc	r27, r1
     79a:	48 17       	cp	r20, r24
     79c:	59 07       	cpc	r21, r25
     79e:	6a 07       	cpc	r22, r26
     7a0:	7b 07       	cpc	r23, r27
     7a2:	a8 f4       	brcc	.+42     	; 0x7ce <loop+0x2dc>
     7a4:	8c 81       	ldd	r24, Y+4	; 0x04
     7a6:	9d 81       	ldd	r25, Y+5	; 0x05
     7a8:	ac 01       	movw	r20, r24
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__data_end+0x20>
     7b2:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <__data_end+0x21>
     7b6:	a0 91 c8 02 	lds	r26, 0x02C8	; 0x8002c8 <__data_end+0x22>
{
  digitalWrite(5,HIGH);
     7ba:	b0 91 c9 02 	lds	r27, 0x02C9	; 0x8002c9 <__data_end+0x23>
}
else
{
  digitalWrite(5,LOW);
     7be:	09 96       	adiw	r24, 0x09	; 9
     7c0:	a1 1d       	adc	r26, r1
     7c2:	b1 1d       	adc	r27, r1
     7c4:	48 17       	cp	r20, r24



  //Color Mapping
  //Send the colormap function the specific avg, and the r,g,b variables addressed
  colormap(adc0, &r, &g, &b);
     7c6:	59 07       	cpc	r21, r25
     7c8:	6a 07       	cpc	r22, r26
     7ca:	7b 07       	cpc	r23, r27
     7cc:	10 f0       	brcs	.+4      	; 0x7d2 <loop+0x2e0>
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <loop+0x2e2>
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	4e d5       	rcall	.+2716   	; 0x1274 <digitalWrite>
     7d8:	9e 01       	movw	r18, r28
     7da:	2f 5f       	subi	r18, 0xFF	; 255
  setLedPortion(&r, &g, &b, 1);
     7dc:	3f 4f       	sbci	r19, 0xFF	; 255
     7de:	ae 01       	movw	r20, r28
     7e0:	4e 5f       	subi	r20, 0xFE	; 254
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	be 01       	movw	r22, r28
     7e6:	6d 5f       	subi	r22, 0xFD	; 253
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	c4 01       	movw	r24, r8
     7ec:	25 de       	rcall	.-950    	; 0x438 <_Z8colormapjPhS_S_>
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	30 e0       	ldi	r19, 0x00	; 0
  colormap(adc1, &r, &g, &b);
     7f2:	ae 01       	movw	r20, r28
     7f4:	4f 5f       	subi	r20, 0xFF	; 255
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	be 01       	movw	r22, r28
     7fa:	6e 5f       	subi	r22, 0xFE	; 254
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	ce 01       	movw	r24, r28
     800:	03 96       	adiw	r24, 0x03	; 3
     802:	e6 dd       	rcall	.-1076   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
     804:	9e 01       	movw	r18, r28
     806:	2f 5f       	subi	r18, 0xFF	; 255
  setLedPortion(&r, &g, &b, 2);
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	ae 01       	movw	r20, r28
     80c:	4e 5f       	subi	r20, 0xFE	; 254
     80e:	5f 4f       	sbci	r21, 0xFF	; 255
     810:	be 01       	movw	r22, r28
     812:	6d 5f       	subi	r22, 0xFD	; 253
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	c5 01       	movw	r24, r10
     818:	0f de       	rcall	.-994    	; 0x438 <_Z8colormapjPhS_S_>
     81a:	22 e0       	ldi	r18, 0x02	; 2
  colormap(adc2, &r, &g, &b);
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	ae 01       	movw	r20, r28
     820:	4f 5f       	subi	r20, 0xFF	; 255
     822:	5f 4f       	sbci	r21, 0xFF	; 255
     824:	be 01       	movw	r22, r28
     826:	6e 5f       	subi	r22, 0xFE	; 254
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	ce 01       	movw	r24, r28
     82c:	03 96       	adiw	r24, 0x03	; 3
     82e:	d0 dd       	rcall	.-1120   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
  setLedPortion(&r, &g, &b, 3);
     830:	9e 01       	movw	r18, r28
     832:	2f 5f       	subi	r18, 0xFF	; 255
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	ae 01       	movw	r20, r28
     838:	4e 5f       	subi	r20, 0xFE	; 254
     83a:	5f 4f       	sbci	r21, 0xFF	; 255
     83c:	be 01       	movw	r22, r28
     83e:	6d 5f       	subi	r22, 0xFD	; 253
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	c6 01       	movw	r24, r12
     844:	f9 dd       	rcall	.-1038   	; 0x438 <_Z8colormapjPhS_S_>
  colormap(adc3, &r, &g, &b);
     846:	23 e0       	ldi	r18, 0x03	; 3
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	ae 01       	movw	r20, r28
     84c:	4f 5f       	subi	r20, 0xFF	; 255
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	be 01       	movw	r22, r28
     852:	6e 5f       	subi	r22, 0xFE	; 254
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	ce 01       	movw	r24, r28
     858:	03 96       	adiw	r24, 0x03	; 3
     85a:	ba dd       	rcall	.-1164   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
  setLedPortion(&r, &g, &b, 4);
     85c:	9e 01       	movw	r18, r28
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	ae 01       	movw	r20, r28
     864:	4e 5f       	subi	r20, 0xFE	; 254
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	be 01       	movw	r22, r28
     86a:	6d 5f       	subi	r22, 0xFD	; 253
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	c7 01       	movw	r24, r14
     870:	e3 dd       	rcall	.-1082   	; 0x438 <_Z8colormapjPhS_S_>
  colormap(adc4, &r, &g, &b);
     872:	24 e0       	ldi	r18, 0x04	; 4
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	ae 01       	movw	r20, r28
     878:	4f 5f       	subi	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	be 01       	movw	r22, r28
     87e:	6e 5f       	subi	r22, 0xFE	; 254
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	ce 01       	movw	r24, r28
     884:	03 96       	adiw	r24, 0x03	; 3
     886:	a4 dd       	rcall	.-1208   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
  setLedPortion(&r, &g, &b, 5);
     888:	9e 01       	movw	r18, r28
     88a:	2f 5f       	subi	r18, 0xFF	; 255
     88c:	3f 4f       	sbci	r19, 0xFF	; 255
     88e:	ae 01       	movw	r20, r28
     890:	4e 5f       	subi	r20, 0xFE	; 254
     892:	5f 4f       	sbci	r21, 0xFF	; 255
     894:	be 01       	movw	r22, r28
     896:	6d 5f       	subi	r22, 0xFD	; 253
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	c8 01       	movw	r24, r16
     89c:	cd dd       	rcall	.-1126   	; 0x438 <_Z8colormapjPhS_S_>
  colormap(adc5, &r, &g, &b);
     89e:	25 e0       	ldi	r18, 0x05	; 5
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	ae 01       	movw	r20, r28
     8a4:	4f 5f       	subi	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	be 01       	movw	r22, r28
     8aa:	6e 5f       	subi	r22, 0xFE	; 254
     8ac:	7f 4f       	sbci	r23, 0xFF	; 255
     8ae:	ce 01       	movw	r24, r28
     8b0:	03 96       	adiw	r24, 0x03	; 3
     8b2:	8e dd       	rcall	.-1252   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
  setLedPortion(&r, &g, &b, 6);
     8b4:	9e 01       	movw	r18, r28
     8b6:	2f 5f       	subi	r18, 0xFF	; 255
     8b8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ba:	ae 01       	movw	r20, r28
     8bc:	4e 5f       	subi	r20, 0xFE	; 254
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	be 01       	movw	r22, r28
     8c2:	6d 5f       	subi	r22, 0xFD	; 253
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	c3 01       	movw	r24, r6
     8c8:	b7 dd       	rcall	.-1170   	; 0x438 <_Z8colormapjPhS_S_>
  colormap(adc6, &r, &g, &b);
     8ca:	26 e0       	ldi	r18, 0x06	; 6
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	ae 01       	movw	r20, r28
     8d0:	4f 5f       	subi	r20, 0xFF	; 255
     8d2:	5f 4f       	sbci	r21, 0xFF	; 255
     8d4:	be 01       	movw	r22, r28
     8d6:	6e 5f       	subi	r22, 0xFE	; 254
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	ce 01       	movw	r24, r28
     8dc:	03 96       	adiw	r24, 0x03	; 3
     8de:	78 dd       	rcall	.-1296   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
  setLedPortion(&r, &g, &b, 7);
     8e0:	9e 01       	movw	r18, r28
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	ae 01       	movw	r20, r28
     8e8:	4e 5f       	subi	r20, 0xFE	; 254
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	be 01       	movw	r22, r28
     8ee:	6d 5f       	subi	r22, 0xFD	; 253
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	c2 01       	movw	r24, r4
     8f4:	a1 dd       	rcall	.-1214   	; 0x438 <_Z8colormapjPhS_S_>
  colormap(adc7, &r, &g, &b);
     8f6:	27 e0       	ldi	r18, 0x07	; 7
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	ae 01       	movw	r20, r28
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	be 01       	movw	r22, r28
     902:	6e 5f       	subi	r22, 0xFE	; 254
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	ce 01       	movw	r24, r28
     908:	03 96       	adiw	r24, 0x03	; 3
  setLedPortion(&r, &g, &b, 8);
     90a:	62 dd       	rcall	.-1340   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
     90c:	9e 01       	movw	r18, r28
     90e:	2f 5f       	subi	r18, 0xFF	; 255
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	ae 01       	movw	r20, r28
     914:	4e 5f       	subi	r20, 0xFE	; 254
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	be 01       	movw	r22, r28
     91a:	6d 5f       	subi	r22, 0xFD	; 253
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	c1 01       	movw	r24, r2
     920:	8b dd       	rcall	.-1258   	; 0x438 <_Z8colormapjPhS_S_>
  colormap(adc8, &r, &g, &b);
     922:	28 e0       	ldi	r18, 0x08	; 8
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	ae 01       	movw	r20, r28
     928:	4f 5f       	subi	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	be 01       	movw	r22, r28
     92e:	6e 5f       	subi	r22, 0xFE	; 254
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	ce 01       	movw	r24, r28
     934:	03 96       	adiw	r24, 0x03	; 3
     936:	4c dd       	rcall	.-1384   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
     938:	9e 01       	movw	r18, r28
     93a:	2f 5f       	subi	r18, 0xFF	; 255
  setLedPortion(&r, &g, &b, 9);
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	ae 01       	movw	r20, r28
     940:	4e 5f       	subi	r20, 0xFE	; 254
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	be 01       	movw	r22, r28
     946:	6d 5f       	subi	r22, 0xFD	; 253
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	8c 81       	ldd	r24, Y+4	; 0x04
     94c:	9d 81       	ldd	r25, Y+5	; 0x05
     94e:	74 dd       	rcall	.-1304   	; 0x438 <_Z8colormapjPhS_S_>
     950:	29 e0       	ldi	r18, 0x09	; 9
     952:	30 e0       	ldi	r19, 0x00	; 0
  strip.show();
     954:	ae 01       	movw	r20, r28
     956:	4f 5f       	subi	r20, 0xFF	; 255
     958:	5f 4f       	sbci	r21, 0xFF	; 255
     95a:	be 01       	movw	r22, r28
}
     95c:	6e 5f       	subi	r22, 0xFE	; 254
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	03 96       	adiw	r24, 0x03	; 3
     964:	35 dd       	rcall	.-1430   	; 0x3d0 <_Z13setLedPortionPhS_S_i>
     966:	8e ec       	ldi	r24, 0xCE	; 206
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	88 d5       	rcall	.+2832   	; 0x147c <_ZN16Adafruit_DotStar4showEv>
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	7f 90       	pop	r7
     990:	6f 90       	pop	r6
     992:	5f 90       	pop	r5
     994:	4f 90       	pop	r4
     996:	3f 90       	pop	r3
     998:	2f 90       	pop	r2
     99a:	08 95       	ret

0000099c <_GLOBAL__sub_I_strip>:


#define NUMPIXELS 144 // Number of LEDs in strip

//Using LEDS with SPI, Pins 51,52 are used (MOSI, SCLK)
Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS, DOTSTAR_RGB);
     99c:	44 e2       	ldi	r20, 0x24	; 36
     99e:	60 e9       	ldi	r22, 0x90	; 144
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	8e ec       	ldi	r24, 0xCE	; 206
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	57 c6       	rjmp	.+3246   	; 0x1656 <_ZN16Adafruit_DotStarC1Ejh>

000009a8 <_GLOBAL__sub_D_strip>:
     9a8:	8e ec       	ldi	r24, 0xCE	; 206
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	36 c5       	rjmp	.+2668   	; 0x141a <_ZN16Adafruit_DotStarD1Ev>

000009ae <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     9ae:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     9b0:	91 8d       	ldd	r25, Z+25	; 0x19
     9b2:	22 8d       	ldd	r18, Z+26	; 0x1a
     9b4:	89 2f       	mov	r24, r25
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	80 5c       	subi	r24, 0xC0	; 192
     9ba:	9f 4f       	sbci	r25, 0xFF	; 255
     9bc:	82 1b       	sub	r24, r18
     9be:	91 09       	sbc	r25, r1
}
     9c0:	8f 73       	andi	r24, 0x3F	; 63
     9c2:	99 27       	eor	r25, r25
     9c4:	08 95       	ret

000009c6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     9c6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     9c8:	91 8d       	ldd	r25, Z+25	; 0x19
     9ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     9cc:	98 17       	cp	r25, r24
     9ce:	31 f0       	breq	.+12     	; 0x9dc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     9d0:	82 8d       	ldd	r24, Z+26	; 0x1a
     9d2:	e8 0f       	add	r30, r24
     9d4:	f1 1d       	adc	r31, r1
     9d6:	85 8d       	ldd	r24, Z+29	; 0x1d
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     9e0:	08 95       	ret

000009e2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     9e2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     9e4:	91 8d       	ldd	r25, Z+25	; 0x19
     9e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     9e8:	98 17       	cp	r25, r24
     9ea:	61 f0       	breq	.+24     	; 0xa04 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     9ec:	82 8d       	ldd	r24, Z+26	; 0x1a
     9ee:	df 01       	movw	r26, r30
     9f0:	a8 0f       	add	r26, r24
     9f2:	b1 1d       	adc	r27, r1
     9f4:	5d 96       	adiw	r26, 0x1d	; 29
     9f6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     9f8:	92 8d       	ldd	r25, Z+26	; 0x1a
     9fa:	9f 5f       	subi	r25, 0xFF	; 255
     9fc:	9f 73       	andi	r25, 0x3F	; 63
     9fe:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a08:	08 95       	ret

00000a0a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     a0a:	fc 01       	movw	r30, r24
     a0c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     a0e:	44 8d       	ldd	r20, Z+28	; 0x1c
     a10:	25 2f       	mov	r18, r21
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	84 2f       	mov	r24, r20
     a16:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	54 17       	cp	r21, r20
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     a20:	cf 96       	adiw	r24, 0x3f	; 63
     a22:	08 95       	ret
  return tail - head - 1;
     a24:	01 97       	sbiw	r24, 0x01	; 1
}
     a26:	08 95       	ret

00000a28 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a28:	8a e9       	ldi	r24, 0x9A	; 154
     a2a:	96 e0       	ldi	r25, 0x06	; 6
     a2c:	89 2b       	or	r24, r25
     a2e:	39 f0       	breq	.+14     	; 0xa3e <_Z14serialEventRunv+0x16>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	89 2b       	or	r24, r25
     a36:	19 f0       	breq	.+6      	; 0xa3e <_Z14serialEventRunv+0x16>
     a38:	7d d1       	rcall	.+762    	; 0xd34 <_Z17Serial0_availablev>
     a3a:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     a3c:	25 c0       	rjmp	.+74     	; 0xa88 <_Z14serialEventRunv+0x60>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	89 2b       	or	r24, r25
     a44:	41 f0       	breq	.+16     	; 0xa56 <_Z14serialEventRunv+0x2e>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	89 2b       	or	r24, r25
     a4c:	21 f0       	breq	.+8      	; 0xa56 <_Z14serialEventRunv+0x2e>
     a4e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a52:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     a54:	1c c0       	rjmp	.+56     	; 0xa8e <_Z14serialEventRunv+0x66>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	89 2b       	or	r24, r25
     a5c:	41 f0       	breq	.+16     	; 0xa6e <_Z14serialEventRunv+0x46>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	89 2b       	or	r24, r25
     a64:	21 f0       	breq	.+8      	; 0xa6e <_Z14serialEventRunv+0x46>
     a66:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a6a:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     a6c:	13 c0       	rjmp	.+38     	; 0xa94 <_Z14serialEventRunv+0x6c>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	89 2b       	or	r24, r25
     a74:	a1 f0       	breq	.+40     	; 0xa9e <_Z14serialEventRunv+0x76>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	89 2b       	or	r24, r25
     a7c:	81 f0       	breq	.+32     	; 0xa9e <_Z14serialEventRunv+0x76>
     a7e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a82:	81 11       	cpse	r24, r1
     a84:	0a c0       	rjmp	.+20     	; 0xa9a <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a86:	08 95       	ret
     a88:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     a8c:	d8 cf       	rjmp	.-80     	; 0xa3e <_Z14serialEventRunv+0x16>
     a8e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     a92:	e1 cf       	rjmp	.-62     	; 0xa56 <_Z14serialEventRunv+0x2e>
     a94:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     a98:	ea cf       	rjmp	.-44     	; 0xa6e <_Z14serialEventRunv+0x46>
     a9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     a9e:	08 95       	ret

00000aa0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     aa0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     aa2:	84 8d       	ldd	r24, Z+28	; 0x1c
     aa4:	df 01       	movw	r26, r30
     aa6:	a8 0f       	add	r26, r24
     aa8:	b1 1d       	adc	r27, r1
     aaa:	a3 5a       	subi	r26, 0xA3	; 163
     aac:	bf 4f       	sbci	r27, 0xFF	; 255
     aae:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     ab0:	84 8d       	ldd	r24, Z+28	; 0x1c
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	8f 73       	andi	r24, 0x3F	; 63
     ab8:	99 27       	eor	r25, r25
     aba:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     abc:	a6 89       	ldd	r26, Z+22	; 0x16
     abe:	b7 89       	ldd	r27, Z+23	; 0x17
     ac0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     ac2:	a0 89       	ldd	r26, Z+16	; 0x10
     ac4:	b1 89       	ldd	r27, Z+17	; 0x11
     ac6:	8c 91       	ld	r24, X
     ac8:	80 64       	ori	r24, 0x40	; 64
     aca:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     acc:	93 8d       	ldd	r25, Z+27	; 0x1b
     ace:	84 8d       	ldd	r24, Z+28	; 0x1c
     ad0:	98 13       	cpse	r25, r24
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     ad4:	02 88       	ldd	r0, Z+18	; 0x12
     ad6:	f3 89       	ldd	r31, Z+19	; 0x13
     ad8:	e0 2d       	mov	r30, r0
     ada:	80 81       	ld	r24, Z
     adc:	8f 7d       	andi	r24, 0xDF	; 223
     ade:	80 83       	st	Z, r24
     ae0:	08 95       	ret

00000ae2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ec 01       	movw	r28, r24
  _written = true;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     af4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     af6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     af8:	98 13       	cpse	r25, r24
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <_ZN14HardwareSerial5writeEh+0x24>
     afc:	e8 89       	ldd	r30, Y+16	; 0x10
     afe:	f9 89       	ldd	r31, Y+17	; 0x11
     b00:	80 81       	ld	r24, Z
     b02:	85 fd       	sbrc	r24, 5
     b04:	23 c0       	rjmp	.+70     	; 0xb4c <_ZN14HardwareSerial5writeEh+0x6a>
     b06:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b08:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b0a:	10 e0       	ldi	r17, 0x00	; 0
     b0c:	0f 5f       	subi	r16, 0xFF	; 255
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	0f 73       	andi	r16, 0x3F	; 63
     b12:	11 27       	eor	r17, r17
     b14:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b16:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b18:	e8 12       	cpse	r14, r24
     b1a:	0b c0       	rjmp	.+22     	; 0xb32 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	07 fc       	sbrc	r0, 7
     b20:	fa cf       	rjmp	.-12     	; 0xb16 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b22:	e8 89       	ldd	r30, Y+16	; 0x10
     b24:	f9 89       	ldd	r31, Y+17	; 0x11
     b26:	80 81       	ld	r24, Z
     b28:	85 ff       	sbrs	r24, 5
     b2a:	f5 cf       	rjmp	.-22     	; 0xb16 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     b2c:	ce 01       	movw	r24, r28
     b2e:	b8 df       	rcall	.-144    	; 0xaa0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b30:	f2 cf       	rjmp	.-28     	; 0xb16 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b34:	fe 01       	movw	r30, r28
     b36:	e8 0f       	add	r30, r24
     b38:	f1 1d       	adc	r31, r1
     b3a:	e3 5a       	subi	r30, 0xA3	; 163
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     b40:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     b42:	ea 89       	ldd	r30, Y+18	; 0x12
     b44:	fb 89       	ldd	r31, Y+19	; 0x13
     b46:	80 81       	ld	r24, Z
     b48:	80 62       	ori	r24, 0x20	; 32
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     b4c:	ee 89       	ldd	r30, Y+22	; 0x16
     b4e:	ff 89       	ldd	r31, Y+23	; 0x17
     b50:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     b52:	e8 89       	ldd	r30, Y+16	; 0x10
     b54:	f9 89       	ldd	r31, Y+17	; 0x11
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	08 95       	ret

00000b6e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b74:	88 8d       	ldd	r24, Y+24	; 0x18
     b76:	88 23       	and	r24, r24
     b78:	c1 f0       	breq	.+48     	; 0xbaa <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b7a:	ea 89       	ldd	r30, Y+18	; 0x12
     b7c:	fb 89       	ldd	r31, Y+19	; 0x13
     b7e:	80 81       	ld	r24, Z
     b80:	85 fd       	sbrc	r24, 5
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <_ZN14HardwareSerial5flushEv+0x20>
     b84:	a8 89       	ldd	r26, Y+16	; 0x10
     b86:	b9 89       	ldd	r27, Y+17	; 0x11
     b88:	8c 91       	ld	r24, X
     b8a:	86 fd       	sbrc	r24, 6
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	07 fc       	sbrc	r0, 7
     b92:	f5 cf       	rjmp	.-22     	; 0xb7e <_ZN14HardwareSerial5flushEv+0x10>
     b94:	80 81       	ld	r24, Z
     b96:	85 ff       	sbrs	r24, 5
     b98:	f2 cf       	rjmp	.-28     	; 0xb7e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     b9a:	a8 89       	ldd	r26, Y+16	; 0x10
     b9c:	b9 89       	ldd	r27, Y+17	; 0x11
     b9e:	8c 91       	ld	r24, X
     ba0:	85 ff       	sbrs	r24, 5
     ba2:	ed cf       	rjmp	.-38     	; 0xb7e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ba4:	ce 01       	movw	r24, r28
     ba6:	7c df       	rcall	.-264    	; 0xaa0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ba8:	e8 cf       	rjmp	.-48     	; 0xb7a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	6a 01       	movw	r12, r20
     bc2:	7b 01       	movw	r14, r22
     bc4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     bc6:	e8 89       	ldd	r30, Y+16	; 0x10
     bc8:	f9 89       	ldd	r31, Y+17	; 0x11
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bce:	41 15       	cp	r20, r1
     bd0:	51 4e       	sbci	r21, 0xE1	; 225
     bd2:	61 05       	cpc	r22, r1
     bd4:	71 05       	cpc	r23, r1
     bd6:	a9 f0       	breq	.+42     	; 0xc02 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	79 e0       	ldi	r23, 0x09	; 9
     bdc:	8d e3       	ldi	r24, 0x3D	; 61
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a7 01       	movw	r20, r14
     be2:	96 01       	movw	r18, r12
     be4:	ca d5       	rcall	.+2964   	; 0x177a <__udivmodsi4>
     be6:	da 01       	movw	r26, r20
     be8:	c9 01       	movw	r24, r18
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	a1 09       	sbc	r26, r1
     bee:	b1 09       	sbc	r27, r1
     bf0:	b6 95       	lsr	r27
     bf2:	a7 95       	ror	r26
     bf4:	97 95       	ror	r25
     bf6:	87 95       	ror	r24
     bf8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bfa:	21 15       	cp	r18, r1
     bfc:	80 e1       	ldi	r24, 0x10	; 16
     bfe:	38 07       	cpc	r19, r24
     c00:	a0 f0       	brcs	.+40     	; 0xc2a <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     c02:	e8 89       	ldd	r30, Y+16	; 0x10
     c04:	f9 89       	ldd	r31, Y+17	; 0x11
     c06:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c08:	60 e8       	ldi	r22, 0x80	; 128
     c0a:	74 e8       	ldi	r23, 0x84	; 132
     c0c:	8e e1       	ldi	r24, 0x1E	; 30
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a7 01       	movw	r20, r14
     c12:	96 01       	movw	r18, r12
     c14:	b2 d5       	rcall	.+2916   	; 0x177a <__udivmodsi4>
     c16:	da 01       	movw	r26, r20
     c18:	c9 01       	movw	r24, r18
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	a1 09       	sbc	r26, r1
     c1e:	b1 09       	sbc	r27, r1
     c20:	b6 95       	lsr	r27
     c22:	a7 95       	ror	r26
     c24:	97 95       	ror	r25
     c26:	87 95       	ror	r24
     c28:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     c2a:	ec 85       	ldd	r30, Y+12	; 0x0c
     c2c:	fd 85       	ldd	r31, Y+13	; 0x0d
     c2e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     c30:	ee 85       	ldd	r30, Y+14	; 0x0e
     c32:	ff 85       	ldd	r31, Y+15	; 0x0f
     c34:	20 83       	st	Z, r18

  _written = false;
     c36:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     c38:	ec 89       	ldd	r30, Y+20	; 0x14
     c3a:	fd 89       	ldd	r31, Y+21	; 0x15
     c3c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     c3e:	ea 89       	ldd	r30, Y+18	; 0x12
     c40:	fb 89       	ldd	r31, Y+19	; 0x13
     c42:	80 81       	ld	r24, Z
     c44:	80 61       	ori	r24, 0x10	; 16
     c46:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c48:	ea 89       	ldd	r30, Y+18	; 0x12
     c4a:	fb 89       	ldd	r31, Y+19	; 0x13
     c4c:	80 81       	ld	r24, Z
     c4e:	88 60       	ori	r24, 0x08	; 8
     c50:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c52:	ea 89       	ldd	r30, Y+18	; 0x12
     c54:	fb 89       	ldd	r31, Y+19	; 0x13
     c56:	80 81       	ld	r24, Z
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c5c:	ea 89       	ldd	r30, Y+18	; 0x12
     c5e:	fb 89       	ldd	r31, Y+19	; 0x13
     c60:	80 81       	ld	r24, Z
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	80 83       	st	Z, r24
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	0b b6       	in	r0, 0x3b	; 59
     c82:	0f 92       	push	r0
     c84:	2f 93       	push	r18
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c8e:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <Serial+0x10>
     c92:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <Serial+0x11>
     c96:	80 81       	ld	r24, Z
     c98:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <Serial+0x16>
     c9c:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <Serial+0x17>
     ca0:	82 fd       	sbrc	r24, 2
     ca2:	12 c0       	rjmp	.+36     	; 0xcc8 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ca4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ca6:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <Serial+0x19>
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     cae:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <Serial+0x1a>
     cb2:	82 17       	cp	r24, r18
     cb4:	51 f0       	breq	.+20     	; 0xcca <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     cb6:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <Serial+0x19>
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	e2 52       	subi	r30, 0x22	; 34
     cbe:	fd 4f       	sbci	r31, 0xFD	; 253
     cc0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     cc2:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <Serial+0x19>
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     cc8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0b be       	out	0x3b, r0	; 59
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	0b b6       	in	r0, 0x3b	; 59
     cee:	0f 92       	push	r0
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	6f 93       	push	r22
     cfa:	7f 93       	push	r23
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	ef 93       	push	r30
     d06:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d08:	8e ed       	ldi	r24, 0xDE	; 222
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	c9 de       	rcall	.-622    	; 0xaa0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	7f 91       	pop	r23
     d1c:	6f 91       	pop	r22
     d1e:	5f 91       	pop	r21
     d20:	4f 91       	pop	r20
     d22:	3f 91       	pop	r19
     d24:	2f 91       	pop	r18
     d26:	0f 90       	pop	r0
     d28:	0b be       	out	0x3b, r0	; 59
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     d34:	8e ed       	ldi	r24, 0xDE	; 222
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	3a de       	rcall	.-908    	; 0x9ae <_ZN14HardwareSerial9availableEv>
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	89 2b       	or	r24, r25
     d3e:	09 f4       	brne	.+2      	; 0xd42 <_Z17Serial0_availablev+0xe>
     d40:	20 e0       	ldi	r18, 0x00	; 0
}
     d42:	82 2f       	mov	r24, r18
     d44:	08 95       	ret

00000d46 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d46:	ee ed       	ldi	r30, 0xDE	; 222
     d48:	f2 e0       	ldi	r31, 0x02	; 2
     d4a:	13 82       	std	Z+3, r1	; 0x03
     d4c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     d4e:	88 ee       	ldi	r24, 0xE8	; 232
     d50:	93 e0       	ldi	r25, 0x03	; 3
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	84 83       	std	Z+4, r24	; 0x04
     d58:	95 83       	std	Z+5, r25	; 0x05
     d5a:	a6 83       	std	Z+6, r26	; 0x06
     d5c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d5e:	89 e8       	ldi	r24, 0x89	; 137
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	80 83       	st	Z, r24
     d66:	85 ec       	ldi	r24, 0xC5	; 197
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	95 87       	std	Z+13, r25	; 0x0d
     d6c:	84 87       	std	Z+12, r24	; 0x0c
     d6e:	84 ec       	ldi	r24, 0xC4	; 196
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	97 87       	std	Z+15, r25	; 0x0f
     d74:	86 87       	std	Z+14, r24	; 0x0e
     d76:	80 ec       	ldi	r24, 0xC0	; 192
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	91 8b       	std	Z+17, r25	; 0x11
     d7c:	80 8b       	std	Z+16, r24	; 0x10
     d7e:	81 ec       	ldi	r24, 0xC1	; 193
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	93 8b       	std	Z+19, r25	; 0x13
     d84:	82 8b       	std	Z+18, r24	; 0x12
     d86:	82 ec       	ldi	r24, 0xC2	; 194
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	95 8b       	std	Z+21, r25	; 0x15
     d8c:	84 8b       	std	Z+20, r24	; 0x14
     d8e:	86 ec       	ldi	r24, 0xC6	; 198
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	97 8b       	std	Z+23, r25	; 0x17
     d94:	86 8b       	std	Z+22, r24	; 0x16
     d96:	11 8e       	std	Z+25, r1	; 0x19
     d98:	12 8e       	std	Z+26, r1	; 0x1a
     d9a:	13 8e       	std	Z+27, r1	; 0x1b
     d9c:	14 8e       	std	Z+28, r1	; 0x1c
     d9e:	08 95       	ret

00000da0 <initVariant>:
     da0:	08 95       	ret

00000da2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     da2:	50 d1       	rcall	.+672    	; 0x1044 <init>
     da4:	fd df       	rcall	.-6      	; 0xda0 <initVariant>
     da6:	67 da       	rcall	.-2866   	; 0x276 <setup>
     da8:	c4 e1       	ldi	r28, 0x14	; 20
     daa:	d5 e0       	ldi	r29, 0x05	; 5
     dac:	a2 db       	rcall	.-2236   	; 0x4f2 <loop>
     dae:	20 97       	sbiw	r28, 0x00	; 0
     db0:	e9 f3       	breq	.-6      	; 0xdac <main+0xa>
     db2:	3a de       	rcall	.-908    	; 0xa28 <_Z14serialEventRunv>
     db4:	fb cf       	rjmp	.-10     	; 0xdac <main+0xa>

00000db6 <_ZN5Print5writeEPKhj>:
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	6c 01       	movw	r12, r24
     dc8:	7a 01       	movw	r14, r20
     dca:	8b 01       	movw	r16, r22
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d0 e0       	ldi	r29, 0x00	; 0
     dd0:	ce 15       	cp	r28, r14
     dd2:	df 05       	cpc	r29, r15
     dd4:	81 f0       	breq	.+32     	; 0xdf6 <_ZN5Print5writeEPKhj+0x40>
     dd6:	d8 01       	movw	r26, r16
     dd8:	6d 91       	ld	r22, X+
     dda:	8d 01       	movw	r16, r26
     ddc:	d6 01       	movw	r26, r12
     dde:	ed 91       	ld	r30, X+
     de0:	fc 91       	ld	r31, X
     de2:	01 90       	ld	r0, Z+
     de4:	f0 81       	ld	r31, Z
     de6:	e0 2d       	mov	r30, r0
     de8:	c6 01       	movw	r24, r12
     dea:	19 95       	eicall
     dec:	89 2b       	or	r24, r25
     dee:	11 f0       	breq	.+4      	; 0xdf4 <_ZN5Print5writeEPKhj+0x3e>
     df0:	21 96       	adiw	r28, 0x01	; 1
     df2:	ee cf       	rjmp	.-36     	; 0xdd0 <_ZN5Print5writeEPKhj+0x1a>
     df4:	7e 01       	movw	r14, r28
     df6:	c7 01       	movw	r24, r14
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	08 95       	ret

00000e0a <_ZN5Print5writeEPKc>:
     e0a:	61 15       	cp	r22, r1
     e0c:	71 05       	cpc	r23, r1
     e0e:	79 f0       	breq	.+30     	; 0xe2e <_ZN5Print5writeEPKc+0x24>
     e10:	fb 01       	movw	r30, r22
     e12:	01 90       	ld	r0, Z+
     e14:	00 20       	and	r0, r0
     e16:	e9 f7       	brne	.-6      	; 0xe12 <_ZN5Print5writeEPKc+0x8>
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	af 01       	movw	r20, r30
     e1c:	46 1b       	sub	r20, r22
     e1e:	57 0b       	sbc	r21, r23
     e20:	dc 01       	movw	r26, r24
     e22:	ed 91       	ld	r30, X+
     e24:	fc 91       	ld	r31, X
     e26:	02 80       	ldd	r0, Z+2	; 0x02
     e28:	f3 81       	ldd	r31, Z+3	; 0x03
     e2a:	e0 2d       	mov	r30, r0
     e2c:	19 94       	eijmp
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	08 95       	ret

00000e34 <_ZN5Print5printEPKc>:
     e34:	ea cf       	rjmp	.-44     	; 0xe0a <_ZN5Print5writeEPKc>

00000e36 <_ZN5Print5printEc>:
     e36:	dc 01       	movw	r26, r24
     e38:	ed 91       	ld	r30, X+
     e3a:	fc 91       	ld	r31, X
     e3c:	01 90       	ld	r0, Z+
     e3e:	f0 81       	ld	r31, Z
     e40:	e0 2d       	mov	r30, r0
     e42:	19 94       	eijmp

00000e44 <_ZN5Print7printlnEv>:
     e44:	67 e9       	ldi	r22, 0x97	; 151
     e46:	72 e0       	ldi	r23, 0x02	; 2
     e48:	e0 cf       	rjmp	.-64     	; 0xe0a <_ZN5Print5writeEPKc>

00000e4a <_ZN5Print11printNumberEmh>:
     e4a:	8f 92       	push	r8
     e4c:	9f 92       	push	r9
     e4e:	af 92       	push	r10
     e50:	bf 92       	push	r11
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	a1 97       	sbiw	r28, 0x21	; 33
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	7c 01       	movw	r14, r24
     e70:	fa 01       	movw	r30, r20
     e72:	cb 01       	movw	r24, r22
     e74:	19 a2       	std	Y+33, r1	; 0x21
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	08 f4       	brcc	.+2      	; 0xe7c <_ZN5Print11printNumberEmh+0x32>
     e7a:	2a e0       	ldi	r18, 0x0A	; 10
     e7c:	8e 01       	movw	r16, r28
     e7e:	0f 5d       	subi	r16, 0xDF	; 223
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	82 2e       	mov	r8, r18
     e84:	91 2c       	mov	r9, r1
     e86:	a1 2c       	mov	r10, r1
     e88:	b1 2c       	mov	r11, r1
     e8a:	bf 01       	movw	r22, r30
     e8c:	a5 01       	movw	r20, r10
     e8e:	94 01       	movw	r18, r8
     e90:	74 d4       	rcall	.+2280   	; 0x177a <__udivmodsi4>
     e92:	f9 01       	movw	r30, r18
     e94:	ca 01       	movw	r24, r20
     e96:	01 50       	subi	r16, 0x01	; 1
     e98:	11 09       	sbc	r17, r1
     e9a:	6a 30       	cpi	r22, 0x0A	; 10
     e9c:	10 f4       	brcc	.+4      	; 0xea2 <_ZN5Print11printNumberEmh+0x58>
     e9e:	60 5d       	subi	r22, 0xD0	; 208
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <_ZN5Print11printNumberEmh+0x5a>
     ea2:	69 5c       	subi	r22, 0xC9	; 201
     ea4:	d8 01       	movw	r26, r16
     ea6:	6c 93       	st	X, r22
     ea8:	23 2b       	or	r18, r19
     eaa:	24 2b       	or	r18, r20
     eac:	25 2b       	or	r18, r21
     eae:	69 f7       	brne	.-38     	; 0xe8a <_ZN5Print11printNumberEmh+0x40>
     eb0:	b8 01       	movw	r22, r16
     eb2:	c7 01       	movw	r24, r14
     eb4:	aa df       	rcall	.-172    	; 0xe0a <_ZN5Print5writeEPKc>
     eb6:	a1 96       	adiw	r28, 0x21	; 33
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	9f 90       	pop	r9
     ed4:	8f 90       	pop	r8
     ed6:	08 95       	ret

00000ed8 <_ZN5Print5printEmi>:
     ed8:	21 15       	cp	r18, r1
     eda:	31 05       	cpc	r19, r1
     edc:	41 f4       	brne	.+16     	; 0xeee <_ZN5Print5printEmi+0x16>
     ede:	dc 01       	movw	r26, r24
     ee0:	ed 91       	ld	r30, X+
     ee2:	fc 91       	ld	r31, X
     ee4:	01 90       	ld	r0, Z+
     ee6:	f0 81       	ld	r31, Z
     ee8:	e0 2d       	mov	r30, r0
     eea:	64 2f       	mov	r22, r20
     eec:	19 94       	eijmp
     eee:	ad cf       	rjmp	.-166    	; 0xe4a <_ZN5Print11printNumberEmh>

00000ef0 <_ZN5Print5printEji>:
     ef0:	9a 01       	movw	r18, r20
     ef2:	ab 01       	movw	r20, r22
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	ef cf       	rjmp	.-34     	; 0xed8 <_ZN5Print5printEmi>

00000efa <_ZN5Print7printlnEmi>:
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	e9 df       	rcall	.-46     	; 0xed8 <_ZN5Print5printEmi>
     f06:	8c 01       	movw	r16, r24
     f08:	ce 01       	movw	r24, r28
     f0a:	9c df       	rcall	.-200    	; 0xe44 <_ZN5Print7printlnEv>
     f0c:	80 0f       	add	r24, r16
     f0e:	91 1f       	adc	r25, r17
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	08 95       	ret

00000f1a <_ZN5Print5printEli>:
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	21 15       	cp	r18, r1
     f2c:	31 05       	cpc	r19, r1
     f2e:	81 f4       	brne	.+32     	; 0xf50 <_ZN5Print5printEli+0x36>
     f30:	dc 01       	movw	r26, r24
     f32:	ed 91       	ld	r30, X+
     f34:	fc 91       	ld	r31, X
     f36:	01 90       	ld	r0, Z+
     f38:	f0 81       	ld	r31, Z
     f3a:	e0 2d       	mov	r30, r0
     f3c:	64 2f       	mov	r22, r20
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	19 94       	eijmp
     f50:	2a 30       	cpi	r18, 0x0A	; 10
     f52:	31 05       	cpc	r19, r1
     f54:	f1 f4       	brne	.+60     	; 0xf92 <_ZN5Print5printEli+0x78>
     f56:	77 ff       	sbrs	r23, 7
     f58:	1b c0       	rjmp	.+54     	; 0xf90 <_ZN5Print5printEli+0x76>
     f5a:	6a 01       	movw	r12, r20
     f5c:	7b 01       	movw	r14, r22
     f5e:	ec 01       	movw	r28, r24
     f60:	6d e2       	ldi	r22, 0x2D	; 45
     f62:	69 df       	rcall	.-302    	; 0xe36 <_ZN5Print5printEc>
     f64:	8c 01       	movw	r16, r24
     f66:	44 27       	eor	r20, r20
     f68:	55 27       	eor	r21, r21
     f6a:	ba 01       	movw	r22, r20
     f6c:	4c 19       	sub	r20, r12
     f6e:	5d 09       	sbc	r21, r13
     f70:	6e 09       	sbc	r22, r14
     f72:	7f 09       	sbc	r23, r15
     f74:	2a e0       	ldi	r18, 0x0A	; 10
     f76:	ce 01       	movw	r24, r28
     f78:	68 df       	rcall	.-304    	; 0xe4a <_ZN5Print11printNumberEmh>
     f7a:	80 0f       	add	r24, r16
     f7c:	91 1f       	adc	r25, r17
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	08 95       	ret
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	df 90       	pop	r13
     fa0:	cf 90       	pop	r12
     fa2:	53 cf       	rjmp	.-346    	; 0xe4a <_ZN5Print11printNumberEmh>

00000fa4 <_ZN5Print5printEii>:
     fa4:	9a 01       	movw	r18, r20
     fa6:	ab 01       	movw	r20, r22
     fa8:	77 0f       	add	r23, r23
     faa:	66 0b       	sbc	r22, r22
     fac:	77 0b       	sbc	r23, r23
     fae:	b5 cf       	rjmp	.-150    	; 0xf1a <_ZN5Print5printEli>

00000fb0 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
     fc2:	af 93       	push	r26
     fc4:	bf 93       	push	r27
     fc6:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <timer0_millis>
     fca:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <timer0_millis+0x1>
     fce:	a0 91 7e 03 	lds	r26, 0x037E	; 0x80037e <timer0_millis+0x2>
     fd2:	b0 91 7f 03 	lds	r27, 0x037F	; 0x80037f <timer0_millis+0x3>
     fd6:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <timer0_fract>
     fda:	23 e0       	ldi	r18, 0x03	; 3
     fdc:	23 0f       	add	r18, r19
     fde:	2d 37       	cpi	r18, 0x7D	; 125
     fe0:	20 f4       	brcc	.+8      	; 0xfea <__vector_23+0x3a>
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	a1 1d       	adc	r26, r1
     fe6:	b1 1d       	adc	r27, r1
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <__vector_23+0x44>
     fea:	26 e8       	ldi	r18, 0x86	; 134
     fec:	23 0f       	add	r18, r19
     fee:	02 96       	adiw	r24, 0x02	; 2
     ff0:	a1 1d       	adc	r26, r1
     ff2:	b1 1d       	adc	r27, r1
     ff4:	20 93 7b 03 	sts	0x037B, r18	; 0x80037b <timer0_fract>
     ff8:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <timer0_millis>
     ffc:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <timer0_millis+0x1>
    1000:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <timer0_millis+0x2>
    1004:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <timer0_millis+0x3>
    1008:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <timer0_overflow_count>
    100c:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <timer0_overflow_count+0x1>
    1010:	a0 91 82 03 	lds	r26, 0x0382	; 0x800382 <timer0_overflow_count+0x2>
    1014:	b0 91 83 03 	lds	r27, 0x0383	; 0x800383 <timer0_overflow_count+0x3>
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	a1 1d       	adc	r26, r1
    101c:	b1 1d       	adc	r27, r1
    101e:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <timer0_overflow_count>
    1022:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <timer0_overflow_count+0x1>
    1026:	a0 93 82 03 	sts	0x0382, r26	; 0x800382 <timer0_overflow_count+0x2>
    102a:	b0 93 83 03 	sts	0x0383, r27	; 0x800383 <timer0_overflow_count+0x3>
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1044:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1046:	84 b5       	in	r24, 0x24	; 36
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    104c:	84 b5       	in	r24, 0x24	; 36
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1052:	85 b5       	in	r24, 0x25	; 37
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1058:	85 b5       	in	r24, 0x25	; 37
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    105e:	ee e6       	ldi	r30, 0x6E	; 110
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1068:	e1 e8       	ldi	r30, 0x81	; 129
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    106e:	80 81       	ld	r24, Z
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1074:	80 81       	ld	r24, Z
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    107a:	e0 e8       	ldi	r30, 0x80	; 128
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	81 60       	ori	r24, 0x01	; 1
    1082:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1084:	e1 eb       	ldi	r30, 0xB1	; 177
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	84 60       	ori	r24, 0x04	; 4
    108c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    108e:	e0 eb       	ldi	r30, 0xB0	; 176
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1098:	e1 e9       	ldi	r30, 0x91	; 145
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	82 60       	ori	r24, 0x02	; 2
    10a0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    10a2:	80 81       	ld	r24, Z
    10a4:	81 60       	ori	r24, 0x01	; 1
    10a6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    10a8:	e0 e9       	ldi	r30, 0x90	; 144
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    10b2:	e1 ea       	ldi	r30, 0xA1	; 161
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    10bc:	80 81       	ld	r24, Z
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    10c2:	e0 ea       	ldi	r30, 0xA0	; 160
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	81 60       	ori	r24, 0x01	; 1
    10ca:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    10cc:	e1 e2       	ldi	r30, 0x21	; 33
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	80 81       	ld	r24, Z
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    10dc:	e0 e2       	ldi	r30, 0x20	; 32
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10e6:	ea e7       	ldi	r30, 0x7A	; 122
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	84 60       	ori	r24, 0x04	; 4
    10ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10f0:	80 81       	ld	r24, Z
    10f2:	82 60       	ori	r24, 0x02	; 2
    10f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    10f6:	80 81       	ld	r24, Z
    10f8:	81 60       	ori	r24, 0x01	; 1
    10fa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10fc:	80 81       	ld	r24, Z
    10fe:	80 68       	ori	r24, 0x80	; 128
    1100:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1102:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1106:	08 95       	ret

00001108 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    1108:	86 33       	cpi	r24, 0x36	; 54
    110a:	08 f0       	brcs	.+2      	; 0x110e <analogRead+0x6>
    110c:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    110e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1112:	28 2f       	mov	r18, r24
    1114:	28 70       	andi	r18, 0x08	; 8
    1116:	97 7f       	andi	r25, 0xF7	; 247
    1118:	92 2b       	or	r25, r18
    111a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    111e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <analog_reference>
    1122:	90 e4       	ldi	r25, 0x40	; 64
    1124:	29 9f       	mul	r18, r25
    1126:	90 01       	movw	r18, r0
    1128:	11 24       	eor	r1, r1
    112a:	87 70       	andi	r24, 0x07	; 7
    112c:	82 2b       	or	r24, r18
    112e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1132:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1136:	80 64       	ori	r24, 0x40	; 64
    1138:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    113c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1140:	86 fd       	sbrc	r24, 6
    1142:	fc cf       	rjmp	.-8      	; 0x113c <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1144:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    1148:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    114c:	90 e0       	ldi	r25, 0x00	; 0
}
    114e:	92 2b       	or	r25, r18
    1150:	08 95       	ret

00001152 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	fc 01       	movw	r30, r24
    1156:	31 97       	sbiw	r30, 0x01	; 1
    1158:	e2 31       	cpi	r30, 0x12	; 18
    115a:	f1 05       	cpc	r31, r1
    115c:	08 f0       	brcs	.+2      	; 0x1160 <turnOffPWM+0xe>
    115e:	4d c0       	rjmp	.+154    	; 0x11fa <turnOffPWM+0xa8>
    1160:	88 27       	eor	r24, r24
    1162:	ee 58       	subi	r30, 0x8E	; 142
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	46 c3       	rjmp	.+1676   	; 0x17f6 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    116a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    116e:	8f 77       	andi	r24, 0x7F	; 127
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1172:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1176:	8f 7d       	andi	r24, 0xDF	; 223
    1178:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    117c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    117e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1182:	87 7f       	andi	r24, 0xF7	; 247
    1184:	f9 cf       	rjmp	.-14     	; 0x1178 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1186:	84 b5       	in	r24, 0x24	; 36
    1188:	8f 77       	andi	r24, 0x7F	; 127
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    118c:	84 b5       	in	r24, 0x24	; 36
    118e:	8f 7d       	andi	r24, 0xDF	; 223
    1190:	84 bd       	out	0x24, r24	; 36
    1192:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1194:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1198:	8f 77       	andi	r24, 0x7F	; 127
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    119c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    11a0:	8f 7d       	andi	r24, 0xDF	; 223
    11a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    11a6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    11a8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    11ac:	8f 77       	andi	r24, 0x7F	; 127
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    11b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    11b4:	8f 7d       	andi	r24, 0xDF	; 223
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    11b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    11bc:	87 7f       	andi	r24, 0xF7	; 247
    11be:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    11c2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    11c4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11c8:	8f 77       	andi	r24, 0x7F	; 127
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    11cc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    11d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11d8:	87 7f       	andi	r24, 0xF7	; 247
    11da:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11de:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    11e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11e4:	8f 77       	andi	r24, 0x7F	; 127
    11e6:	07 c0       	rjmp	.+14     	; 0x11f6 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    11e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11ec:	8f 7d       	andi	r24, 0xDF	; 223
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    11f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11f4:	87 7f       	andi	r24, 0xF7	; 247
    11f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11fa:	08 95       	ret

000011fc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	fc 01       	movw	r30, r24
    1204:	e2 5b       	subi	r30, 0xB2	; 178
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    120a:	fc 01       	movw	r30, r24
    120c:	ec 56       	subi	r30, 0x6C	; 108
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1212:	88 23       	and	r24, r24
    1214:	61 f1       	breq	.+88     	; 0x126e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	fc 01       	movw	r30, r24
    121e:	ec 50       	subi	r30, 0x0C	; 12
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	c5 91       	lpm	r28, Z+
    1224:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1226:	fc 01       	movw	r30, r24
    1228:	e6 52       	subi	r30, 0x26	; 38
    122a:	fe 4f       	sbci	r31, 0xFE	; 254
    122c:	a5 91       	lpm	r26, Z+
    122e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1230:	61 11       	cpse	r22, r1
    1232:	09 c0       	rjmp	.+18     	; 0x1246 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1234:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1236:	f8 94       	cli
		*reg &= ~bit;
    1238:	88 81       	ld	r24, Y
    123a:	20 95       	com	r18
    123c:	82 23       	and	r24, r18
    123e:	88 83       	st	Y, r24
		*out &= ~bit;
    1240:	ec 91       	ld	r30, X
    1242:	2e 23       	and	r18, r30
    1244:	0b c0       	rjmp	.+22     	; 0x125c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1246:	62 30       	cpi	r22, 0x02	; 2
    1248:	61 f4       	brne	.+24     	; 0x1262 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    124a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    124c:	f8 94       	cli
		*reg &= ~bit;
    124e:	88 81       	ld	r24, Y
    1250:	32 2f       	mov	r19, r18
    1252:	30 95       	com	r19
    1254:	83 23       	and	r24, r19
    1256:	88 83       	st	Y, r24
		*out |= bit;
    1258:	ec 91       	ld	r30, X
    125a:	2e 2b       	or	r18, r30
    125c:	2c 93       	st	X, r18
		SREG = oldSREG;
    125e:	9f bf       	out	0x3f, r25	; 63
    1260:	06 c0       	rjmp	.+12     	; 0x126e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1262:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1264:	f8 94       	cli
		*reg |= bit;
    1266:	e8 81       	ld	r30, Y
    1268:	2e 2b       	or	r18, r30
    126a:	28 83       	st	Y, r18
		SREG = oldSREG;
    126c:	8f bf       	out	0x3f, r24	; 63
	}
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	f9 01       	movw	r30, r18
    1280:	e8 5f       	subi	r30, 0xF8	; 248
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1286:	f9 01       	movw	r30, r18
    1288:	e2 5b       	subi	r30, 0xB2	; 178
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    128e:	f9 01       	movw	r30, r18
    1290:	ec 56       	subi	r30, 0x6C	; 108
    1292:	fe 4f       	sbci	r31, 0xFE	; 254
    1294:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1296:	cc 23       	and	r28, r28
    1298:	b9 f0       	breq	.+46     	; 0x12c8 <digitalWrite+0x54>
    129a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    129c:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    129e:	59 df       	rcall	.-334    	; 0x1152 <turnOffPWM>
    12a0:	ec 2f       	mov	r30, r28
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	e6 52       	subi	r30, 0x26	; 38
    12aa:	fe 4f       	sbci	r31, 0xFE	; 254
    12ac:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    12ae:	b4 91       	lpm	r27, Z
	cli();
    12b0:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    12b2:	f8 94       	cli
    12b4:	11 11       	cpse	r17, r1
		*out &= ~bit;
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <digitalWrite+0x4c>
    12b8:	8c 91       	ld	r24, X
    12ba:	d0 95       	com	r29
    12bc:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <digitalWrite+0x50>
    12c0:	ec 91       	ld	r30, X
    12c2:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    12c4:	dc 93       	st	X, r29
}
    12c6:	9f bf       	out	0x3f, r25	; 63
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	08 95       	ret

000012d0 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    12d0:	4f 92       	push	r4
    12d2:	5f 92       	push	r5
    12d4:	6f 92       	push	r6
    12d6:	7f 92       	push	r7
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	29 01       	movw	r4, r18
    12f2:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	24 19       	sub	r18, r4
    12fa:	35 09       	sbc	r19, r5
    12fc:	46 09       	sbc	r20, r6
    12fe:	57 09       	sbc	r21, r7
    1300:	8a 89       	ldd	r24, Y+18	; 0x12
    1302:	9b 89       	ldd	r25, Y+19	; 0x13
    1304:	ac 89       	ldd	r26, Y+20	; 0x14
    1306:	bd 89       	ldd	r27, Y+21	; 0x15
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	6a 19       	sub	r22, r10
    130e:	7b 09       	sbc	r23, r11
    1310:	8c 09       	sbc	r24, r12
    1312:	9d 09       	sbc	r25, r13
    1314:	23 d2       	rcall	.+1094   	; 0x175c <__mulsi3>
    1316:	a8 01       	movw	r20, r16
    1318:	97 01       	movw	r18, r14
    131a:	24 19       	sub	r18, r4
    131c:	35 09       	sbc	r19, r5
    131e:	46 09       	sbc	r20, r6
    1320:	57 09       	sbc	r21, r7
    1322:	4d d2       	rcall	.+1178   	; 0x17be <__divmodsi4>
    1324:	ca 01       	movw	r24, r20
    1326:	b9 01       	movw	r22, r18
    1328:	6a 0d       	add	r22, r10
    132a:	7b 1d       	adc	r23, r11
    132c:	8c 1d       	adc	r24, r12
    132e:	9d 1d       	adc	r25, r13
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	7f 90       	pop	r7
    1346:	6f 90       	pop	r6
    1348:	5f 90       	pop	r5
    134a:	4f 90       	pop	r4
    134c:	08 95       	ret

0000134e <_ZN8SPIClass8transferEh>:
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t data, uint8_t clock,
  uint8_t o) :
 dataPin(data), clockPin(clock), brightness(0), pixels(NULL),
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
{
  updateLength(n);
    134e:	8e bd       	out	0x2e, r24	; 46
    1350:	00 00       	nop
    1352:	0d b4       	in	r0, 0x2d	; 45
    1354:	07 fe       	sbrs	r0, 7
    1356:	fd cf       	rjmp	.-6      	; 0x1352 <_ZN8SPIClass8transferEh+0x4>
    1358:	8e b5       	in	r24, 0x2e	; 46
    135a:	08 95       	ret

0000135c <_ZN16Adafruit_DotStar11hw_spi_initEv>:
    135c:	b9 d1       	rcall	.+882    	; 0x16d0 <_ZN8SPIClass5beginEv>
    135e:	8c b5       	in	r24, 0x2c	; 44
    1360:	8c 7f       	andi	r24, 0xFC	; 252
    1362:	8c bd       	out	0x2c, r24	; 44
    1364:	8d b5       	in	r24, 0x2d	; 45
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	8d bd       	out	0x2d, r24	; 45
    136a:	8c b5       	in	r24, 0x2c	; 44
    136c:	8f 7d       	andi	r24, 0xDF	; 223
    136e:	8c bd       	out	0x2c, r24	; 44
    1370:	8c b5       	in	r24, 0x2c	; 44
    1372:	83 7f       	andi	r24, 0xF3	; 243
    1374:	8c bd       	out	0x2c, r24	; 44
    1376:	08 95       	ret

00001378 <_ZN16Adafruit_DotStar11sw_spi_initEv>:
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	ec 01       	movw	r28, r24
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	3c df       	rcall	.-392    	; 0x11fc <pinMode>
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	39 df       	rcall	.-398    	; 0x11fc <pinMode>
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fc 01       	movw	r30, r24
    1390:	ec 56       	subi	r30, 0x6C	; 108
    1392:	fe 4f       	sbci	r31, 0xFE	; 254
    1394:	e4 91       	lpm	r30, Z
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	e6 52       	subi	r30, 0x26	; 38
    139e:	fe 4f       	sbci	r31, 0xFE	; 254
    13a0:	a5 91       	lpm	r26, Z+
    13a2:	b4 91       	lpm	r27, Z
    13a4:	bd 87       	std	Y+13, r27	; 0x0d
    13a6:	ac 87       	std	Y+12, r26	; 0x0c
    13a8:	2b 81       	ldd	r18, Y+3	; 0x03
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	f9 01       	movw	r30, r18
    13ae:	ec 56       	subi	r30, 0x6C	; 108
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	e4 91       	lpm	r30, Z
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	e6 52       	subi	r30, 0x26	; 38
    13bc:	fe 4f       	sbci	r31, 0xFE	; 254
    13be:	45 91       	lpm	r20, Z+
    13c0:	54 91       	lpm	r21, Z
    13c2:	5f 87       	std	Y+15, r21	; 0x0f
    13c4:	4e 87       	std	Y+14, r20	; 0x0e
    13c6:	fc 01       	movw	r30, r24
    13c8:	e2 5b       	subi	r30, 0xB2	; 178
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	84 91       	lpm	r24, Z
    13ce:	8a 87       	std	Y+10, r24	; 0x0a
    13d0:	f9 01       	movw	r30, r18
    13d2:	e2 5b       	subi	r30, 0xB2	; 178
    13d4:	fe 4f       	sbci	r31, 0xFE	; 254
    13d6:	e4 91       	lpm	r30, Z
    13d8:	eb 87       	std	Y+11, r30	; 0x0b
    13da:	9c 91       	ld	r25, X
    13dc:	e8 2f       	mov	r30, r24
    13de:	e0 95       	com	r30
    13e0:	e9 23       	and	r30, r25
    13e2:	ec 93       	st	X, r30
    13e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    13e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    13e8:	90 81       	ld	r25, Z
    13ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ec:	80 95       	com	r24
    13ee:	89 23       	and	r24, r25
    13f0:	80 83       	st	Z, r24
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <_ZN16Adafruit_DotStar5beginEv>:
    13f8:	fc 01       	movw	r30, r24
    13fa:	22 81       	ldd	r18, Z+2	; 0x02
    13fc:	2f 3f       	cpi	r18, 0xFF	; 255
    13fe:	09 f4       	brne	.+2      	; 0x1402 <_ZN16Adafruit_DotStar5beginEv+0xa>
    1400:	ad cf       	rjmp	.-166    	; 0x135c <_ZN16Adafruit_DotStar11hw_spi_initEv>
    1402:	ba cf       	rjmp	.-140    	; 0x1378 <_ZN16Adafruit_DotStar11sw_spi_initEv>

00001404 <_ZN16Adafruit_DotStar10sw_spi_endEv>:
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	ec 01       	movw	r28, r24
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	f6 de       	rcall	.-532    	; 0x11fc <pinMode>
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	f1 ce       	rjmp	.-542    	; 0x11fc <pinMode>

0000141a <_ZN16Adafruit_DotStarD1Ev>:
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	09 f0       	breq	.+2      	; 0x142a <_ZN16Adafruit_DotStarD1Ev+0x10>
    1428:	9f d2       	rcall	.+1342   	; 0x1968 <free>
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	8f 3f       	cpi	r24, 0xFF	; 255
    142e:	19 f4       	brne	.+6      	; 0x1436 <_ZN16Adafruit_DotStarD1Ev+0x1c>
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	7f c1       	rjmp	.+766    	; 0x1734 <_ZN8SPIClass3endEv>
    1436:	ce 01       	movw	r24, r28
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	e3 cf       	rjmp	.-58     	; 0x1404 <_ZN16Adafruit_DotStar10sw_spi_endEv>

0000143e <_ZN16Adafruit_DotStar10sw_spi_outEh>:
    143e:	fc 01       	movw	r30, r24
    1440:	29 e0       	ldi	r18, 0x09	; 9
    1442:	21 50       	subi	r18, 0x01	; 1
    1444:	d1 f0       	breq	.+52     	; 0x147a <_ZN16Adafruit_DotStar10sw_spi_outEh+0x3c>
    1446:	a4 85       	ldd	r26, Z+12	; 0x0c
    1448:	b5 85       	ldd	r27, Z+13	; 0x0d
    144a:	82 85       	ldd	r24, Z+10	; 0x0a
    144c:	9c 91       	ld	r25, X
    144e:	67 ff       	sbrs	r22, 7
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x18>
    1452:	89 2b       	or	r24, r25
    1454:	02 c0       	rjmp	.+4      	; 0x145a <_ZN16Adafruit_DotStar10sw_spi_outEh+0x1c>
    1456:	80 95       	com	r24
    1458:	89 23       	and	r24, r25
    145a:	8c 93       	st	X, r24
    145c:	a6 85       	ldd	r26, Z+14	; 0x0e
    145e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1460:	9c 91       	ld	r25, X
    1462:	83 85       	ldd	r24, Z+11	; 0x0b
    1464:	89 2b       	or	r24, r25
    1466:	8c 93       	st	X, r24
    1468:	a6 85       	ldd	r26, Z+14	; 0x0e
    146a:	b7 85       	ldd	r27, Z+15	; 0x0f
    146c:	9c 91       	ld	r25, X
    146e:	83 85       	ldd	r24, Z+11	; 0x0b
    1470:	80 95       	com	r24
    1472:	89 23       	and	r24, r25
    1474:	8c 93       	st	X, r24
    1476:	66 0f       	add	r22, r22
    1478:	e4 cf       	rjmp	.-56     	; 0x1442 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x4>
    147a:	08 95       	ret

0000147c <_ZN16Adafruit_DotStar4showEv>:
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	fc 01       	movw	r30, r24
    1490:	05 81       	ldd	r16, Z+5	; 0x05
    1492:	16 81       	ldd	r17, Z+6	; 0x06
    1494:	01 15       	cp	r16, r1
    1496:	11 05       	cpc	r17, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <_ZN16Adafruit_DotStar4showEv+0x20>
    149a:	8c c0       	rjmp	.+280    	; 0x15b4 <_ZN16Adafruit_DotStar4showEv+0x138>
    149c:	ec 01       	movw	r28, r24
    149e:	e0 80       	ld	r14, Z
    14a0:	f1 80       	ldd	r15, Z+1	; 0x01
    14a2:	b4 80       	ldd	r11, Z+4	; 0x04
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	8f 3f       	cpi	r24, 0xFF	; 255
    14a8:	09 f0       	breq	.+2      	; 0x14ac <_ZN16Adafruit_DotStar4showEv+0x30>
    14aa:	3c c0       	rjmp	.+120    	; 0x1524 <_ZN16Adafruit_DotStar4showEv+0xa8>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	4f df       	rcall	.-354    	; 0x134e <_ZN8SPIClass8transferEh>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	4d df       	rcall	.-358    	; 0x134e <_ZN8SPIClass8transferEh>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	4b df       	rcall	.-362    	; 0x134e <_ZN8SPIClass8transferEh>
    14b8:	1e bc       	out	0x2e, r1	; 46
    14ba:	4f ef       	ldi	r20, 0xFF	; 255
    14bc:	0d b4       	in	r0, 0x2d	; 45
    14be:	07 fe       	sbrs	r0, 7
    14c0:	fd cf       	rjmp	.-6      	; 0x14bc <_ZN16Adafruit_DotStar4showEv+0x40>
    14c2:	4e bd       	out	0x2e, r20	; 46
    14c4:	f8 01       	movw	r30, r16
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	99 23       	and	r25, r25
    14cc:	31 f0       	breq	.+12     	; 0x14da <_ZN16Adafruit_DotStar4showEv+0x5e>
    14ce:	20 81       	ld	r18, Z
    14d0:	b2 9e       	mul	r11, r18
    14d2:	90 01       	movw	r18, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	93 2f       	mov	r25, r19
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <_ZN16Adafruit_DotStar4showEv+0x60>
    14da:	90 81       	ld	r25, Z
    14dc:	0d b4       	in	r0, 0x2d	; 45
    14de:	07 fe       	sbrs	r0, 7
    14e0:	fd cf       	rjmp	.-6      	; 0x14dc <_ZN16Adafruit_DotStar4showEv+0x60>
    14e2:	9e bd       	out	0x2e, r25	; 46
    14e4:	81 50       	subi	r24, 0x01	; 1
    14e6:	31 96       	adiw	r30, 0x01	; 1
    14e8:	81 11       	cpse	r24, r1
    14ea:	ee cf       	rjmp	.-36     	; 0x14c8 <_ZN16Adafruit_DotStar4showEv+0x4c>
    14ec:	0d 5f       	subi	r16, 0xFD	; 253
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
    14f0:	f1 e0       	ldi	r31, 0x01	; 1
    14f2:	ef 1a       	sub	r14, r31
    14f4:	f1 08       	sbc	r15, r1
    14f6:	11 f7       	brne	.-60     	; 0x14bc <_ZN16Adafruit_DotStar4showEv+0x40>
    14f8:	0d b4       	in	r0, 0x2d	; 45
    14fa:	07 fe       	sbrs	r0, 7
    14fc:	fd cf       	rjmp	.-6      	; 0x14f8 <_ZN16Adafruit_DotStar4showEv+0x7c>
    14fe:	10 e0       	ldi	r17, 0x00	; 0
    1500:	21 2f       	mov	r18, r17
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	88 81       	ld	r24, Y
    1506:	99 81       	ldd	r25, Y+1	; 0x01
    1508:	0f 96       	adiw	r24, 0x0f	; 15
    150a:	64 e0       	ldi	r22, 0x04	; 4
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	6a 95       	dec	r22
    1512:	e1 f7       	brne	.-8      	; 0x150c <_ZN16Adafruit_DotStar4showEv+0x90>
    1514:	28 17       	cp	r18, r24
    1516:	39 07       	cpc	r19, r25
    1518:	08 f0       	brcs	.+2      	; 0x151c <_ZN16Adafruit_DotStar4showEv+0xa0>
    151a:	4c c0       	rjmp	.+152    	; 0x15b4 <_ZN16Adafruit_DotStar4showEv+0x138>
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	17 df       	rcall	.-466    	; 0x134e <_ZN8SPIClass8transferEh>
    1520:	1f 5f       	subi	r17, 0xFF	; 255
    1522:	ee cf       	rjmp	.-36     	; 0x1500 <_ZN16Adafruit_DotStar4showEv+0x84>
    1524:	54 e0       	ldi	r21, 0x04	; 4
    1526:	d5 2e       	mov	r13, r21
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	ce 01       	movw	r24, r28
    152c:	88 df       	rcall	.-240    	; 0x143e <_ZN16Adafruit_DotStar10sw_spi_outEh>
    152e:	da 94       	dec	r13
    1530:	d1 10       	cpse	r13, r1
    1532:	fa cf       	rjmp	.-12     	; 0x1528 <_ZN16Adafruit_DotStar4showEv+0xac>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	88 23       	and	r24, r24
    1538:	21 f1       	breq	.+72     	; 0x1582 <_ZN16Adafruit_DotStar4showEv+0x106>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	ce 01       	movw	r24, r28
    153e:	7f df       	rcall	.-258    	; 0x143e <_ZN16Adafruit_DotStar10sw_spi_outEh>
    1540:	68 01       	movw	r12, r16
    1542:	0d 5f       	subi	r16, 0xFD	; 253
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	f6 01       	movw	r30, r12
    1548:	81 91       	ld	r24, Z+
    154a:	6f 01       	movw	r12, r30
    154c:	b8 9e       	mul	r11, r24
    154e:	c0 01       	movw	r24, r0
    1550:	11 24       	eor	r1, r1
    1552:	69 2f       	mov	r22, r25
    1554:	ce 01       	movw	r24, r28
    1556:	73 df       	rcall	.-282    	; 0x143e <_ZN16Adafruit_DotStar10sw_spi_outEh>
    1558:	c0 16       	cp	r12, r16
    155a:	d1 06       	cpc	r13, r17
    155c:	a1 f7       	brne	.-24     	; 0x1546 <_ZN16Adafruit_DotStar4showEv+0xca>
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	ef 1a       	sub	r14, r31
    1562:	f1 08       	sbc	r15, r1
    1564:	51 f7       	brne	.-44     	; 0x153a <_ZN16Adafruit_DotStar4showEv+0xbe>
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	13 c0       	rjmp	.+38     	; 0x1590 <_ZN16Adafruit_DotStar4showEv+0x114>
    156a:	f6 01       	movw	r30, r12
    156c:	61 91       	ld	r22, Z+
    156e:	6f 01       	movw	r12, r30
    1570:	ce 01       	movw	r24, r28
    1572:	65 df       	rcall	.-310    	; 0x143e <_ZN16Adafruit_DotStar10sw_spi_outEh>
    1574:	c0 16       	cp	r12, r16
    1576:	d1 06       	cpc	r13, r17
    1578:	c1 f7       	brne	.-16     	; 0x156a <_ZN16Adafruit_DotStar4showEv+0xee>
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	ef 1a       	sub	r14, r31
    157e:	f1 08       	sbc	r15, r1
    1580:	91 f3       	breq	.-28     	; 0x1566 <_ZN16Adafruit_DotStar4showEv+0xea>
    1582:	6f ef       	ldi	r22, 0xFF	; 255
    1584:	ce 01       	movw	r24, r28
    1586:	5b df       	rcall	.-330    	; 0x143e <_ZN16Adafruit_DotStar10sw_spi_outEh>
    1588:	68 01       	movw	r12, r16
    158a:	0d 5f       	subi	r16, 0xFD	; 253
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	ed cf       	rjmp	.-38     	; 0x156a <_ZN16Adafruit_DotStar4showEv+0xee>
    1590:	21 2f       	mov	r18, r17
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	88 81       	ld	r24, Y
    1596:	99 81       	ldd	r25, Y+1	; 0x01
    1598:	0f 96       	adiw	r24, 0x0f	; 15
    159a:	44 e0       	ldi	r20, 0x04	; 4
    159c:	96 95       	lsr	r25
    159e:	87 95       	ror	r24
    15a0:	4a 95       	dec	r20
    15a2:	e1 f7       	brne	.-8      	; 0x159c <_ZN16Adafruit_DotStar4showEv+0x120>
    15a4:	28 17       	cp	r18, r24
    15a6:	39 07       	cpc	r19, r25
    15a8:	28 f4       	brcc	.+10     	; 0x15b4 <_ZN16Adafruit_DotStar4showEv+0x138>
    15aa:	6f ef       	ldi	r22, 0xFF	; 255
    15ac:	ce 01       	movw	r24, r28
    15ae:	47 df       	rcall	.-370    	; 0x143e <_ZN16Adafruit_DotStar10sw_spi_outEh>
    15b0:	1f 5f       	subi	r17, 0xFF	; 255
    15b2:	ee cf       	rjmp	.-36     	; 0x1590 <_ZN16Adafruit_DotStar4showEv+0x114>
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	08 95       	ret

000015c8 <_ZN16Adafruit_DotStar5clearEv>:
    15c8:	fc 01       	movw	r30, r24
    15ca:	97 81       	ldd	r25, Z+7	; 0x07
    15cc:	80 85       	ldd	r24, Z+8	; 0x08
    15ce:	20 81       	ld	r18, Z
    15d0:	31 81       	ldd	r19, Z+1	; 0x01
    15d2:	a9 01       	movw	r20, r18
    15d4:	98 13       	cpse	r25, r24
    15d6:	07 c0       	rjmp	.+14     	; 0x15e6 <_ZN16Adafruit_DotStar5clearEv+0x1e>
    15d8:	4d 5f       	subi	r20, 0xFD	; 253
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	56 95       	lsr	r21
    15de:	47 95       	ror	r20
    15e0:	56 95       	lsr	r21
    15e2:	47 95       	ror	r20
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <_ZN16Adafruit_DotStar5clearEv+0x22>
    15e6:	44 0f       	add	r20, r20
    15e8:	55 1f       	adc	r21, r21
    15ea:	42 0f       	add	r20, r18
    15ec:	53 1f       	adc	r21, r19
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	85 81       	ldd	r24, Z+5	; 0x05
    15f4:	96 81       	ldd	r25, Z+6	; 0x06
    15f6:	41 c2       	rjmp	.+1154   	; 0x1a7a <memset>

000015f8 <_ZN16Adafruit_DotStar12updateLengthEj>:
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
    1602:	8b 01       	movw	r16, r22
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	09 f0       	breq	.+2      	; 0x160e <_ZN16Adafruit_DotStar12updateLengthEj+0x16>
    160c:	ad d1       	rcall	.+858    	; 0x1968 <free>
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	88 85       	ldd	r24, Y+8	; 0x08
    1612:	98 13       	cpse	r25, r24
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <_ZN16Adafruit_DotStar12updateLengthEj+0x2c>
    1616:	c8 01       	movw	r24, r16
    1618:	03 96       	adiw	r24, 0x03	; 3
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	96 95       	lsr	r25
    1620:	87 95       	ror	r24
    1622:	03 c0       	rjmp	.+6      	; 0x162a <_ZN16Adafruit_DotStar12updateLengthEj+0x32>
    1624:	c8 01       	movw	r24, r16
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	80 0f       	add	r24, r16
    162c:	91 1f       	adc	r25, r17
    162e:	04 d1       	rcall	.+520    	; 0x1838 <malloc>
    1630:	9e 83       	std	Y+6, r25	; 0x06
    1632:	8d 83       	std	Y+5, r24	; 0x05
    1634:	89 2b       	or	r24, r25
    1636:	41 f0       	breq	.+16     	; 0x1648 <_ZN16Adafruit_DotStar12updateLengthEj+0x50>
    1638:	19 83       	std	Y+1, r17	; 0x01
    163a:	08 83       	st	Y, r16
    163c:	ce 01       	movw	r24, r28
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	c0 cf       	rjmp	.-128    	; 0x15c8 <_ZN16Adafruit_DotStar5clearEv>
    1648:	19 82       	std	Y+1, r1	; 0x01
    164a:	18 82       	st	Y, r1
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <_ZN16Adafruit_DotStarC1Ejh>:
    1656:	fc 01       	movw	r30, r24
    1658:	71 83       	std	Z+1, r23	; 0x01
    165a:	60 83       	st	Z, r22
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	82 83       	std	Z+2, r24	; 0x02
    1660:	14 82       	std	Z+4, r1	; 0x04
    1662:	16 82       	std	Z+6, r1	; 0x06
    1664:	15 82       	std	Z+5, r1	; 0x05
    1666:	84 2f       	mov	r24, r20
    1668:	83 70       	andi	r24, 0x03	; 3
    166a:	87 83       	std	Z+7, r24	; 0x07
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	ca 01       	movw	r24, r20
    1670:	95 95       	asr	r25
    1672:	87 95       	ror	r24
    1674:	95 95       	asr	r25
    1676:	87 95       	ror	r24
    1678:	83 70       	andi	r24, 0x03	; 3
    167a:	80 87       	std	Z+8, r24	; 0x08
    167c:	34 e0       	ldi	r19, 0x04	; 4
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	3a 95       	dec	r19
    1684:	e1 f7       	brne	.-8      	; 0x167e <_ZN16Adafruit_DotStarC1Ejh+0x28>
    1686:	43 70       	andi	r20, 0x03	; 3
    1688:	41 87       	std	Z+9, r20	; 0x09
    168a:	cf 01       	movw	r24, r30
    168c:	b5 cf       	rjmp	.-150    	; 0x15f8 <_ZN16Adafruit_DotStar12updateLengthEj>

0000168e <_ZN16Adafruit_DotStar13setPixelColorEjhhh>:
    numLEDs * 3);                   // COLOR: 3 bytes/pixel
}

// Set pixel color, separate R,G,B values (0-255 ea.)
void Adafruit_DotStar::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    168e:	0f 93       	push	r16
    1690:	fc 01       	movw	r30, r24
  if(n < numLEDs) {
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	68 17       	cp	r22, r24
    1698:	79 07       	cpc	r23, r25
    169a:	c0 f4       	brcc	.+48     	; 0x16cc <_ZN16Adafruit_DotStar13setPixelColorEjhhh+0x3e>
    uint8_t *p = &pixels[n * 3];
    169c:	cb 01       	movw	r24, r22
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	68 0f       	add	r22, r24
    16a4:	79 1f       	adc	r23, r25
    16a6:	85 81       	ldd	r24, Z+5	; 0x05
    16a8:	96 81       	ldd	r25, Z+6	; 0x06
    16aa:	68 0f       	add	r22, r24
    16ac:	79 1f       	adc	r23, r25
    p[rOffset] = r;
    16ae:	87 81       	ldd	r24, Z+7	; 0x07
    16b0:	db 01       	movw	r26, r22
    16b2:	a8 0f       	add	r26, r24
    16b4:	b1 1d       	adc	r27, r1
    16b6:	4c 93       	st	X, r20
    p[gOffset] = g;
    16b8:	80 85       	ldd	r24, Z+8	; 0x08
    16ba:	db 01       	movw	r26, r22
    16bc:	a8 0f       	add	r26, r24
    16be:	b1 1d       	adc	r27, r1
    16c0:	2c 93       	st	X, r18
    p[bOffset] = b;
    16c2:	81 85       	ldd	r24, Z+9	; 0x09
    16c4:	fb 01       	movw	r30, r22
    16c6:	e8 0f       	add	r30, r24
    16c8:	f1 1d       	adc	r31, r1
    16ca:	00 83       	st	Z, r16
  }
}
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    16d0:	cf 93       	push	r28
  uint8_t sreg = SREG;
    16d2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    16d4:	f8 94       	cli
  if (!initialized) {
    16d6:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZN8SPIClass11initializedE>
    16da:	81 11       	cpse	r24, r1
    16dc:	23 c0       	rjmp	.+70     	; 0x1724 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    16de:	e9 ec       	ldi	r30, 0xC9	; 201
    16e0:	f1 e0       	ldi	r31, 0x01	; 1
    16e2:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    16e4:	e3 e8       	ldi	r30, 0x83	; 131
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    16ea:	e8 2f       	mov	r30, r24
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	ec 50       	subi	r30, 0x0C	; 12
    16f4:	fe 4f       	sbci	r31, 0xFE	; 254
    16f6:	a5 91       	lpm	r26, Z+
    16f8:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    16fa:	ec 91       	ld	r30, X
    16fc:	e9 23       	and	r30, r25
    16fe:	19 f4       	brne	.+6      	; 0x1706 <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	85 e3       	ldi	r24, 0x35	; 53
    1704:	b7 dd       	rcall	.-1170   	; 0x1274 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	85 e3       	ldi	r24, 0x35	; 53
    170a:	78 dd       	rcall	.-1296   	; 0x11fc <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    170c:	8c b5       	in	r24, 0x2c	; 44
    170e:	80 61       	ori	r24, 0x10	; 16
    1710:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1712:	8c b5       	in	r24, 0x2c	; 44
    1714:	80 64       	ori	r24, 0x40	; 64
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1716:	8c bd       	out	0x2c, r24	; 44
    1718:	61 e0       	ldi	r22, 0x01	; 1
    pinMode(MOSI, OUTPUT);
    171a:	84 e3       	ldi	r24, 0x34	; 52
    171c:	6f dd       	rcall	.-1314   	; 0x11fc <pinMode>
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	83 e3       	ldi	r24, 0x33	; 51
  }
  initialized++; // reference count
    1722:	6c dd       	rcall	.-1320   	; 0x11fc <pinMode>
    1724:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZN8SPIClass11initializedE>
    1728:	8f 5f       	subi	r24, 0xFF	; 255
    172a:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <_ZN8SPIClass11initializedE>
  SREG = sreg;
}
    172e:	cf bf       	out	0x3f, r28	; 63
    1730:	cf 91       	pop	r28
  }
}

// SPI STUFF ---------------------------------------------------------------

void Adafruit_DotStar::hw_spi_init(void) { // Initialize hardware SPI
    1732:	08 95       	ret

00001734 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    1734:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1736:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    1738:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZN8SPIClass11initializedE>
    173c:	88 23       	and	r24, r24
    173e:	19 f0       	breq	.+6      	; 0x1746 <_ZN8SPIClass3endEv+0x12>
    initialized--;
    1740:	81 50       	subi	r24, 0x01	; 1
    1742:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    1746:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZN8SPIClass11initializedE>
    174a:	81 11       	cpse	r24, r1
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    174e:	8c b5       	in	r24, 0x2c	; 44
    1750:	8f 7b       	andi	r24, 0xBF	; 191
    1752:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    1754:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    1758:	9f bf       	out	0x3f, r25	; 63
    175a:	08 95       	ret

0000175c <__mulsi3>:
    175c:	db 01       	movw	r26, r22
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
    1762:	51 d0       	rcall	.+162    	; 0x1806 <__muluhisi3>
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	a2 9f       	mul	r26, r18
    176a:	80 0d       	add	r24, r0
    176c:	91 1d       	adc	r25, r1
    176e:	a3 9f       	mul	r26, r19
    1770:	90 0d       	add	r25, r0
    1772:	b2 9f       	mul	r27, r18
    1774:	90 0d       	add	r25, r0
    1776:	11 24       	eor	r1, r1
    1778:	08 95       	ret

0000177a <__udivmodsi4>:
    177a:	a1 e2       	ldi	r26, 0x21	; 33
    177c:	1a 2e       	mov	r1, r26
    177e:	aa 1b       	sub	r26, r26
    1780:	bb 1b       	sub	r27, r27
    1782:	fd 01       	movw	r30, r26
    1784:	0d c0       	rjmp	.+26     	; 0x17a0 <__udivmodsi4_ep>

00001786 <__udivmodsi4_loop>:
    1786:	aa 1f       	adc	r26, r26
    1788:	bb 1f       	adc	r27, r27
    178a:	ee 1f       	adc	r30, r30
    178c:	ff 1f       	adc	r31, r31
    178e:	a2 17       	cp	r26, r18
    1790:	b3 07       	cpc	r27, r19
    1792:	e4 07       	cpc	r30, r20
    1794:	f5 07       	cpc	r31, r21
    1796:	20 f0       	brcs	.+8      	; 0x17a0 <__udivmodsi4_ep>
    1798:	a2 1b       	sub	r26, r18
    179a:	b3 0b       	sbc	r27, r19
    179c:	e4 0b       	sbc	r30, r20
    179e:	f5 0b       	sbc	r31, r21

000017a0 <__udivmodsi4_ep>:
    17a0:	66 1f       	adc	r22, r22
    17a2:	77 1f       	adc	r23, r23
    17a4:	88 1f       	adc	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	1a 94       	dec	r1
    17aa:	69 f7       	brne	.-38     	; 0x1786 <__udivmodsi4_loop>
    17ac:	60 95       	com	r22
    17ae:	70 95       	com	r23
    17b0:	80 95       	com	r24
    17b2:	90 95       	com	r25
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	bd 01       	movw	r22, r26
    17ba:	cf 01       	movw	r24, r30
    17bc:	08 95       	ret

000017be <__divmodsi4>:
    17be:	05 2e       	mov	r0, r21
    17c0:	97 fb       	bst	r25, 7
    17c2:	16 f4       	brtc	.+4      	; 0x17c8 <__divmodsi4+0xa>
    17c4:	00 94       	com	r0
    17c6:	0f d0       	rcall	.+30     	; 0x17e6 <__negsi2>
    17c8:	57 fd       	sbrc	r21, 7
    17ca:	05 d0       	rcall	.+10     	; 0x17d6 <__divmodsi4_neg2>
    17cc:	d6 df       	rcall	.-84     	; 0x177a <__udivmodsi4>
    17ce:	07 fc       	sbrc	r0, 7
    17d0:	02 d0       	rcall	.+4      	; 0x17d6 <__divmodsi4_neg2>
    17d2:	46 f4       	brtc	.+16     	; 0x17e4 <__divmodsi4_exit>
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <__negsi2>

000017d6 <__divmodsi4_neg2>:
    17d6:	50 95       	com	r21
    17d8:	40 95       	com	r20
    17da:	30 95       	com	r19
    17dc:	21 95       	neg	r18
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	4f 4f       	sbci	r20, 0xFF	; 255
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255

000017e4 <__divmodsi4_exit>:
    17e4:	08 95       	ret

000017e6 <__negsi2>:
    17e6:	90 95       	com	r25
    17e8:	80 95       	com	r24
    17ea:	70 95       	com	r23
    17ec:	61 95       	neg	r22
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8f 4f       	sbci	r24, 0xFF	; 255
    17f2:	9f 4f       	sbci	r25, 0xFF	; 255
    17f4:	08 95       	ret

000017f6 <__tablejump2__>:
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	88 1f       	adc	r24, r24
    17fc:	8b bf       	out	0x3b, r24	; 59
    17fe:	07 90       	elpm	r0, Z+
    1800:	f6 91       	elpm	r31, Z
    1802:	e0 2d       	mov	r30, r0
    1804:	19 94       	eijmp

00001806 <__muluhisi3>:
    1806:	09 d0       	rcall	.+18     	; 0x181a <__umulhisi3>
    1808:	a5 9f       	mul	r26, r21
    180a:	90 0d       	add	r25, r0
    180c:	b4 9f       	mul	r27, r20
    180e:	90 0d       	add	r25, r0
    1810:	a4 9f       	mul	r26, r20
    1812:	80 0d       	add	r24, r0
    1814:	91 1d       	adc	r25, r1
    1816:	11 24       	eor	r1, r1
    1818:	08 95       	ret

0000181a <__umulhisi3>:
    181a:	a2 9f       	mul	r26, r18
    181c:	b0 01       	movw	r22, r0
    181e:	b3 9f       	mul	r27, r19
    1820:	c0 01       	movw	r24, r0
    1822:	a3 9f       	mul	r26, r19
    1824:	70 0d       	add	r23, r0
    1826:	81 1d       	adc	r24, r1
    1828:	11 24       	eor	r1, r1
    182a:	91 1d       	adc	r25, r1
    182c:	b2 9f       	mul	r27, r18
    182e:	70 0d       	add	r23, r0
    1830:	81 1d       	adc	r24, r1
    1832:	11 24       	eor	r1, r1
    1834:	91 1d       	adc	r25, r1
    1836:	08 95       	ret

00001838 <malloc>:
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	91 05       	cpc	r25, r1
    1844:	10 f4       	brcc	.+4      	; 0x184a <malloc+0x12>
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <__flp>
    184e:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <__flp+0x1>
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	a0 e0       	ldi	r26, 0x00	; 0
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	30 97       	sbiw	r30, 0x00	; 0
    185c:	19 f1       	breq	.+70     	; 0x18a4 <malloc+0x6c>
    185e:	40 81       	ld	r20, Z
    1860:	51 81       	ldd	r21, Z+1	; 0x01
    1862:	02 81       	ldd	r16, Z+2	; 0x02
    1864:	13 81       	ldd	r17, Z+3	; 0x03
    1866:	48 17       	cp	r20, r24
    1868:	59 07       	cpc	r21, r25
    186a:	c8 f0       	brcs	.+50     	; 0x189e <malloc+0x66>
    186c:	84 17       	cp	r24, r20
    186e:	95 07       	cpc	r25, r21
    1870:	69 f4       	brne	.+26     	; 0x188c <malloc+0x54>
    1872:	10 97       	sbiw	r26, 0x00	; 0
    1874:	31 f0       	breq	.+12     	; 0x1882 <malloc+0x4a>
    1876:	12 96       	adiw	r26, 0x02	; 2
    1878:	0c 93       	st	X, r16
    187a:	12 97       	sbiw	r26, 0x02	; 2
    187c:	13 96       	adiw	r26, 0x03	; 3
    187e:	1c 93       	st	X, r17
    1880:	27 c0       	rjmp	.+78     	; 0x18d0 <malloc+0x98>
    1882:	00 93 88 03 	sts	0x0388, r16	; 0x800388 <__flp>
    1886:	10 93 89 03 	sts	0x0389, r17	; 0x800389 <__flp+0x1>
    188a:	22 c0       	rjmp	.+68     	; 0x18d0 <malloc+0x98>
    188c:	21 15       	cp	r18, r1
    188e:	31 05       	cpc	r19, r1
    1890:	19 f0       	breq	.+6      	; 0x1898 <malloc+0x60>
    1892:	42 17       	cp	r20, r18
    1894:	53 07       	cpc	r21, r19
    1896:	18 f4       	brcc	.+6      	; 0x189e <malloc+0x66>
    1898:	9a 01       	movw	r18, r20
    189a:	bd 01       	movw	r22, r26
    189c:	ef 01       	movw	r28, r30
    189e:	df 01       	movw	r26, r30
    18a0:	f8 01       	movw	r30, r16
    18a2:	db cf       	rjmp	.-74     	; 0x185a <malloc+0x22>
    18a4:	21 15       	cp	r18, r1
    18a6:	31 05       	cpc	r19, r1
    18a8:	f9 f0       	breq	.+62     	; 0x18e8 <malloc+0xb0>
    18aa:	28 1b       	sub	r18, r24
    18ac:	39 0b       	sbc	r19, r25
    18ae:	24 30       	cpi	r18, 0x04	; 4
    18b0:	31 05       	cpc	r19, r1
    18b2:	80 f4       	brcc	.+32     	; 0x18d4 <malloc+0x9c>
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	61 15       	cp	r22, r1
    18ba:	71 05       	cpc	r23, r1
    18bc:	21 f0       	breq	.+8      	; 0x18c6 <malloc+0x8e>
    18be:	fb 01       	movw	r30, r22
    18c0:	93 83       	std	Z+3, r25	; 0x03
    18c2:	82 83       	std	Z+2, r24	; 0x02
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <malloc+0x96>
    18c6:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <__flp+0x1>
    18ca:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <__flp>
    18ce:	fe 01       	movw	r30, r28
    18d0:	32 96       	adiw	r30, 0x02	; 2
    18d2:	44 c0       	rjmp	.+136    	; 0x195c <malloc+0x124>
    18d4:	fe 01       	movw	r30, r28
    18d6:	e2 0f       	add	r30, r18
    18d8:	f3 1f       	adc	r31, r19
    18da:	81 93       	st	Z+, r24
    18dc:	91 93       	st	Z+, r25
    18de:	22 50       	subi	r18, 0x02	; 2
    18e0:	31 09       	sbc	r19, r1
    18e2:	39 83       	std	Y+1, r19	; 0x01
    18e4:	28 83       	st	Y, r18
    18e6:	3a c0       	rjmp	.+116    	; 0x195c <malloc+0x124>
    18e8:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <__brkval>
    18ec:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <__brkval+0x1>
    18f0:	23 2b       	or	r18, r19
    18f2:	41 f4       	brne	.+16     	; 0x1904 <malloc+0xcc>
    18f4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    18f8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    18fc:	30 93 87 03 	sts	0x0387, r19	; 0x800387 <__brkval+0x1>
    1900:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <__brkval>
    1904:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1908:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    190c:	21 15       	cp	r18, r1
    190e:	31 05       	cpc	r19, r1
    1910:	41 f4       	brne	.+16     	; 0x1922 <malloc+0xea>
    1912:	2d b7       	in	r18, 0x3d	; 61
    1914:	3e b7       	in	r19, 0x3e	; 62
    1916:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    191a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    191e:	24 1b       	sub	r18, r20
    1920:	35 0b       	sbc	r19, r21
    1922:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <__brkval>
    1926:	f0 91 87 03 	lds	r31, 0x0387	; 0x800387 <__brkval+0x1>
    192a:	e2 17       	cp	r30, r18
    192c:	f3 07       	cpc	r31, r19
    192e:	a0 f4       	brcc	.+40     	; 0x1958 <malloc+0x120>
    1930:	2e 1b       	sub	r18, r30
    1932:	3f 0b       	sbc	r19, r31
    1934:	28 17       	cp	r18, r24
    1936:	39 07       	cpc	r19, r25
    1938:	78 f0       	brcs	.+30     	; 0x1958 <malloc+0x120>
    193a:	ac 01       	movw	r20, r24
    193c:	4e 5f       	subi	r20, 0xFE	; 254
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	24 17       	cp	r18, r20
    1942:	35 07       	cpc	r19, r21
    1944:	48 f0       	brcs	.+18     	; 0x1958 <malloc+0x120>
    1946:	4e 0f       	add	r20, r30
    1948:	5f 1f       	adc	r21, r31
    194a:	50 93 87 03 	sts	0x0387, r21	; 0x800387 <__brkval+0x1>
    194e:	40 93 86 03 	sts	0x0386, r20	; 0x800386 <__brkval>
    1952:	81 93       	st	Z+, r24
    1954:	91 93       	st	Z+, r25
    1956:	02 c0       	rjmp	.+4      	; 0x195c <malloc+0x124>
    1958:	e0 e0       	ldi	r30, 0x00	; 0
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	cf 01       	movw	r24, r30
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <free>:
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	09 f4       	brne	.+2      	; 0x1972 <free+0xa>
    1970:	81 c0       	rjmp	.+258    	; 0x1a74 <free+0x10c>
    1972:	fc 01       	movw	r30, r24
    1974:	32 97       	sbiw	r30, 0x02	; 2
    1976:	13 82       	std	Z+3, r1	; 0x03
    1978:	12 82       	std	Z+2, r1	; 0x02
    197a:	a0 91 88 03 	lds	r26, 0x0388	; 0x800388 <__flp>
    197e:	b0 91 89 03 	lds	r27, 0x0389	; 0x800389 <__flp+0x1>
    1982:	10 97       	sbiw	r26, 0x00	; 0
    1984:	81 f4       	brne	.+32     	; 0x19a6 <free+0x3e>
    1986:	20 81       	ld	r18, Z
    1988:	31 81       	ldd	r19, Z+1	; 0x01
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <__brkval>
    1992:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <__brkval+0x1>
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	51 f5       	brne	.+84     	; 0x19f0 <free+0x88>
    199c:	f0 93 87 03 	sts	0x0387, r31	; 0x800387 <__brkval+0x1>
    19a0:	e0 93 86 03 	sts	0x0386, r30	; 0x800386 <__brkval>
    19a4:	67 c0       	rjmp	.+206    	; 0x1a74 <free+0x10c>
    19a6:	ed 01       	movw	r28, r26
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	ce 17       	cp	r28, r30
    19ae:	df 07       	cpc	r29, r31
    19b0:	40 f4       	brcc	.+16     	; 0x19c2 <free+0x5a>
    19b2:	4a 81       	ldd	r20, Y+2	; 0x02
    19b4:	5b 81       	ldd	r21, Y+3	; 0x03
    19b6:	9e 01       	movw	r18, r28
    19b8:	41 15       	cp	r20, r1
    19ba:	51 05       	cpc	r21, r1
    19bc:	f1 f0       	breq	.+60     	; 0x19fa <free+0x92>
    19be:	ea 01       	movw	r28, r20
    19c0:	f5 cf       	rjmp	.-22     	; 0x19ac <free+0x44>
    19c2:	d3 83       	std	Z+3, r29	; 0x03
    19c4:	c2 83       	std	Z+2, r28	; 0x02
    19c6:	40 81       	ld	r20, Z
    19c8:	51 81       	ldd	r21, Z+1	; 0x01
    19ca:	84 0f       	add	r24, r20
    19cc:	95 1f       	adc	r25, r21
    19ce:	c8 17       	cp	r28, r24
    19d0:	d9 07       	cpc	r29, r25
    19d2:	59 f4       	brne	.+22     	; 0x19ea <free+0x82>
    19d4:	88 81       	ld	r24, Y
    19d6:	99 81       	ldd	r25, Y+1	; 0x01
    19d8:	84 0f       	add	r24, r20
    19da:	95 1f       	adc	r25, r21
    19dc:	02 96       	adiw	r24, 0x02	; 2
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	21 15       	cp	r18, r1
    19ec:	31 05       	cpc	r19, r1
    19ee:	29 f4       	brne	.+10     	; 0x19fa <free+0x92>
    19f0:	f0 93 89 03 	sts	0x0389, r31	; 0x800389 <__flp+0x1>
    19f4:	e0 93 88 03 	sts	0x0388, r30	; 0x800388 <__flp>
    19f8:	3d c0       	rjmp	.+122    	; 0x1a74 <free+0x10c>
    19fa:	e9 01       	movw	r28, r18
    19fc:	fb 83       	std	Y+3, r31	; 0x03
    19fe:	ea 83       	std	Y+2, r30	; 0x02
    1a00:	49 91       	ld	r20, Y+
    1a02:	59 91       	ld	r21, Y+
    1a04:	c4 0f       	add	r28, r20
    1a06:	d5 1f       	adc	r29, r21
    1a08:	ec 17       	cp	r30, r28
    1a0a:	fd 07       	cpc	r31, r29
    1a0c:	61 f4       	brne	.+24     	; 0x1a26 <free+0xbe>
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	84 0f       	add	r24, r20
    1a14:	95 1f       	adc	r25, r21
    1a16:	02 96       	adiw	r24, 0x02	; 2
    1a18:	e9 01       	movw	r28, r18
    1a1a:	99 83       	std	Y+1, r25	; 0x01
    1a1c:	88 83       	st	Y, r24
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	9b 83       	std	Y+3, r25	; 0x03
    1a24:	8a 83       	std	Y+2, r24	; 0x02
    1a26:	e0 e0       	ldi	r30, 0x00	; 0
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	12 96       	adiw	r26, 0x02	; 2
    1a2c:	8d 91       	ld	r24, X+
    1a2e:	9c 91       	ld	r25, X
    1a30:	13 97       	sbiw	r26, 0x03	; 3
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <free+0xd4>
    1a36:	fd 01       	movw	r30, r26
    1a38:	dc 01       	movw	r26, r24
    1a3a:	f7 cf       	rjmp	.-18     	; 0x1a2a <free+0xc2>
    1a3c:	8d 91       	ld	r24, X+
    1a3e:	9c 91       	ld	r25, X
    1a40:	11 97       	sbiw	r26, 0x01	; 1
    1a42:	9d 01       	movw	r18, r26
    1a44:	2e 5f       	subi	r18, 0xFE	; 254
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <__brkval>
    1a50:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <__brkval+0x1>
    1a54:	28 17       	cp	r18, r24
    1a56:	39 07       	cpc	r19, r25
    1a58:	69 f4       	brne	.+26     	; 0x1a74 <free+0x10c>
    1a5a:	30 97       	sbiw	r30, 0x00	; 0
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <free+0x100>
    1a5e:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <__flp+0x1>
    1a62:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <__flp>
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <free+0x104>
    1a68:	13 82       	std	Z+3, r1	; 0x03
    1a6a:	12 82       	std	Z+2, r1	; 0x02
    1a6c:	b0 93 87 03 	sts	0x0387, r27	; 0x800387 <__brkval+0x1>
    1a70:	a0 93 86 03 	sts	0x0386, r26	; 0x800386 <__brkval>
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <memset>:
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <memset+0x6>
    1a7e:	6d 93       	st	X+, r22
    1a80:	41 50       	subi	r20, 0x01	; 1
    1a82:	50 40       	sbci	r21, 0x00	; 0
    1a84:	e0 f7       	brcc	.-8      	; 0x1a7e <memset+0x4>
    1a86:	08 95       	ret

00001a88 <__do_global_dtors>:
    1a88:	11 e0       	ldi	r17, 0x01	; 1
    1a8a:	c9 e0       	ldi	r28, 0x09	; 9
    1a8c:	d1 e0       	ldi	r29, 0x01	; 1
    1a8e:	00 e0       	ldi	r16, 0x00	; 0
    1a90:	05 c0       	rjmp	.+10     	; 0x1a9c <__do_global_dtors+0x14>
    1a92:	80 2f       	mov	r24, r16
    1a94:	fe 01       	movw	r30, r28
    1a96:	af de       	rcall	.-674    	; 0x17f6 <__tablejump2__>
    1a98:	21 96       	adiw	r28, 0x01	; 1
    1a9a:	01 1d       	adc	r16, r1
    1a9c:	ca 30       	cpi	r28, 0x0A	; 10
    1a9e:	d1 07       	cpc	r29, r17
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	08 07       	cpc	r16, r24
    1aa4:	b1 f7       	brne	.-20     	; 0x1a92 <__do_global_dtors+0xa>
    1aa6:	f8 94       	cli

00001aa8 <__stop_program>:
    1aa8:	ff cf       	rjmp	.-2      	; 0x1aa8 <__stop_program>
